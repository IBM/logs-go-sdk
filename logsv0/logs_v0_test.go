/**
 * (C) Copyright IBM Corp. 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package logsv0_test

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"os"
	"time"

	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/go-openapi/strfmt"
	"github.com/IBM/logs-go-sdk/logsv0"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe(`LogsV0`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(logsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(logsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
				URL: "https://logsv0/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(logsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"LOGS_URL": "https://logsv0/api",
				"LOGS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				logsService, serviceErr := logsv0.NewLogsV0UsingExternalConfig(&logsv0.LogsV0Options{
				})
				Expect(logsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := logsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != logsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(logsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(logsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				logsService, serviceErr := logsv0.NewLogsV0UsingExternalConfig(&logsv0.LogsV0Options{
					URL: "https://testService/api",
				})
				Expect(logsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(logsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := logsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != logsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(logsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(logsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				logsService, serviceErr := logsv0.NewLogsV0UsingExternalConfig(&logsv0.LogsV0Options{
				})
				err := logsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(logsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := logsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != logsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(logsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(logsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"LOGS_URL": "https://logsv0/api",
				"LOGS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			logsService, serviceErr := logsv0.NewLogsV0UsingExternalConfig(&logsv0.LogsV0Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(logsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"LOGS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			logsService, serviceErr := logsv0.NewLogsV0UsingExternalConfig(&logsv0.LogsV0Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(logsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = logsv0.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetAlert(getAlertOptions *GetAlertOptions) - Operation response error`, func() {
		getAlertPath := "/v1/alerts/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAlertPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAlert with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetAlertOptions model
				getAlertOptionsModel := new(logsv0.GetAlertOptions)
				getAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.GetAlert(getAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.GetAlert(getAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAlert(getAlertOptions *GetAlertOptions)`, func() {
		getAlertPath := "/v1/alerts/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAlertPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Unique count alert", "description": "Example of unique count alert from terraform", "is_active": true, "severity": "error", "expiration": {"year": 2012, "month": 12, "day": 24}, "condition": {"immediate": {}}, "notification_groups": [{"group_by_fields": ["GroupByFields"], "notifications": [{"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "integration_id": 123}]}], "filters": {"severities": ["critical"], "metadata": {"applications": ["Applications"], "subsystems": ["Subsystems"]}, "alias": "monitorQuery", "text": "_exists_:\"container_name\"", "ratio_alerts": [{"alias": "TopLevelAlert", "text": "_exists_:\"container_name\"", "severities": ["critical"], "applications": ["Applications"], "subsystems": ["Subsystems"], "group_by": ["GroupBy"]}], "filter_type": "flow"}, "active_when": {"timeframes": [{"days_of_week": ["sunday"], "range": {"start": {"hours": 22, "minutes": 22, "seconds": 22}, "end": {"hours": 22, "minutes": 22, "seconds": 22}}}]}, "notification_payload_filters": ["NotificationPayloadFilters"], "meta_labels": [{"key": "ColorLabel", "value": "Red"}], "meta_labels_strings": ["MetaLabelsStrings"], "unique_identifier": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "incident_settings": {"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "use_as_notification_settings": true}}`)
				}))
			})
			It(`Invoke GetAlert successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the GetAlertOptions model
				getAlertOptionsModel := new(logsv0.GetAlertOptions)
				getAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.GetAlertWithContext(ctx, getAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.GetAlert(getAlertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.GetAlertWithContext(ctx, getAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAlertPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Unique count alert", "description": "Example of unique count alert from terraform", "is_active": true, "severity": "error", "expiration": {"year": 2012, "month": 12, "day": 24}, "condition": {"immediate": {}}, "notification_groups": [{"group_by_fields": ["GroupByFields"], "notifications": [{"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "integration_id": 123}]}], "filters": {"severities": ["critical"], "metadata": {"applications": ["Applications"], "subsystems": ["Subsystems"]}, "alias": "monitorQuery", "text": "_exists_:\"container_name\"", "ratio_alerts": [{"alias": "TopLevelAlert", "text": "_exists_:\"container_name\"", "severities": ["critical"], "applications": ["Applications"], "subsystems": ["Subsystems"], "group_by": ["GroupBy"]}], "filter_type": "flow"}, "active_when": {"timeframes": [{"days_of_week": ["sunday"], "range": {"start": {"hours": 22, "minutes": 22, "seconds": 22}, "end": {"hours": 22, "minutes": 22, "seconds": 22}}}]}, "notification_payload_filters": ["NotificationPayloadFilters"], "meta_labels": [{"key": "ColorLabel", "value": "Red"}], "meta_labels_strings": ["MetaLabelsStrings"], "unique_identifier": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "incident_settings": {"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "use_as_notification_settings": true}}`)
				}))
			})
			It(`Invoke GetAlert successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.GetAlert(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAlertOptions model
				getAlertOptionsModel := new(logsv0.GetAlertOptions)
				getAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.GetAlert(getAlertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAlert with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetAlertOptions model
				getAlertOptionsModel := new(logsv0.GetAlertOptions)
				getAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.GetAlert(getAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAlertOptions model with no property values
				getAlertOptionsModelNew := new(logsv0.GetAlertOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.GetAlert(getAlertOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetAlert successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetAlertOptions model
				getAlertOptionsModel := new(logsv0.GetAlertOptions)
				getAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.GetAlert(getAlertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAlert(updateAlertOptions *UpdateAlertOptions) - Operation response error`, func() {
		updateAlertPath := "/v1/alerts/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAlertPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateAlert with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)

				// Construct an instance of the UpdateAlertOptions model
				updateAlertOptionsModel := new(logsv0.UpdateAlertOptions)
				updateAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateAlertOptionsModel.Name = core.StringPtr("Test alert")
				updateAlertOptionsModel.IsActive = core.BoolPtr(true)
				updateAlertOptionsModel.Severity = core.StringPtr("info_or_unspecified")
				updateAlertOptionsModel.Condition = alertsV2AlertConditionModel
				updateAlertOptionsModel.NotificationGroups = []logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}
				updateAlertOptionsModel.Filters = alertsV1AlertFiltersModel
				updateAlertOptionsModel.Description = core.StringPtr("Alert if the number of logs reaches a threshold")
				updateAlertOptionsModel.Expiration = alertsV1DateModel
				updateAlertOptionsModel.ActiveWhen = alertsV1AlertActiveWhenModel
				updateAlertOptionsModel.NotificationPayloadFilters = []string{"testString"}
				updateAlertOptionsModel.MetaLabels = []logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}
				updateAlertOptionsModel.MetaLabelsStrings = []string{}
				updateAlertOptionsModel.IncidentSettings = alertsV2AlertIncidentSettingsModel
				updateAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.UpdateAlert(updateAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.UpdateAlert(updateAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAlert(updateAlertOptions *UpdateAlertOptions)`, func() {
		updateAlertPath := "/v1/alerts/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAlertPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Unique count alert", "description": "Example of unique count alert from terraform", "is_active": true, "severity": "error", "expiration": {"year": 2012, "month": 12, "day": 24}, "condition": {"immediate": {}}, "notification_groups": [{"group_by_fields": ["GroupByFields"], "notifications": [{"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "integration_id": 123}]}], "filters": {"severities": ["critical"], "metadata": {"applications": ["Applications"], "subsystems": ["Subsystems"]}, "alias": "monitorQuery", "text": "_exists_:\"container_name\"", "ratio_alerts": [{"alias": "TopLevelAlert", "text": "_exists_:\"container_name\"", "severities": ["critical"], "applications": ["Applications"], "subsystems": ["Subsystems"], "group_by": ["GroupBy"]}], "filter_type": "flow"}, "active_when": {"timeframes": [{"days_of_week": ["sunday"], "range": {"start": {"hours": 22, "minutes": 22, "seconds": 22}, "end": {"hours": 22, "minutes": 22, "seconds": 22}}}]}, "notification_payload_filters": ["NotificationPayloadFilters"], "meta_labels": [{"key": "ColorLabel", "value": "Red"}], "meta_labels_strings": ["MetaLabelsStrings"], "unique_identifier": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "incident_settings": {"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "use_as_notification_settings": true}}`)
				}))
			})
			It(`Invoke UpdateAlert successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)

				// Construct an instance of the UpdateAlertOptions model
				updateAlertOptionsModel := new(logsv0.UpdateAlertOptions)
				updateAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateAlertOptionsModel.Name = core.StringPtr("Test alert")
				updateAlertOptionsModel.IsActive = core.BoolPtr(true)
				updateAlertOptionsModel.Severity = core.StringPtr("info_or_unspecified")
				updateAlertOptionsModel.Condition = alertsV2AlertConditionModel
				updateAlertOptionsModel.NotificationGroups = []logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}
				updateAlertOptionsModel.Filters = alertsV1AlertFiltersModel
				updateAlertOptionsModel.Description = core.StringPtr("Alert if the number of logs reaches a threshold")
				updateAlertOptionsModel.Expiration = alertsV1DateModel
				updateAlertOptionsModel.ActiveWhen = alertsV1AlertActiveWhenModel
				updateAlertOptionsModel.NotificationPayloadFilters = []string{"testString"}
				updateAlertOptionsModel.MetaLabels = []logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}
				updateAlertOptionsModel.MetaLabelsStrings = []string{}
				updateAlertOptionsModel.IncidentSettings = alertsV2AlertIncidentSettingsModel
				updateAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.UpdateAlertWithContext(ctx, updateAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.UpdateAlert(updateAlertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.UpdateAlertWithContext(ctx, updateAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAlertPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Unique count alert", "description": "Example of unique count alert from terraform", "is_active": true, "severity": "error", "expiration": {"year": 2012, "month": 12, "day": 24}, "condition": {"immediate": {}}, "notification_groups": [{"group_by_fields": ["GroupByFields"], "notifications": [{"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "integration_id": 123}]}], "filters": {"severities": ["critical"], "metadata": {"applications": ["Applications"], "subsystems": ["Subsystems"]}, "alias": "monitorQuery", "text": "_exists_:\"container_name\"", "ratio_alerts": [{"alias": "TopLevelAlert", "text": "_exists_:\"container_name\"", "severities": ["critical"], "applications": ["Applications"], "subsystems": ["Subsystems"], "group_by": ["GroupBy"]}], "filter_type": "flow"}, "active_when": {"timeframes": [{"days_of_week": ["sunday"], "range": {"start": {"hours": 22, "minutes": 22, "seconds": 22}, "end": {"hours": 22, "minutes": 22, "seconds": 22}}}]}, "notification_payload_filters": ["NotificationPayloadFilters"], "meta_labels": [{"key": "ColorLabel", "value": "Red"}], "meta_labels_strings": ["MetaLabelsStrings"], "unique_identifier": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "incident_settings": {"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "use_as_notification_settings": true}}`)
				}))
			})
			It(`Invoke UpdateAlert successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.UpdateAlert(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)

				// Construct an instance of the UpdateAlertOptions model
				updateAlertOptionsModel := new(logsv0.UpdateAlertOptions)
				updateAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateAlertOptionsModel.Name = core.StringPtr("Test alert")
				updateAlertOptionsModel.IsActive = core.BoolPtr(true)
				updateAlertOptionsModel.Severity = core.StringPtr("info_or_unspecified")
				updateAlertOptionsModel.Condition = alertsV2AlertConditionModel
				updateAlertOptionsModel.NotificationGroups = []logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}
				updateAlertOptionsModel.Filters = alertsV1AlertFiltersModel
				updateAlertOptionsModel.Description = core.StringPtr("Alert if the number of logs reaches a threshold")
				updateAlertOptionsModel.Expiration = alertsV1DateModel
				updateAlertOptionsModel.ActiveWhen = alertsV1AlertActiveWhenModel
				updateAlertOptionsModel.NotificationPayloadFilters = []string{"testString"}
				updateAlertOptionsModel.MetaLabels = []logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}
				updateAlertOptionsModel.MetaLabelsStrings = []string{}
				updateAlertOptionsModel.IncidentSettings = alertsV2AlertIncidentSettingsModel
				updateAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.UpdateAlert(updateAlertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateAlert with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)

				// Construct an instance of the UpdateAlertOptions model
				updateAlertOptionsModel := new(logsv0.UpdateAlertOptions)
				updateAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateAlertOptionsModel.Name = core.StringPtr("Test alert")
				updateAlertOptionsModel.IsActive = core.BoolPtr(true)
				updateAlertOptionsModel.Severity = core.StringPtr("info_or_unspecified")
				updateAlertOptionsModel.Condition = alertsV2AlertConditionModel
				updateAlertOptionsModel.NotificationGroups = []logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}
				updateAlertOptionsModel.Filters = alertsV1AlertFiltersModel
				updateAlertOptionsModel.Description = core.StringPtr("Alert if the number of logs reaches a threshold")
				updateAlertOptionsModel.Expiration = alertsV1DateModel
				updateAlertOptionsModel.ActiveWhen = alertsV1AlertActiveWhenModel
				updateAlertOptionsModel.NotificationPayloadFilters = []string{"testString"}
				updateAlertOptionsModel.MetaLabels = []logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}
				updateAlertOptionsModel.MetaLabelsStrings = []string{}
				updateAlertOptionsModel.IncidentSettings = alertsV2AlertIncidentSettingsModel
				updateAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.UpdateAlert(updateAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateAlertOptions model with no property values
				updateAlertOptionsModelNew := new(logsv0.UpdateAlertOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.UpdateAlert(updateAlertOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateAlert successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)

				// Construct an instance of the UpdateAlertOptions model
				updateAlertOptionsModel := new(logsv0.UpdateAlertOptions)
				updateAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateAlertOptionsModel.Name = core.StringPtr("Test alert")
				updateAlertOptionsModel.IsActive = core.BoolPtr(true)
				updateAlertOptionsModel.Severity = core.StringPtr("info_or_unspecified")
				updateAlertOptionsModel.Condition = alertsV2AlertConditionModel
				updateAlertOptionsModel.NotificationGroups = []logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}
				updateAlertOptionsModel.Filters = alertsV1AlertFiltersModel
				updateAlertOptionsModel.Description = core.StringPtr("Alert if the number of logs reaches a threshold")
				updateAlertOptionsModel.Expiration = alertsV1DateModel
				updateAlertOptionsModel.ActiveWhen = alertsV1AlertActiveWhenModel
				updateAlertOptionsModel.NotificationPayloadFilters = []string{"testString"}
				updateAlertOptionsModel.MetaLabels = []logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}
				updateAlertOptionsModel.MetaLabelsStrings = []string{}
				updateAlertOptionsModel.IncidentSettings = alertsV2AlertIncidentSettingsModel
				updateAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.UpdateAlert(updateAlertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteAlert(deleteAlertOptions *DeleteAlertOptions)`, func() {
		deleteAlertPath := "/v1/alerts/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteAlertPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAlert successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := logsService.DeleteAlert(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteAlertOptions model
				deleteAlertOptionsModel := new(logsv0.DeleteAlertOptions)
				deleteAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = logsService.DeleteAlert(deleteAlertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAlert with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the DeleteAlertOptions model
				deleteAlertOptionsModel := new(logsv0.DeleteAlertOptions)
				deleteAlertOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := logsService.DeleteAlert(deleteAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteAlertOptions model with no property values
				deleteAlertOptionsModelNew := new(logsv0.DeleteAlertOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = logsService.DeleteAlert(deleteAlertOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAlerts(getAlertsOptions *GetAlertsOptions) - Operation response error`, func() {
		getAlertsPath := "/v1/alerts"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAlertsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAlerts with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetAlertsOptions model
				getAlertsOptionsModel := new(logsv0.GetAlertsOptions)
				getAlertsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.GetAlerts(getAlertsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.GetAlerts(getAlertsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAlerts(getAlertsOptions *GetAlertsOptions)`, func() {
		getAlertsPath := "/v1/alerts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAlertsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"alerts": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Unique count alert", "description": "Example of unique count alert from terraform", "is_active": true, "severity": "error", "expiration": {"year": 2012, "month": 12, "day": 24}, "condition": {"immediate": {}}, "notification_groups": [{"group_by_fields": ["GroupByFields"], "notifications": [{"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "integration_id": 123}]}], "filters": {"severities": ["critical"], "metadata": {"applications": ["Applications"], "subsystems": ["Subsystems"]}, "alias": "monitorQuery", "text": "_exists_:\"container_name\"", "ratio_alerts": [{"alias": "TopLevelAlert", "text": "_exists_:\"container_name\"", "severities": ["critical"], "applications": ["Applications"], "subsystems": ["Subsystems"], "group_by": ["GroupBy"]}], "filter_type": "flow"}, "active_when": {"timeframes": [{"days_of_week": ["sunday"], "range": {"start": {"hours": 22, "minutes": 22, "seconds": 22}, "end": {"hours": 22, "minutes": 22, "seconds": 22}}}]}, "notification_payload_filters": ["NotificationPayloadFilters"], "meta_labels": [{"key": "ColorLabel", "value": "Red"}], "meta_labels_strings": ["MetaLabelsStrings"], "unique_identifier": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "incident_settings": {"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "use_as_notification_settings": true}}]}`)
				}))
			})
			It(`Invoke GetAlerts successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the GetAlertsOptions model
				getAlertsOptionsModel := new(logsv0.GetAlertsOptions)
				getAlertsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.GetAlertsWithContext(ctx, getAlertsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.GetAlerts(getAlertsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.GetAlertsWithContext(ctx, getAlertsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAlertsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"alerts": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Unique count alert", "description": "Example of unique count alert from terraform", "is_active": true, "severity": "error", "expiration": {"year": 2012, "month": 12, "day": 24}, "condition": {"immediate": {}}, "notification_groups": [{"group_by_fields": ["GroupByFields"], "notifications": [{"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "integration_id": 123}]}], "filters": {"severities": ["critical"], "metadata": {"applications": ["Applications"], "subsystems": ["Subsystems"]}, "alias": "monitorQuery", "text": "_exists_:\"container_name\"", "ratio_alerts": [{"alias": "TopLevelAlert", "text": "_exists_:\"container_name\"", "severities": ["critical"], "applications": ["Applications"], "subsystems": ["Subsystems"], "group_by": ["GroupBy"]}], "filter_type": "flow"}, "active_when": {"timeframes": [{"days_of_week": ["sunday"], "range": {"start": {"hours": 22, "minutes": 22, "seconds": 22}, "end": {"hours": 22, "minutes": 22, "seconds": 22}}}]}, "notification_payload_filters": ["NotificationPayloadFilters"], "meta_labels": [{"key": "ColorLabel", "value": "Red"}], "meta_labels_strings": ["MetaLabelsStrings"], "unique_identifier": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "incident_settings": {"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "use_as_notification_settings": true}}]}`)
				}))
			})
			It(`Invoke GetAlerts successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.GetAlerts(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAlertsOptions model
				getAlertsOptionsModel := new(logsv0.GetAlertsOptions)
				getAlertsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.GetAlerts(getAlertsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAlerts with error: Operation request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetAlertsOptions model
				getAlertsOptionsModel := new(logsv0.GetAlertsOptions)
				getAlertsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.GetAlerts(getAlertsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetAlerts successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetAlertsOptions model
				getAlertsOptionsModel := new(logsv0.GetAlertsOptions)
				getAlertsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.GetAlerts(getAlertsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateAlert(createAlertOptions *CreateAlertOptions) - Operation response error`, func() {
		createAlertPath := "/v1/alerts"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAlertPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateAlert with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)

				// Construct an instance of the CreateAlertOptions model
				createAlertOptionsModel := new(logsv0.CreateAlertOptions)
				createAlertOptionsModel.Name = core.StringPtr("Test alert")
				createAlertOptionsModel.IsActive = core.BoolPtr(true)
				createAlertOptionsModel.Severity = core.StringPtr("info_or_unspecified")
				createAlertOptionsModel.Condition = alertsV2AlertConditionModel
				createAlertOptionsModel.NotificationGroups = []logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}
				createAlertOptionsModel.Filters = alertsV1AlertFiltersModel
				createAlertOptionsModel.Description = core.StringPtr("Alert if the number of logs reaches a threshold")
				createAlertOptionsModel.Expiration = alertsV1DateModel
				createAlertOptionsModel.ActiveWhen = alertsV1AlertActiveWhenModel
				createAlertOptionsModel.NotificationPayloadFilters = []string{"testString"}
				createAlertOptionsModel.MetaLabels = []logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}
				createAlertOptionsModel.MetaLabelsStrings = []string{}
				createAlertOptionsModel.IncidentSettings = alertsV2AlertIncidentSettingsModel
				createAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.CreateAlert(createAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.CreateAlert(createAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateAlert(createAlertOptions *CreateAlertOptions)`, func() {
		createAlertPath := "/v1/alerts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAlertPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Unique count alert", "description": "Example of unique count alert from terraform", "is_active": true, "severity": "error", "expiration": {"year": 2012, "month": 12, "day": 24}, "condition": {"immediate": {}}, "notification_groups": [{"group_by_fields": ["GroupByFields"], "notifications": [{"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "integration_id": 123}]}], "filters": {"severities": ["critical"], "metadata": {"applications": ["Applications"], "subsystems": ["Subsystems"]}, "alias": "monitorQuery", "text": "_exists_:\"container_name\"", "ratio_alerts": [{"alias": "TopLevelAlert", "text": "_exists_:\"container_name\"", "severities": ["critical"], "applications": ["Applications"], "subsystems": ["Subsystems"], "group_by": ["GroupBy"]}], "filter_type": "flow"}, "active_when": {"timeframes": [{"days_of_week": ["sunday"], "range": {"start": {"hours": 22, "minutes": 22, "seconds": 22}, "end": {"hours": 22, "minutes": 22, "seconds": 22}}}]}, "notification_payload_filters": ["NotificationPayloadFilters"], "meta_labels": [{"key": "ColorLabel", "value": "Red"}], "meta_labels_strings": ["MetaLabelsStrings"], "unique_identifier": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "incident_settings": {"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "use_as_notification_settings": true}}`)
				}))
			})
			It(`Invoke CreateAlert successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)

				// Construct an instance of the CreateAlertOptions model
				createAlertOptionsModel := new(logsv0.CreateAlertOptions)
				createAlertOptionsModel.Name = core.StringPtr("Test alert")
				createAlertOptionsModel.IsActive = core.BoolPtr(true)
				createAlertOptionsModel.Severity = core.StringPtr("info_or_unspecified")
				createAlertOptionsModel.Condition = alertsV2AlertConditionModel
				createAlertOptionsModel.NotificationGroups = []logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}
				createAlertOptionsModel.Filters = alertsV1AlertFiltersModel
				createAlertOptionsModel.Description = core.StringPtr("Alert if the number of logs reaches a threshold")
				createAlertOptionsModel.Expiration = alertsV1DateModel
				createAlertOptionsModel.ActiveWhen = alertsV1AlertActiveWhenModel
				createAlertOptionsModel.NotificationPayloadFilters = []string{"testString"}
				createAlertOptionsModel.MetaLabels = []logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}
				createAlertOptionsModel.MetaLabelsStrings = []string{}
				createAlertOptionsModel.IncidentSettings = alertsV2AlertIncidentSettingsModel
				createAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.CreateAlertWithContext(ctx, createAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.CreateAlert(createAlertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.CreateAlertWithContext(ctx, createAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAlertPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Unique count alert", "description": "Example of unique count alert from terraform", "is_active": true, "severity": "error", "expiration": {"year": 2012, "month": 12, "day": 24}, "condition": {"immediate": {}}, "notification_groups": [{"group_by_fields": ["GroupByFields"], "notifications": [{"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "integration_id": 123}]}], "filters": {"severities": ["critical"], "metadata": {"applications": ["Applications"], "subsystems": ["Subsystems"]}, "alias": "monitorQuery", "text": "_exists_:\"container_name\"", "ratio_alerts": [{"alias": "TopLevelAlert", "text": "_exists_:\"container_name\"", "severities": ["critical"], "applications": ["Applications"], "subsystems": ["Subsystems"], "group_by": ["GroupBy"]}], "filter_type": "flow"}, "active_when": {"timeframes": [{"days_of_week": ["sunday"], "range": {"start": {"hours": 22, "minutes": 22, "seconds": 22}, "end": {"hours": 22, "minutes": 22, "seconds": 22}}}]}, "notification_payload_filters": ["NotificationPayloadFilters"], "meta_labels": [{"key": "ColorLabel", "value": "Red"}], "meta_labels_strings": ["MetaLabelsStrings"], "unique_identifier": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "incident_settings": {"retriggering_period_seconds": 60, "notify_on": "triggered_and_resolved", "use_as_notification_settings": true}}`)
				}))
			})
			It(`Invoke CreateAlert successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.CreateAlert(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)

				// Construct an instance of the CreateAlertOptions model
				createAlertOptionsModel := new(logsv0.CreateAlertOptions)
				createAlertOptionsModel.Name = core.StringPtr("Test alert")
				createAlertOptionsModel.IsActive = core.BoolPtr(true)
				createAlertOptionsModel.Severity = core.StringPtr("info_or_unspecified")
				createAlertOptionsModel.Condition = alertsV2AlertConditionModel
				createAlertOptionsModel.NotificationGroups = []logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}
				createAlertOptionsModel.Filters = alertsV1AlertFiltersModel
				createAlertOptionsModel.Description = core.StringPtr("Alert if the number of logs reaches a threshold")
				createAlertOptionsModel.Expiration = alertsV1DateModel
				createAlertOptionsModel.ActiveWhen = alertsV1AlertActiveWhenModel
				createAlertOptionsModel.NotificationPayloadFilters = []string{"testString"}
				createAlertOptionsModel.MetaLabels = []logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}
				createAlertOptionsModel.MetaLabelsStrings = []string{}
				createAlertOptionsModel.IncidentSettings = alertsV2AlertIncidentSettingsModel
				createAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.CreateAlert(createAlertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateAlert with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)

				// Construct an instance of the CreateAlertOptions model
				createAlertOptionsModel := new(logsv0.CreateAlertOptions)
				createAlertOptionsModel.Name = core.StringPtr("Test alert")
				createAlertOptionsModel.IsActive = core.BoolPtr(true)
				createAlertOptionsModel.Severity = core.StringPtr("info_or_unspecified")
				createAlertOptionsModel.Condition = alertsV2AlertConditionModel
				createAlertOptionsModel.NotificationGroups = []logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}
				createAlertOptionsModel.Filters = alertsV1AlertFiltersModel
				createAlertOptionsModel.Description = core.StringPtr("Alert if the number of logs reaches a threshold")
				createAlertOptionsModel.Expiration = alertsV1DateModel
				createAlertOptionsModel.ActiveWhen = alertsV1AlertActiveWhenModel
				createAlertOptionsModel.NotificationPayloadFilters = []string{"testString"}
				createAlertOptionsModel.MetaLabels = []logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}
				createAlertOptionsModel.MetaLabelsStrings = []string{}
				createAlertOptionsModel.IncidentSettings = alertsV2AlertIncidentSettingsModel
				createAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.CreateAlert(createAlertOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateAlertOptions model with no property values
				createAlertOptionsModelNew := new(logsv0.CreateAlertOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.CreateAlert(createAlertOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateAlert successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)

				// Construct an instance of the CreateAlertOptions model
				createAlertOptionsModel := new(logsv0.CreateAlertOptions)
				createAlertOptionsModel.Name = core.StringPtr("Test alert")
				createAlertOptionsModel.IsActive = core.BoolPtr(true)
				createAlertOptionsModel.Severity = core.StringPtr("info_or_unspecified")
				createAlertOptionsModel.Condition = alertsV2AlertConditionModel
				createAlertOptionsModel.NotificationGroups = []logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}
				createAlertOptionsModel.Filters = alertsV1AlertFiltersModel
				createAlertOptionsModel.Description = core.StringPtr("Alert if the number of logs reaches a threshold")
				createAlertOptionsModel.Expiration = alertsV1DateModel
				createAlertOptionsModel.ActiveWhen = alertsV1AlertActiveWhenModel
				createAlertOptionsModel.NotificationPayloadFilters = []string{"testString"}
				createAlertOptionsModel.MetaLabels = []logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}
				createAlertOptionsModel.MetaLabelsStrings = []string{}
				createAlertOptionsModel.IncidentSettings = alertsV2AlertIncidentSettingsModel
				createAlertOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.CreateAlert(createAlertOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRuleGroup(getRuleGroupOptions *GetRuleGroupOptions) - Operation response error`, func() {
		getRuleGroupPath := "/v1/rule_groups/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRuleGroupPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRuleGroup with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetRuleGroupOptions model
				getRuleGroupOptionsModel := new(logsv0.GetRuleGroupOptions)
				getRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.GetRuleGroup(getRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.GetRuleGroup(getRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRuleGroup(getRuleGroupOptions *GetRuleGroupOptions)`, func() {
		getRuleGroupPath := "/v1/rule_groups/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRuleGroupPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "rule group", "description": "Rule group to extract severity from logs", "enabled": true, "rule_matchers": [{"application_name": {"value": "my-application"}}], "rule_subgroups": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "rules": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Extract service and region", "description": "Extracts the service and region from the source field", "source_field": "logObj.source", "parameters": {"extract_parameters": {"rule": "^http:\\/\\/my\\.service\\.com\\/#(?P<service>\\w+)\\-(?P<region>[^_]+)_"}}, "enabled": true, "order": 1}], "enabled": true, "order": 1}], "order": 1}`)
				}))
			})
			It(`Invoke GetRuleGroup successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the GetRuleGroupOptions model
				getRuleGroupOptionsModel := new(logsv0.GetRuleGroupOptions)
				getRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.GetRuleGroupWithContext(ctx, getRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.GetRuleGroup(getRuleGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.GetRuleGroupWithContext(ctx, getRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRuleGroupPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "rule group", "description": "Rule group to extract severity from logs", "enabled": true, "rule_matchers": [{"application_name": {"value": "my-application"}}], "rule_subgroups": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "rules": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Extract service and region", "description": "Extracts the service and region from the source field", "source_field": "logObj.source", "parameters": {"extract_parameters": {"rule": "^http:\\/\\/my\\.service\\.com\\/#(?P<service>\\w+)\\-(?P<region>[^_]+)_"}}, "enabled": true, "order": 1}], "enabled": true, "order": 1}], "order": 1}`)
				}))
			})
			It(`Invoke GetRuleGroup successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.GetRuleGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRuleGroupOptions model
				getRuleGroupOptionsModel := new(logsv0.GetRuleGroupOptions)
				getRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.GetRuleGroup(getRuleGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetRuleGroup with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetRuleGroupOptions model
				getRuleGroupOptionsModel := new(logsv0.GetRuleGroupOptions)
				getRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.GetRuleGroup(getRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRuleGroupOptions model with no property values
				getRuleGroupOptionsModelNew := new(logsv0.GetRuleGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.GetRuleGroup(getRuleGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetRuleGroup successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetRuleGroupOptions model
				getRuleGroupOptionsModel := new(logsv0.GetRuleGroupOptions)
				getRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.GetRuleGroup(getRuleGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateRuleGroup(updateRuleGroupOptions *UpdateRuleGroupOptions) - Operation response error`, func() {
		updateRuleGroupPath := "/v1/rule_groups/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateRuleGroupPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateRuleGroup with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel

				// Construct an instance of the UpdateRuleGroupOptions model
				updateRuleGroupOptionsModel := new(logsv0.UpdateRuleGroupOptions)
				updateRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateRuleGroupOptionsModel.Name = core.StringPtr("mysql-extractrule")
				updateRuleGroupOptionsModel.RuleSubgroups = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}
				updateRuleGroupOptionsModel.Description = core.StringPtr("mysql audit logs parser")
				updateRuleGroupOptionsModel.Enabled = core.BoolPtr(true)
				updateRuleGroupOptionsModel.RuleMatchers = []logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}
				updateRuleGroupOptionsModel.Order = core.Int64Ptr(int64(39))
				updateRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.UpdateRuleGroup(updateRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.UpdateRuleGroup(updateRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateRuleGroup(updateRuleGroupOptions *UpdateRuleGroupOptions)`, func() {
		updateRuleGroupPath := "/v1/rule_groups/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateRuleGroupPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "rule group", "description": "Rule group to extract severity from logs", "enabled": true, "rule_matchers": [{"application_name": {"value": "my-application"}}], "rule_subgroups": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "rules": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Extract service and region", "description": "Extracts the service and region from the source field", "source_field": "logObj.source", "parameters": {"extract_parameters": {"rule": "^http:\\/\\/my\\.service\\.com\\/#(?P<service>\\w+)\\-(?P<region>[^_]+)_"}}, "enabled": true, "order": 1}], "enabled": true, "order": 1}], "order": 1}`)
				}))
			})
			It(`Invoke UpdateRuleGroup successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel

				// Construct an instance of the UpdateRuleGroupOptions model
				updateRuleGroupOptionsModel := new(logsv0.UpdateRuleGroupOptions)
				updateRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateRuleGroupOptionsModel.Name = core.StringPtr("mysql-extractrule")
				updateRuleGroupOptionsModel.RuleSubgroups = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}
				updateRuleGroupOptionsModel.Description = core.StringPtr("mysql audit logs parser")
				updateRuleGroupOptionsModel.Enabled = core.BoolPtr(true)
				updateRuleGroupOptionsModel.RuleMatchers = []logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}
				updateRuleGroupOptionsModel.Order = core.Int64Ptr(int64(39))
				updateRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.UpdateRuleGroupWithContext(ctx, updateRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.UpdateRuleGroup(updateRuleGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.UpdateRuleGroupWithContext(ctx, updateRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateRuleGroupPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "rule group", "description": "Rule group to extract severity from logs", "enabled": true, "rule_matchers": [{"application_name": {"value": "my-application"}}], "rule_subgroups": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "rules": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Extract service and region", "description": "Extracts the service and region from the source field", "source_field": "logObj.source", "parameters": {"extract_parameters": {"rule": "^http:\\/\\/my\\.service\\.com\\/#(?P<service>\\w+)\\-(?P<region>[^_]+)_"}}, "enabled": true, "order": 1}], "enabled": true, "order": 1}], "order": 1}`)
				}))
			})
			It(`Invoke UpdateRuleGroup successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.UpdateRuleGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel

				// Construct an instance of the UpdateRuleGroupOptions model
				updateRuleGroupOptionsModel := new(logsv0.UpdateRuleGroupOptions)
				updateRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateRuleGroupOptionsModel.Name = core.StringPtr("mysql-extractrule")
				updateRuleGroupOptionsModel.RuleSubgroups = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}
				updateRuleGroupOptionsModel.Description = core.StringPtr("mysql audit logs parser")
				updateRuleGroupOptionsModel.Enabled = core.BoolPtr(true)
				updateRuleGroupOptionsModel.RuleMatchers = []logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}
				updateRuleGroupOptionsModel.Order = core.Int64Ptr(int64(39))
				updateRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.UpdateRuleGroup(updateRuleGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateRuleGroup with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel

				// Construct an instance of the UpdateRuleGroupOptions model
				updateRuleGroupOptionsModel := new(logsv0.UpdateRuleGroupOptions)
				updateRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateRuleGroupOptionsModel.Name = core.StringPtr("mysql-extractrule")
				updateRuleGroupOptionsModel.RuleSubgroups = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}
				updateRuleGroupOptionsModel.Description = core.StringPtr("mysql audit logs parser")
				updateRuleGroupOptionsModel.Enabled = core.BoolPtr(true)
				updateRuleGroupOptionsModel.RuleMatchers = []logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}
				updateRuleGroupOptionsModel.Order = core.Int64Ptr(int64(39))
				updateRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.UpdateRuleGroup(updateRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateRuleGroupOptions model with no property values
				updateRuleGroupOptionsModelNew := new(logsv0.UpdateRuleGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.UpdateRuleGroup(updateRuleGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateRuleGroup successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel

				// Construct an instance of the UpdateRuleGroupOptions model
				updateRuleGroupOptionsModel := new(logsv0.UpdateRuleGroupOptions)
				updateRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateRuleGroupOptionsModel.Name = core.StringPtr("mysql-extractrule")
				updateRuleGroupOptionsModel.RuleSubgroups = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}
				updateRuleGroupOptionsModel.Description = core.StringPtr("mysql audit logs parser")
				updateRuleGroupOptionsModel.Enabled = core.BoolPtr(true)
				updateRuleGroupOptionsModel.RuleMatchers = []logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}
				updateRuleGroupOptionsModel.Order = core.Int64Ptr(int64(39))
				updateRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.UpdateRuleGroup(updateRuleGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteRuleGroup(deleteRuleGroupOptions *DeleteRuleGroupOptions)`, func() {
		deleteRuleGroupPath := "/v1/rule_groups/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteRuleGroupPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteRuleGroup successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := logsService.DeleteRuleGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteRuleGroupOptions model
				deleteRuleGroupOptionsModel := new(logsv0.DeleteRuleGroupOptions)
				deleteRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = logsService.DeleteRuleGroup(deleteRuleGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteRuleGroup with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the DeleteRuleGroupOptions model
				deleteRuleGroupOptionsModel := new(logsv0.DeleteRuleGroupOptions)
				deleteRuleGroupOptionsModel.GroupID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := logsService.DeleteRuleGroup(deleteRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteRuleGroupOptions model with no property values
				deleteRuleGroupOptionsModelNew := new(logsv0.DeleteRuleGroupOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = logsService.DeleteRuleGroup(deleteRuleGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRuleGroups(listRuleGroupsOptions *ListRuleGroupsOptions) - Operation response error`, func() {
		listRuleGroupsPath := "/v1/rule_groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRuleGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListRuleGroups with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListRuleGroupsOptions model
				listRuleGroupsOptionsModel := new(logsv0.ListRuleGroupsOptions)
				listRuleGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ListRuleGroups(listRuleGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ListRuleGroups(listRuleGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRuleGroups(listRuleGroupsOptions *ListRuleGroupsOptions)`, func() {
		listRuleGroupsPath := "/v1/rule_groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRuleGroupsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"rulegroups": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "rule group", "description": "Rule group to extract severity from logs", "enabled": true, "rule_matchers": [{"application_name": {"value": "my-application"}}], "rule_subgroups": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "rules": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Extract service and region", "description": "Extracts the service and region from the source field", "source_field": "logObj.source", "parameters": {"extract_parameters": {"rule": "^http:\\/\\/my\\.service\\.com\\/#(?P<service>\\w+)\\-(?P<region>[^_]+)_"}}, "enabled": true, "order": 1}], "enabled": true, "order": 1}], "order": 1}]}`)
				}))
			})
			It(`Invoke ListRuleGroups successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ListRuleGroupsOptions model
				listRuleGroupsOptionsModel := new(logsv0.ListRuleGroupsOptions)
				listRuleGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ListRuleGroupsWithContext(ctx, listRuleGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ListRuleGroups(listRuleGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ListRuleGroupsWithContext(ctx, listRuleGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRuleGroupsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"rulegroups": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "rule group", "description": "Rule group to extract severity from logs", "enabled": true, "rule_matchers": [{"application_name": {"value": "my-application"}}], "rule_subgroups": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "rules": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Extract service and region", "description": "Extracts the service and region from the source field", "source_field": "logObj.source", "parameters": {"extract_parameters": {"rule": "^http:\\/\\/my\\.service\\.com\\/#(?P<service>\\w+)\\-(?P<region>[^_]+)_"}}, "enabled": true, "order": 1}], "enabled": true, "order": 1}], "order": 1}]}`)
				}))
			})
			It(`Invoke ListRuleGroups successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ListRuleGroups(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListRuleGroupsOptions model
				listRuleGroupsOptionsModel := new(logsv0.ListRuleGroupsOptions)
				listRuleGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ListRuleGroups(listRuleGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListRuleGroups with error: Operation request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListRuleGroupsOptions model
				listRuleGroupsOptionsModel := new(logsv0.ListRuleGroupsOptions)
				listRuleGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ListRuleGroups(listRuleGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListRuleGroups successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListRuleGroupsOptions model
				listRuleGroupsOptionsModel := new(logsv0.ListRuleGroupsOptions)
				listRuleGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ListRuleGroups(listRuleGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateRuleGroup(createRuleGroupOptions *CreateRuleGroupOptions) - Operation response error`, func() {
		createRuleGroupPath := "/v1/rule_groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRuleGroupPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateRuleGroup with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel

				// Construct an instance of the CreateRuleGroupOptions model
				createRuleGroupOptionsModel := new(logsv0.CreateRuleGroupOptions)
				createRuleGroupOptionsModel.Name = core.StringPtr("mysql-extractrule")
				createRuleGroupOptionsModel.RuleSubgroups = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}
				createRuleGroupOptionsModel.Description = core.StringPtr("mysql audit logs  parser")
				createRuleGroupOptionsModel.Enabled = core.BoolPtr(true)
				createRuleGroupOptionsModel.RuleMatchers = []logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}
				createRuleGroupOptionsModel.Order = core.Int64Ptr(int64(39))
				createRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.CreateRuleGroup(createRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.CreateRuleGroup(createRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateRuleGroup(createRuleGroupOptions *CreateRuleGroupOptions)`, func() {
		createRuleGroupPath := "/v1/rule_groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRuleGroupPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "rule group", "description": "Rule group to extract severity from logs", "enabled": true, "rule_matchers": [{"application_name": {"value": "my-application"}}], "rule_subgroups": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "rules": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Extract service and region", "description": "Extracts the service and region from the source field", "source_field": "logObj.source", "parameters": {"extract_parameters": {"rule": "^http:\\/\\/my\\.service\\.com\\/#(?P<service>\\w+)\\-(?P<region>[^_]+)_"}}, "enabled": true, "order": 1}], "enabled": true, "order": 1}], "order": 1}`)
				}))
			})
			It(`Invoke CreateRuleGroup successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel

				// Construct an instance of the CreateRuleGroupOptions model
				createRuleGroupOptionsModel := new(logsv0.CreateRuleGroupOptions)
				createRuleGroupOptionsModel.Name = core.StringPtr("mysql-extractrule")
				createRuleGroupOptionsModel.RuleSubgroups = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}
				createRuleGroupOptionsModel.Description = core.StringPtr("mysql audit logs  parser")
				createRuleGroupOptionsModel.Enabled = core.BoolPtr(true)
				createRuleGroupOptionsModel.RuleMatchers = []logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}
				createRuleGroupOptionsModel.Order = core.Int64Ptr(int64(39))
				createRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.CreateRuleGroupWithContext(ctx, createRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.CreateRuleGroup(createRuleGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.CreateRuleGroupWithContext(ctx, createRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRuleGroupPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "rule group", "description": "Rule group to extract severity from logs", "enabled": true, "rule_matchers": [{"application_name": {"value": "my-application"}}], "rule_subgroups": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "rules": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Extract service and region", "description": "Extracts the service and region from the source field", "source_field": "logObj.source", "parameters": {"extract_parameters": {"rule": "^http:\\/\\/my\\.service\\.com\\/#(?P<service>\\w+)\\-(?P<region>[^_]+)_"}}, "enabled": true, "order": 1}], "enabled": true, "order": 1}], "order": 1}`)
				}))
			})
			It(`Invoke CreateRuleGroup successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.CreateRuleGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel

				// Construct an instance of the CreateRuleGroupOptions model
				createRuleGroupOptionsModel := new(logsv0.CreateRuleGroupOptions)
				createRuleGroupOptionsModel.Name = core.StringPtr("mysql-extractrule")
				createRuleGroupOptionsModel.RuleSubgroups = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}
				createRuleGroupOptionsModel.Description = core.StringPtr("mysql audit logs  parser")
				createRuleGroupOptionsModel.Enabled = core.BoolPtr(true)
				createRuleGroupOptionsModel.RuleMatchers = []logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}
				createRuleGroupOptionsModel.Order = core.Int64Ptr(int64(39))
				createRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.CreateRuleGroup(createRuleGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateRuleGroup with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel

				// Construct an instance of the CreateRuleGroupOptions model
				createRuleGroupOptionsModel := new(logsv0.CreateRuleGroupOptions)
				createRuleGroupOptionsModel.Name = core.StringPtr("mysql-extractrule")
				createRuleGroupOptionsModel.RuleSubgroups = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}
				createRuleGroupOptionsModel.Description = core.StringPtr("mysql audit logs  parser")
				createRuleGroupOptionsModel.Enabled = core.BoolPtr(true)
				createRuleGroupOptionsModel.RuleMatchers = []logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}
				createRuleGroupOptionsModel.Order = core.Int64Ptr(int64(39))
				createRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.CreateRuleGroup(createRuleGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateRuleGroupOptions model with no property values
				createRuleGroupOptionsModelNew := new(logsv0.CreateRuleGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.CreateRuleGroup(createRuleGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateRuleGroup successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel

				// Construct an instance of the CreateRuleGroupOptions model
				createRuleGroupOptionsModel := new(logsv0.CreateRuleGroupOptions)
				createRuleGroupOptionsModel.Name = core.StringPtr("mysql-extractrule")
				createRuleGroupOptionsModel.RuleSubgroups = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}
				createRuleGroupOptionsModel.Description = core.StringPtr("mysql audit logs  parser")
				createRuleGroupOptionsModel.Enabled = core.BoolPtr(true)
				createRuleGroupOptionsModel.RuleMatchers = []logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}
				createRuleGroupOptionsModel.Order = core.Int64Ptr(int64(39))
				createRuleGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.CreateRuleGroup(createRuleGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListOutgoingWebhooks(listOutgoingWebhooksOptions *ListOutgoingWebhooksOptions) - Operation response error`, func() {
		listOutgoingWebhooksPath := "/v1/outgoing_webhooks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listOutgoingWebhooksPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["type"]).To(Equal([]string{"ibm_event_notifications"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListOutgoingWebhooks with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListOutgoingWebhooksOptions model
				listOutgoingWebhooksOptionsModel := new(logsv0.ListOutgoingWebhooksOptions)
				listOutgoingWebhooksOptionsModel.Type = core.StringPtr("ibm_event_notifications")
				listOutgoingWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ListOutgoingWebhooks(listOutgoingWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ListOutgoingWebhooks(listOutgoingWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListOutgoingWebhooks(listOutgoingWebhooksOptions *ListOutgoingWebhooksOptions)`, func() {
		listOutgoingWebhooksPath := "/v1/outgoing_webhooks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listOutgoingWebhooksPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["type"]).To(Equal([]string{"ibm_event_notifications"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"outgoing_webhooks": [{"id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "name": "Event Notifications Integration", "url": "https://example.com", "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z", "external_id": 123}]}`)
				}))
			})
			It(`Invoke ListOutgoingWebhooks successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ListOutgoingWebhooksOptions model
				listOutgoingWebhooksOptionsModel := new(logsv0.ListOutgoingWebhooksOptions)
				listOutgoingWebhooksOptionsModel.Type = core.StringPtr("ibm_event_notifications")
				listOutgoingWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ListOutgoingWebhooksWithContext(ctx, listOutgoingWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ListOutgoingWebhooks(listOutgoingWebhooksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ListOutgoingWebhooksWithContext(ctx, listOutgoingWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listOutgoingWebhooksPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["type"]).To(Equal([]string{"ibm_event_notifications"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"outgoing_webhooks": [{"id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "name": "Event Notifications Integration", "url": "https://example.com", "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z", "external_id": 123}]}`)
				}))
			})
			It(`Invoke ListOutgoingWebhooks successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ListOutgoingWebhooks(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListOutgoingWebhooksOptions model
				listOutgoingWebhooksOptionsModel := new(logsv0.ListOutgoingWebhooksOptions)
				listOutgoingWebhooksOptionsModel.Type = core.StringPtr("ibm_event_notifications")
				listOutgoingWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ListOutgoingWebhooks(listOutgoingWebhooksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListOutgoingWebhooks with error: Operation request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListOutgoingWebhooksOptions model
				listOutgoingWebhooksOptionsModel := new(logsv0.ListOutgoingWebhooksOptions)
				listOutgoingWebhooksOptionsModel.Type = core.StringPtr("ibm_event_notifications")
				listOutgoingWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ListOutgoingWebhooks(listOutgoingWebhooksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListOutgoingWebhooks successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListOutgoingWebhooksOptions model
				listOutgoingWebhooksOptionsModel := new(logsv0.ListOutgoingWebhooksOptions)
				listOutgoingWebhooksOptionsModel.Type = core.StringPtr("ibm_event_notifications")
				listOutgoingWebhooksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ListOutgoingWebhooks(listOutgoingWebhooksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateOutgoingWebhook(createOutgoingWebhookOptions *CreateOutgoingWebhookOptions) - Operation response error`, func() {
		createOutgoingWebhookPath := "/v1/outgoing_webhooks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createOutgoingWebhookPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateOutgoingWebhook with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel

				// Construct an instance of the CreateOutgoingWebhookOptions model
				createOutgoingWebhookOptionsModel := new(logsv0.CreateOutgoingWebhookOptions)
				createOutgoingWebhookOptionsModel.OutgoingWebhookPrototype = outgoingWebhookPrototypeModel
				createOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.CreateOutgoingWebhook(createOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.CreateOutgoingWebhook(createOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateOutgoingWebhook(createOutgoingWebhookOptions *CreateOutgoingWebhookOptions)`, func() {
		createOutgoingWebhookPath := "/v1/outgoing_webhooks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createOutgoingWebhookPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "type": "ibm_event_notifications", "name": "Event Notifications Integration", "url": "https://example.com", "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z", "external_id": 123, "ibm_event_notifications": {"event_notifications_instance_id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "region_id": "eu-es"}}`)
				}))
			})
			It(`Invoke CreateOutgoingWebhook successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel

				// Construct an instance of the CreateOutgoingWebhookOptions model
				createOutgoingWebhookOptionsModel := new(logsv0.CreateOutgoingWebhookOptions)
				createOutgoingWebhookOptionsModel.OutgoingWebhookPrototype = outgoingWebhookPrototypeModel
				createOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.CreateOutgoingWebhookWithContext(ctx, createOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.CreateOutgoingWebhook(createOutgoingWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.CreateOutgoingWebhookWithContext(ctx, createOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createOutgoingWebhookPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "type": "ibm_event_notifications", "name": "Event Notifications Integration", "url": "https://example.com", "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z", "external_id": 123, "ibm_event_notifications": {"event_notifications_instance_id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "region_id": "eu-es"}}`)
				}))
			})
			It(`Invoke CreateOutgoingWebhook successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.CreateOutgoingWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel

				// Construct an instance of the CreateOutgoingWebhookOptions model
				createOutgoingWebhookOptionsModel := new(logsv0.CreateOutgoingWebhookOptions)
				createOutgoingWebhookOptionsModel.OutgoingWebhookPrototype = outgoingWebhookPrototypeModel
				createOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.CreateOutgoingWebhook(createOutgoingWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateOutgoingWebhook with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel

				// Construct an instance of the CreateOutgoingWebhookOptions model
				createOutgoingWebhookOptionsModel := new(logsv0.CreateOutgoingWebhookOptions)
				createOutgoingWebhookOptionsModel.OutgoingWebhookPrototype = outgoingWebhookPrototypeModel
				createOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.CreateOutgoingWebhook(createOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateOutgoingWebhookOptions model with no property values
				createOutgoingWebhookOptionsModelNew := new(logsv0.CreateOutgoingWebhookOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.CreateOutgoingWebhook(createOutgoingWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateOutgoingWebhook successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel

				// Construct an instance of the CreateOutgoingWebhookOptions model
				createOutgoingWebhookOptionsModel := new(logsv0.CreateOutgoingWebhookOptions)
				createOutgoingWebhookOptionsModel.OutgoingWebhookPrototype = outgoingWebhookPrototypeModel
				createOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.CreateOutgoingWebhook(createOutgoingWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetOutgoingWebhook(getOutgoingWebhookOptions *GetOutgoingWebhookOptions) - Operation response error`, func() {
		getOutgoingWebhookPath := "/v1/outgoing_webhooks/585bea36-bdd1-4bfb-9a26-51f1f8a12660"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getOutgoingWebhookPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetOutgoingWebhook with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetOutgoingWebhookOptions model
				getOutgoingWebhookOptionsModel := new(logsv0.GetOutgoingWebhookOptions)
				getOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				getOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.GetOutgoingWebhook(getOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.GetOutgoingWebhook(getOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetOutgoingWebhook(getOutgoingWebhookOptions *GetOutgoingWebhookOptions)`, func() {
		getOutgoingWebhookPath := "/v1/outgoing_webhooks/585bea36-bdd1-4bfb-9a26-51f1f8a12660"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getOutgoingWebhookPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "type": "ibm_event_notifications", "name": "Event Notifications Integration", "url": "https://example.com", "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z", "external_id": 123, "ibm_event_notifications": {"event_notifications_instance_id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "region_id": "eu-es"}}`)
				}))
			})
			It(`Invoke GetOutgoingWebhook successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the GetOutgoingWebhookOptions model
				getOutgoingWebhookOptionsModel := new(logsv0.GetOutgoingWebhookOptions)
				getOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				getOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.GetOutgoingWebhookWithContext(ctx, getOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.GetOutgoingWebhook(getOutgoingWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.GetOutgoingWebhookWithContext(ctx, getOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getOutgoingWebhookPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "type": "ibm_event_notifications", "name": "Event Notifications Integration", "url": "https://example.com", "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z", "external_id": 123, "ibm_event_notifications": {"event_notifications_instance_id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "region_id": "eu-es"}}`)
				}))
			})
			It(`Invoke GetOutgoingWebhook successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.GetOutgoingWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetOutgoingWebhookOptions model
				getOutgoingWebhookOptionsModel := new(logsv0.GetOutgoingWebhookOptions)
				getOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				getOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.GetOutgoingWebhook(getOutgoingWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetOutgoingWebhook with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetOutgoingWebhookOptions model
				getOutgoingWebhookOptionsModel := new(logsv0.GetOutgoingWebhookOptions)
				getOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				getOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.GetOutgoingWebhook(getOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetOutgoingWebhookOptions model with no property values
				getOutgoingWebhookOptionsModelNew := new(logsv0.GetOutgoingWebhookOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.GetOutgoingWebhook(getOutgoingWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetOutgoingWebhook successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetOutgoingWebhookOptions model
				getOutgoingWebhookOptionsModel := new(logsv0.GetOutgoingWebhookOptions)
				getOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				getOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.GetOutgoingWebhook(getOutgoingWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateOutgoingWebhook(updateOutgoingWebhookOptions *UpdateOutgoingWebhookOptions) - Operation response error`, func() {
		updateOutgoingWebhookPath := "/v1/outgoing_webhooks/585bea36-bdd1-4bfb-9a26-51f1f8a12660"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateOutgoingWebhookPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateOutgoingWebhook with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel

				// Construct an instance of the UpdateOutgoingWebhookOptions model
				updateOutgoingWebhookOptionsModel := new(logsv0.UpdateOutgoingWebhookOptions)
				updateOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				updateOutgoingWebhookOptionsModel.OutgoingWebhookPrototype = outgoingWebhookPrototypeModel
				updateOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.UpdateOutgoingWebhook(updateOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.UpdateOutgoingWebhook(updateOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateOutgoingWebhook(updateOutgoingWebhookOptions *UpdateOutgoingWebhookOptions)`, func() {
		updateOutgoingWebhookPath := "/v1/outgoing_webhooks/585bea36-bdd1-4bfb-9a26-51f1f8a12660"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateOutgoingWebhookPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "type": "ibm_event_notifications", "name": "Event Notifications Integration", "url": "https://example.com", "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z", "external_id": 123, "ibm_event_notifications": {"event_notifications_instance_id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "region_id": "eu-es"}}`)
				}))
			})
			It(`Invoke UpdateOutgoingWebhook successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel

				// Construct an instance of the UpdateOutgoingWebhookOptions model
				updateOutgoingWebhookOptionsModel := new(logsv0.UpdateOutgoingWebhookOptions)
				updateOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				updateOutgoingWebhookOptionsModel.OutgoingWebhookPrototype = outgoingWebhookPrototypeModel
				updateOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.UpdateOutgoingWebhookWithContext(ctx, updateOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.UpdateOutgoingWebhook(updateOutgoingWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.UpdateOutgoingWebhookWithContext(ctx, updateOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateOutgoingWebhookPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "type": "ibm_event_notifications", "name": "Event Notifications Integration", "url": "https://example.com", "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z", "external_id": 123, "ibm_event_notifications": {"event_notifications_instance_id": "585bea36-bdd1-4bfb-9a26-51f1f8a12660", "region_id": "eu-es"}}`)
				}))
			})
			It(`Invoke UpdateOutgoingWebhook successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.UpdateOutgoingWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel

				// Construct an instance of the UpdateOutgoingWebhookOptions model
				updateOutgoingWebhookOptionsModel := new(logsv0.UpdateOutgoingWebhookOptions)
				updateOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				updateOutgoingWebhookOptionsModel.OutgoingWebhookPrototype = outgoingWebhookPrototypeModel
				updateOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.UpdateOutgoingWebhook(updateOutgoingWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateOutgoingWebhook with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel

				// Construct an instance of the UpdateOutgoingWebhookOptions model
				updateOutgoingWebhookOptionsModel := new(logsv0.UpdateOutgoingWebhookOptions)
				updateOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				updateOutgoingWebhookOptionsModel.OutgoingWebhookPrototype = outgoingWebhookPrototypeModel
				updateOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.UpdateOutgoingWebhook(updateOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateOutgoingWebhookOptions model with no property values
				updateOutgoingWebhookOptionsModelNew := new(logsv0.UpdateOutgoingWebhookOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.UpdateOutgoingWebhook(updateOutgoingWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateOutgoingWebhook successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel

				// Construct an instance of the UpdateOutgoingWebhookOptions model
				updateOutgoingWebhookOptionsModel := new(logsv0.UpdateOutgoingWebhookOptions)
				updateOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				updateOutgoingWebhookOptionsModel.OutgoingWebhookPrototype = outgoingWebhookPrototypeModel
				updateOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.UpdateOutgoingWebhook(updateOutgoingWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteOutgoingWebhook(deleteOutgoingWebhookOptions *DeleteOutgoingWebhookOptions)`, func() {
		deleteOutgoingWebhookPath := "/v1/outgoing_webhooks/585bea36-bdd1-4bfb-9a26-51f1f8a12660"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteOutgoingWebhookPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteOutgoingWebhook successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := logsService.DeleteOutgoingWebhook(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteOutgoingWebhookOptions model
				deleteOutgoingWebhookOptionsModel := new(logsv0.DeleteOutgoingWebhookOptions)
				deleteOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				deleteOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = logsService.DeleteOutgoingWebhook(deleteOutgoingWebhookOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteOutgoingWebhook with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the DeleteOutgoingWebhookOptions model
				deleteOutgoingWebhookOptionsModel := new(logsv0.DeleteOutgoingWebhookOptions)
				deleteOutgoingWebhookOptionsModel.ID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				deleteOutgoingWebhookOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := logsService.DeleteOutgoingWebhook(deleteOutgoingWebhookOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteOutgoingWebhookOptions model with no property values
				deleteOutgoingWebhookOptionsModelNew := new(logsv0.DeleteOutgoingWebhookOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = logsService.DeleteOutgoingWebhook(deleteOutgoingWebhookOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetPolicy(getPolicyOptions *GetPolicyOptions) - Operation response error`, func() {
		getPolicyPath := "/v1/policies/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetPolicy with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetPolicyOptions model
				getPolicyOptionsModel := new(logsv0.GetPolicyOptions)
				getPolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetPolicy(getPolicyOptions *GetPolicyOptions)`, func() {
		getPolicyPath := "/v1/policies/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "company_id": 1234, "name": "Policy Name", "description": "Policy Description", "priority": "type_high", "deleted": true, "enabled": true, "order": 1, "application_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "subsystem_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "created_at": "2023-06-21 14:24:39", "updated_at": "2023-06-21 14:24:39", "archive_retention": {"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "log_rules": {"severities": ["critical"]}}`)
				}))
			})
			It(`Invoke GetPolicy successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the GetPolicyOptions model
				getPolicyOptionsModel := new(logsv0.GetPolicyOptions)
				getPolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.GetPolicyWithContext(ctx, getPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.GetPolicyWithContext(ctx, getPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "company_id": 1234, "name": "Policy Name", "description": "Policy Description", "priority": "type_high", "deleted": true, "enabled": true, "order": 1, "application_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "subsystem_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "created_at": "2023-06-21 14:24:39", "updated_at": "2023-06-21 14:24:39", "archive_retention": {"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "log_rules": {"severities": ["critical"]}}`)
				}))
			})
			It(`Invoke GetPolicy successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.GetPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetPolicyOptions model
				getPolicyOptionsModel := new(logsv0.GetPolicyOptions)
				getPolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetPolicy with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetPolicyOptions model
				getPolicyOptionsModel := new(logsv0.GetPolicyOptions)
				getPolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetPolicyOptions model with no property values
				getPolicyOptionsModelNew := new(logsv0.GetPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.GetPolicy(getPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetPolicy successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetPolicyOptions model
				getPolicyOptionsModel := new(logsv0.GetPolicyOptions)
				getPolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdatePolicy(updatePolicyOptions *UpdatePolicyOptions) - Operation response error`, func() {
		updatePolicyPath := "/v1/policies/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updatePolicyPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdatePolicy with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				quotaV1RuleModel.RuleTypeID = core.StringPtr("is")
				quotaV1RuleModel.Name = core.StringPtr("policy-test")

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				quotaV1LogRulesModel.Severities = []string{"debug", "verbose", "info", "warning", "error"}

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				policyPrototypeModel.Name = core.StringPtr("Med_policy")
				policyPrototypeModel.Description = core.StringPtr("Medium policy")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel

				// Construct an instance of the UpdatePolicyOptions model
				updatePolicyOptionsModel := new(logsv0.UpdatePolicyOptions)
				updatePolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updatePolicyOptionsModel.PolicyPrototype = policyPrototypeModel
				updatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdatePolicy(updatePolicyOptions *UpdatePolicyOptions)`, func() {
		updatePolicyPath := "/v1/policies/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updatePolicyPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "company_id": 1234, "name": "Policy Name", "description": "Policy Description", "priority": "type_high", "deleted": true, "enabled": true, "order": 1, "application_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "subsystem_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "created_at": "2023-06-21 14:24:39", "updated_at": "2023-06-21 14:24:39", "archive_retention": {"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "log_rules": {"severities": ["critical"]}}`)
				}))
			})
			It(`Invoke UpdatePolicy successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				quotaV1RuleModel.RuleTypeID = core.StringPtr("is")
				quotaV1RuleModel.Name = core.StringPtr("policy-test")

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				quotaV1LogRulesModel.Severities = []string{"debug", "verbose", "info", "warning", "error"}

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				policyPrototypeModel.Name = core.StringPtr("Med_policy")
				policyPrototypeModel.Description = core.StringPtr("Medium policy")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel

				// Construct an instance of the UpdatePolicyOptions model
				updatePolicyOptionsModel := new(logsv0.UpdatePolicyOptions)
				updatePolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updatePolicyOptionsModel.PolicyPrototype = policyPrototypeModel
				updatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.UpdatePolicyWithContext(ctx, updatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.UpdatePolicyWithContext(ctx, updatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updatePolicyPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "company_id": 1234, "name": "Policy Name", "description": "Policy Description", "priority": "type_high", "deleted": true, "enabled": true, "order": 1, "application_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "subsystem_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "created_at": "2023-06-21 14:24:39", "updated_at": "2023-06-21 14:24:39", "archive_retention": {"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "log_rules": {"severities": ["critical"]}}`)
				}))
			})
			It(`Invoke UpdatePolicy successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.UpdatePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				quotaV1RuleModel.RuleTypeID = core.StringPtr("is")
				quotaV1RuleModel.Name = core.StringPtr("policy-test")

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				quotaV1LogRulesModel.Severities = []string{"debug", "verbose", "info", "warning", "error"}

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				policyPrototypeModel.Name = core.StringPtr("Med_policy")
				policyPrototypeModel.Description = core.StringPtr("Medium policy")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel

				// Construct an instance of the UpdatePolicyOptions model
				updatePolicyOptionsModel := new(logsv0.UpdatePolicyOptions)
				updatePolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updatePolicyOptionsModel.PolicyPrototype = policyPrototypeModel
				updatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdatePolicy with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				quotaV1RuleModel.RuleTypeID = core.StringPtr("is")
				quotaV1RuleModel.Name = core.StringPtr("policy-test")

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				quotaV1LogRulesModel.Severities = []string{"debug", "verbose", "info", "warning", "error"}

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				policyPrototypeModel.Name = core.StringPtr("Med_policy")
				policyPrototypeModel.Description = core.StringPtr("Medium policy")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel

				// Construct an instance of the UpdatePolicyOptions model
				updatePolicyOptionsModel := new(logsv0.UpdatePolicyOptions)
				updatePolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updatePolicyOptionsModel.PolicyPrototype = policyPrototypeModel
				updatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdatePolicyOptions model with no property values
				updatePolicyOptionsModelNew := new(logsv0.UpdatePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.UpdatePolicy(updatePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdatePolicy successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				quotaV1RuleModel.RuleTypeID = core.StringPtr("is")
				quotaV1RuleModel.Name = core.StringPtr("policy-test")

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				quotaV1LogRulesModel.Severities = []string{"debug", "verbose", "info", "warning", "error"}

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				policyPrototypeModel.Name = core.StringPtr("Med_policy")
				policyPrototypeModel.Description = core.StringPtr("Medium policy")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel

				// Construct an instance of the UpdatePolicyOptions model
				updatePolicyOptionsModel := new(logsv0.UpdatePolicyOptions)
				updatePolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updatePolicyOptionsModel.PolicyPrototype = policyPrototypeModel
				updatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeletePolicy(deletePolicyOptions *DeletePolicyOptions)`, func() {
		deletePolicyPath := "/v1/policies/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deletePolicyPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeletePolicy successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := logsService.DeletePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeletePolicyOptions model
				deletePolicyOptionsModel := new(logsv0.DeletePolicyOptions)
				deletePolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deletePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = logsService.DeletePolicy(deletePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeletePolicy with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the DeletePolicyOptions model
				deletePolicyOptionsModel := new(logsv0.DeletePolicyOptions)
				deletePolicyOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deletePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := logsService.DeletePolicy(deletePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeletePolicyOptions model with no property values
				deletePolicyOptionsModelNew := new(logsv0.DeletePolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = logsService.DeletePolicy(deletePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCompanyPolicies(getCompanyPoliciesOptions *GetCompanyPoliciesOptions) - Operation response error`, func() {
		getCompanyPoliciesPath := "/v1/policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCompanyPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					// TODO: Add check for enabled_only query parameter
					Expect(req.URL.Query()["source_type"]).To(Equal([]string{"logs"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetCompanyPolicies with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetCompanyPoliciesOptions model
				getCompanyPoliciesOptionsModel := new(logsv0.GetCompanyPoliciesOptions)
				getCompanyPoliciesOptionsModel.EnabledOnly = core.BoolPtr(true)
				getCompanyPoliciesOptionsModel.SourceType = core.StringPtr("logs")
				getCompanyPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.GetCompanyPolicies(getCompanyPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.GetCompanyPolicies(getCompanyPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetCompanyPolicies(getCompanyPoliciesOptions *GetCompanyPoliciesOptions)`, func() {
		getCompanyPoliciesPath := "/v1/policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCompanyPoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for enabled_only query parameter
					Expect(req.URL.Query()["source_type"]).To(Equal([]string{"logs"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"policies": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "company_id": 1234, "name": "Policy Name", "description": "Policy Description", "priority": "type_high", "deleted": true, "enabled": true, "order": 1, "application_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "subsystem_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "created_at": "2023-06-21 14:24:39", "updated_at": "2023-06-21 14:24:39", "archive_retention": {"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "log_rules": {"severities": ["critical"]}}]}`)
				}))
			})
			It(`Invoke GetCompanyPolicies successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the GetCompanyPoliciesOptions model
				getCompanyPoliciesOptionsModel := new(logsv0.GetCompanyPoliciesOptions)
				getCompanyPoliciesOptionsModel.EnabledOnly = core.BoolPtr(true)
				getCompanyPoliciesOptionsModel.SourceType = core.StringPtr("logs")
				getCompanyPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.GetCompanyPoliciesWithContext(ctx, getCompanyPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.GetCompanyPolicies(getCompanyPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.GetCompanyPoliciesWithContext(ctx, getCompanyPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getCompanyPoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for enabled_only query parameter
					Expect(req.URL.Query()["source_type"]).To(Equal([]string{"logs"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"policies": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "company_id": 1234, "name": "Policy Name", "description": "Policy Description", "priority": "type_high", "deleted": true, "enabled": true, "order": 1, "application_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "subsystem_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "created_at": "2023-06-21 14:24:39", "updated_at": "2023-06-21 14:24:39", "archive_retention": {"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "log_rules": {"severities": ["critical"]}}]}`)
				}))
			})
			It(`Invoke GetCompanyPolicies successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.GetCompanyPolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetCompanyPoliciesOptions model
				getCompanyPoliciesOptionsModel := new(logsv0.GetCompanyPoliciesOptions)
				getCompanyPoliciesOptionsModel.EnabledOnly = core.BoolPtr(true)
				getCompanyPoliciesOptionsModel.SourceType = core.StringPtr("logs")
				getCompanyPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.GetCompanyPolicies(getCompanyPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetCompanyPolicies with error: Operation request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetCompanyPoliciesOptions model
				getCompanyPoliciesOptionsModel := new(logsv0.GetCompanyPoliciesOptions)
				getCompanyPoliciesOptionsModel.EnabledOnly = core.BoolPtr(true)
				getCompanyPoliciesOptionsModel.SourceType = core.StringPtr("logs")
				getCompanyPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.GetCompanyPolicies(getCompanyPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetCompanyPolicies successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetCompanyPoliciesOptions model
				getCompanyPoliciesOptionsModel := new(logsv0.GetCompanyPoliciesOptions)
				getCompanyPoliciesOptionsModel.EnabledOnly = core.BoolPtr(true)
				getCompanyPoliciesOptionsModel.SourceType = core.StringPtr("logs")
				getCompanyPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.GetCompanyPolicies(getCompanyPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreatePolicy(createPolicyOptions *CreatePolicyOptions) - Operation response error`, func() {
		createPolicyPath := "/v1/policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreatePolicy with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				quotaV1RuleModel.RuleTypeID = core.StringPtr("is")
				quotaV1RuleModel.Name = core.StringPtr("policy-test")

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				quotaV1LogRulesModel.Severities = []string{"debug", "verbose", "info", "warning", "error"}

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				policyPrototypeModel.Name = core.StringPtr("Med_policy")
				policyPrototypeModel.Description = core.StringPtr("Medium Policy")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := new(logsv0.CreatePolicyOptions)
				createPolicyOptionsModel.PolicyPrototype = policyPrototypeModel
				createPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreatePolicy(createPolicyOptions *CreatePolicyOptions)`, func() {
		createPolicyPath := "/v1/policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "company_id": 1234, "name": "Policy Name", "description": "Policy Description", "priority": "type_high", "deleted": true, "enabled": true, "order": 1, "application_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "subsystem_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "created_at": "2023-06-21 14:24:39", "updated_at": "2023-06-21 14:24:39", "archive_retention": {"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "log_rules": {"severities": ["critical"]}}`)
				}))
			})
			It(`Invoke CreatePolicy successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				quotaV1RuleModel.RuleTypeID = core.StringPtr("is")
				quotaV1RuleModel.Name = core.StringPtr("policy-test")

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				quotaV1LogRulesModel.Severities = []string{"debug", "verbose", "info", "warning", "error"}

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				policyPrototypeModel.Name = core.StringPtr("Med_policy")
				policyPrototypeModel.Description = core.StringPtr("Medium Policy")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := new(logsv0.CreatePolicyOptions)
				createPolicyOptionsModel.PolicyPrototype = policyPrototypeModel
				createPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.CreatePolicyWithContext(ctx, createPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.CreatePolicyWithContext(ctx, createPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "company_id": 1234, "name": "Policy Name", "description": "Policy Description", "priority": "type_high", "deleted": true, "enabled": true, "order": 1, "application_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "subsystem_rule": {"rule_type_id": "includes", "name": "Rule Name"}, "created_at": "2023-06-21 14:24:39", "updated_at": "2023-06-21 14:24:39", "archive_retention": {"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "log_rules": {"severities": ["critical"]}}`)
				}))
			})
			It(`Invoke CreatePolicy successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.CreatePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				quotaV1RuleModel.RuleTypeID = core.StringPtr("is")
				quotaV1RuleModel.Name = core.StringPtr("policy-test")

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				quotaV1LogRulesModel.Severities = []string{"debug", "verbose", "info", "warning", "error"}

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				policyPrototypeModel.Name = core.StringPtr("Med_policy")
				policyPrototypeModel.Description = core.StringPtr("Medium Policy")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := new(logsv0.CreatePolicyOptions)
				createPolicyOptionsModel.PolicyPrototype = policyPrototypeModel
				createPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreatePolicy with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				quotaV1RuleModel.RuleTypeID = core.StringPtr("is")
				quotaV1RuleModel.Name = core.StringPtr("policy-test")

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				quotaV1LogRulesModel.Severities = []string{"debug", "verbose", "info", "warning", "error"}

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				policyPrototypeModel.Name = core.StringPtr("Med_policy")
				policyPrototypeModel.Description = core.StringPtr("Medium Policy")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := new(logsv0.CreatePolicyOptions)
				createPolicyOptionsModel.PolicyPrototype = policyPrototypeModel
				createPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreatePolicyOptions model with no property values
				createPolicyOptionsModelNew := new(logsv0.CreatePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.CreatePolicy(createPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreatePolicy successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				quotaV1RuleModel.RuleTypeID = core.StringPtr("is")
				quotaV1RuleModel.Name = core.StringPtr("policy-test")

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				quotaV1LogRulesModel.Severities = []string{"debug", "verbose", "info", "warning", "error"}

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				policyPrototypeModel.Name = core.StringPtr("Med_policy")
				policyPrototypeModel.Description = core.StringPtr("Medium Policy")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := new(logsv0.CreatePolicyOptions)
				createPolicyOptionsModel.PolicyPrototype = policyPrototypeModel
				createPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDashboard(createDashboardOptions *CreateDashboardOptions) - Operation response error`, func() {
		createDashboardPath := "/v1/dashboards"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDashboardPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDashboard with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("10c27980-3532-21b0-8069-0c9110f03c90")

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(19))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(false)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("all")

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonPromQlQuery model
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel.Value = core.StringPtr("sum(rate(cx_data_usage_bytes_total[20m]))by(pillar,tier)")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel

				// Construct an instance of the ApisDashboardsV1AstFilterMetricsFilter model
				apisDashboardsV1AstFilterMetricsFilterModel := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
				apisDashboardsV1AstFilterMetricsFilterModel.Label = core.StringPtr("service")
				apisDashboardsV1AstFilterMetricsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartMetricsQuery model
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.PromqlQuery = apisDashboardsV1AstWidgetsCommonPromQlQueryModel
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterMetricsFilter{*apisDashboardsV1AstFilterMetricsFilterModel}

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
				apisDashboardsV1AstWidgetsLineChartQueryModel.Metrics = apisDashboardsV1AstWidgetsLineChartMetricsQueryModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(96))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("e4560525-521c-49e7-a7de-a2925626c304")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("20")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("linear")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("Query1")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Size")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionListSelection model
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel.Values = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(false)

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("DataUsageToMetrics Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.RelativeTimeFrame = core.StringPtr("86400s")

				// Construct an instance of the CreateDashboardOptions model
				createDashboardOptionsModel := new(logsv0.CreateDashboardOptions)
				createDashboardOptionsModel.Dashboard = dashboardModel
				createDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.CreateDashboard(createDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.CreateDashboard(createDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDashboard(createDashboardOptions *CreateDashboardOptions)`, func() {
		createDashboardPath := "/v1/dashboards"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDashboardPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"href": "6U1Q8Hpa263Se8PkRKaiE", "id": "6U1Q8Hpa263Se8PkRKaiE", "name": "My Dashboard", "description": "This dashboard shows the performance of our production environment.", "layout": {"sections": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "rows": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "appearance": {"height": 5}, "widgets": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "title": "Response time", "description": "The average response time of the system", "definition": {"line_chart": {"legend": {"is_visible": true, "columns": ["name"], "group_by_query": true}, "tooltip": {"show_labels": true, "type": "single"}, "query_definitions": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "query": {"logs": {"lucene_query": {"value": "coralogix.metadata.applicationName:\"production\""}, "group_by": ["GroupBy"], "aggregations": [{"count": {}}], "filters": [{"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}], "group_bys": [{"keypath": ["Keypath"], "scope": "metadata"}]}}, "series_name_template": "{{severity}}", "series_count_limit": "10", "unit": "usd", "scale_type": "logarithmic", "name": "CPU usage", "is_visible": true, "color_scheme": "classic", "resolution": {"interval": "1m", "buckets_presented": 100}, "data_mode_type": "archive"}], "stacked_line": "relative"}}, "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z"}]}]}]}, "variables": [{"name": "service_name", "definition": {"multi_select": {"source": {"logs_path": {"observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "selection": {"all": {}}, "values_order_direction": "desc"}}, "display_name": "Service Name"}], "filters": [{"source": {"logs": {"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "enabled": true, "collapsed": true}], "annotations": [{"href": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Deployments", "enabled": true, "source": {"metrics": {"promql_query": {"value": "sum(up)"}, "strategy": {"start_time_metric": {}}, "message_template": "MessageTemplate", "labels": ["Labels"]}}}], "absolute_time_frame": {"from": "2021-01-01T00:00:00.000Z", "to": "2021-01-01T00:00:00.000Z"}}`)
				}))
			})
			It(`Invoke CreateDashboard successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("10c27980-3532-21b0-8069-0c9110f03c90")

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(19))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(false)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("all")

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonPromQlQuery model
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel.Value = core.StringPtr("sum(rate(cx_data_usage_bytes_total[20m]))by(pillar,tier)")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel

				// Construct an instance of the ApisDashboardsV1AstFilterMetricsFilter model
				apisDashboardsV1AstFilterMetricsFilterModel := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
				apisDashboardsV1AstFilterMetricsFilterModel.Label = core.StringPtr("service")
				apisDashboardsV1AstFilterMetricsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartMetricsQuery model
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.PromqlQuery = apisDashboardsV1AstWidgetsCommonPromQlQueryModel
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterMetricsFilter{*apisDashboardsV1AstFilterMetricsFilterModel}

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
				apisDashboardsV1AstWidgetsLineChartQueryModel.Metrics = apisDashboardsV1AstWidgetsLineChartMetricsQueryModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(96))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("e4560525-521c-49e7-a7de-a2925626c304")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("20")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("linear")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("Query1")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Size")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionListSelection model
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel.Values = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(false)

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("DataUsageToMetrics Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.RelativeTimeFrame = core.StringPtr("86400s")

				// Construct an instance of the CreateDashboardOptions model
				createDashboardOptionsModel := new(logsv0.CreateDashboardOptions)
				createDashboardOptionsModel.Dashboard = dashboardModel
				createDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.CreateDashboardWithContext(ctx, createDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.CreateDashboard(createDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.CreateDashboardWithContext(ctx, createDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDashboardPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"href": "6U1Q8Hpa263Se8PkRKaiE", "id": "6U1Q8Hpa263Se8PkRKaiE", "name": "My Dashboard", "description": "This dashboard shows the performance of our production environment.", "layout": {"sections": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "rows": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "appearance": {"height": 5}, "widgets": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "title": "Response time", "description": "The average response time of the system", "definition": {"line_chart": {"legend": {"is_visible": true, "columns": ["name"], "group_by_query": true}, "tooltip": {"show_labels": true, "type": "single"}, "query_definitions": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "query": {"logs": {"lucene_query": {"value": "coralogix.metadata.applicationName:\"production\""}, "group_by": ["GroupBy"], "aggregations": [{"count": {}}], "filters": [{"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}], "group_bys": [{"keypath": ["Keypath"], "scope": "metadata"}]}}, "series_name_template": "{{severity}}", "series_count_limit": "10", "unit": "usd", "scale_type": "logarithmic", "name": "CPU usage", "is_visible": true, "color_scheme": "classic", "resolution": {"interval": "1m", "buckets_presented": 100}, "data_mode_type": "archive"}], "stacked_line": "relative"}}, "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z"}]}]}]}, "variables": [{"name": "service_name", "definition": {"multi_select": {"source": {"logs_path": {"observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "selection": {"all": {}}, "values_order_direction": "desc"}}, "display_name": "Service Name"}], "filters": [{"source": {"logs": {"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "enabled": true, "collapsed": true}], "annotations": [{"href": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Deployments", "enabled": true, "source": {"metrics": {"promql_query": {"value": "sum(up)"}, "strategy": {"start_time_metric": {}}, "message_template": "MessageTemplate", "labels": ["Labels"]}}}], "absolute_time_frame": {"from": "2021-01-01T00:00:00.000Z", "to": "2021-01-01T00:00:00.000Z"}}`)
				}))
			})
			It(`Invoke CreateDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.CreateDashboard(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("10c27980-3532-21b0-8069-0c9110f03c90")

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(19))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(false)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("all")

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonPromQlQuery model
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel.Value = core.StringPtr("sum(rate(cx_data_usage_bytes_total[20m]))by(pillar,tier)")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel

				// Construct an instance of the ApisDashboardsV1AstFilterMetricsFilter model
				apisDashboardsV1AstFilterMetricsFilterModel := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
				apisDashboardsV1AstFilterMetricsFilterModel.Label = core.StringPtr("service")
				apisDashboardsV1AstFilterMetricsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartMetricsQuery model
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.PromqlQuery = apisDashboardsV1AstWidgetsCommonPromQlQueryModel
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterMetricsFilter{*apisDashboardsV1AstFilterMetricsFilterModel}

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
				apisDashboardsV1AstWidgetsLineChartQueryModel.Metrics = apisDashboardsV1AstWidgetsLineChartMetricsQueryModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(96))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("e4560525-521c-49e7-a7de-a2925626c304")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("20")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("linear")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("Query1")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Size")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionListSelection model
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel.Values = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(false)

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("DataUsageToMetrics Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.RelativeTimeFrame = core.StringPtr("86400s")

				// Construct an instance of the CreateDashboardOptions model
				createDashboardOptionsModel := new(logsv0.CreateDashboardOptions)
				createDashboardOptionsModel.Dashboard = dashboardModel
				createDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.CreateDashboard(createDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateDashboard with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("10c27980-3532-21b0-8069-0c9110f03c90")

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(19))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(false)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("all")

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonPromQlQuery model
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel.Value = core.StringPtr("sum(rate(cx_data_usage_bytes_total[20m]))by(pillar,tier)")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel

				// Construct an instance of the ApisDashboardsV1AstFilterMetricsFilter model
				apisDashboardsV1AstFilterMetricsFilterModel := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
				apisDashboardsV1AstFilterMetricsFilterModel.Label = core.StringPtr("service")
				apisDashboardsV1AstFilterMetricsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartMetricsQuery model
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.PromqlQuery = apisDashboardsV1AstWidgetsCommonPromQlQueryModel
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterMetricsFilter{*apisDashboardsV1AstFilterMetricsFilterModel}

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
				apisDashboardsV1AstWidgetsLineChartQueryModel.Metrics = apisDashboardsV1AstWidgetsLineChartMetricsQueryModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(96))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("e4560525-521c-49e7-a7de-a2925626c304")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("20")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("linear")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("Query1")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Size")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionListSelection model
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel.Values = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(false)

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("DataUsageToMetrics Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.RelativeTimeFrame = core.StringPtr("86400s")

				// Construct an instance of the CreateDashboardOptions model
				createDashboardOptionsModel := new(logsv0.CreateDashboardOptions)
				createDashboardOptionsModel.Dashboard = dashboardModel
				createDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.CreateDashboard(createDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateDashboardOptions model with no property values
				createDashboardOptionsModelNew := new(logsv0.CreateDashboardOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.CreateDashboard(createDashboardOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("10c27980-3532-21b0-8069-0c9110f03c90")

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(19))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(false)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("all")

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonPromQlQuery model
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel.Value = core.StringPtr("sum(rate(cx_data_usage_bytes_total[20m]))by(pillar,tier)")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel

				// Construct an instance of the ApisDashboardsV1AstFilterMetricsFilter model
				apisDashboardsV1AstFilterMetricsFilterModel := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
				apisDashboardsV1AstFilterMetricsFilterModel.Label = core.StringPtr("service")
				apisDashboardsV1AstFilterMetricsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartMetricsQuery model
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.PromqlQuery = apisDashboardsV1AstWidgetsCommonPromQlQueryModel
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterMetricsFilter{*apisDashboardsV1AstFilterMetricsFilterModel}

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
				apisDashboardsV1AstWidgetsLineChartQueryModel.Metrics = apisDashboardsV1AstWidgetsLineChartMetricsQueryModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(96))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("e4560525-521c-49e7-a7de-a2925626c304")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("20")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("linear")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("Query1")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Size")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionListSelection model
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel.Values = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(false)

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("DataUsageToMetrics Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.RelativeTimeFrame = core.StringPtr("86400s")

				// Construct an instance of the CreateDashboardOptions model
				createDashboardOptionsModel := new(logsv0.CreateDashboardOptions)
				createDashboardOptionsModel.Dashboard = dashboardModel
				createDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.CreateDashboard(createDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDashboard(getDashboardOptions *GetDashboardOptions) - Operation response error`, func() {
		getDashboardPath := "/v1/dashboards/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDashboardPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDashboard with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetDashboardOptions model
				getDashboardOptionsModel := new(logsv0.GetDashboardOptions)
				getDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				getDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.GetDashboard(getDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.GetDashboard(getDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDashboard(getDashboardOptions *GetDashboardOptions)`, func() {
		getDashboardPath := "/v1/dashboards/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDashboardPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"href": "6U1Q8Hpa263Se8PkRKaiE", "id": "6U1Q8Hpa263Se8PkRKaiE", "name": "My Dashboard", "description": "This dashboard shows the performance of our production environment.", "layout": {"sections": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "rows": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "appearance": {"height": 5}, "widgets": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "title": "Response time", "description": "The average response time of the system", "definition": {"line_chart": {"legend": {"is_visible": true, "columns": ["name"], "group_by_query": true}, "tooltip": {"show_labels": true, "type": "single"}, "query_definitions": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "query": {"logs": {"lucene_query": {"value": "coralogix.metadata.applicationName:\"production\""}, "group_by": ["GroupBy"], "aggregations": [{"count": {}}], "filters": [{"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}], "group_bys": [{"keypath": ["Keypath"], "scope": "metadata"}]}}, "series_name_template": "{{severity}}", "series_count_limit": "10", "unit": "usd", "scale_type": "logarithmic", "name": "CPU usage", "is_visible": true, "color_scheme": "classic", "resolution": {"interval": "1m", "buckets_presented": 100}, "data_mode_type": "archive"}], "stacked_line": "relative"}}, "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z"}]}]}]}, "variables": [{"name": "service_name", "definition": {"multi_select": {"source": {"logs_path": {"observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "selection": {"all": {}}, "values_order_direction": "desc"}}, "display_name": "Service Name"}], "filters": [{"source": {"logs": {"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "enabled": true, "collapsed": true}], "annotations": [{"href": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Deployments", "enabled": true, "source": {"metrics": {"promql_query": {"value": "sum(up)"}, "strategy": {"start_time_metric": {}}, "message_template": "MessageTemplate", "labels": ["Labels"]}}}], "absolute_time_frame": {"from": "2021-01-01T00:00:00.000Z", "to": "2021-01-01T00:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetDashboard successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the GetDashboardOptions model
				getDashboardOptionsModel := new(logsv0.GetDashboardOptions)
				getDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				getDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.GetDashboardWithContext(ctx, getDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.GetDashboard(getDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.GetDashboardWithContext(ctx, getDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDashboardPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"href": "6U1Q8Hpa263Se8PkRKaiE", "id": "6U1Q8Hpa263Se8PkRKaiE", "name": "My Dashboard", "description": "This dashboard shows the performance of our production environment.", "layout": {"sections": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "rows": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "appearance": {"height": 5}, "widgets": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "title": "Response time", "description": "The average response time of the system", "definition": {"line_chart": {"legend": {"is_visible": true, "columns": ["name"], "group_by_query": true}, "tooltip": {"show_labels": true, "type": "single"}, "query_definitions": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "query": {"logs": {"lucene_query": {"value": "coralogix.metadata.applicationName:\"production\""}, "group_by": ["GroupBy"], "aggregations": [{"count": {}}], "filters": [{"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}], "group_bys": [{"keypath": ["Keypath"], "scope": "metadata"}]}}, "series_name_template": "{{severity}}", "series_count_limit": "10", "unit": "usd", "scale_type": "logarithmic", "name": "CPU usage", "is_visible": true, "color_scheme": "classic", "resolution": {"interval": "1m", "buckets_presented": 100}, "data_mode_type": "archive"}], "stacked_line": "relative"}}, "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z"}]}]}]}, "variables": [{"name": "service_name", "definition": {"multi_select": {"source": {"logs_path": {"observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "selection": {"all": {}}, "values_order_direction": "desc"}}, "display_name": "Service Name"}], "filters": [{"source": {"logs": {"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "enabled": true, "collapsed": true}], "annotations": [{"href": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Deployments", "enabled": true, "source": {"metrics": {"promql_query": {"value": "sum(up)"}, "strategy": {"start_time_metric": {}}, "message_template": "MessageTemplate", "labels": ["Labels"]}}}], "absolute_time_frame": {"from": "2021-01-01T00:00:00.000Z", "to": "2021-01-01T00:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.GetDashboard(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDashboardOptions model
				getDashboardOptionsModel := new(logsv0.GetDashboardOptions)
				getDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				getDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.GetDashboard(getDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDashboard with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetDashboardOptions model
				getDashboardOptionsModel := new(logsv0.GetDashboardOptions)
				getDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				getDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.GetDashboard(getDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDashboardOptions model with no property values
				getDashboardOptionsModelNew := new(logsv0.GetDashboardOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.GetDashboard(getDashboardOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetDashboardOptions model
				getDashboardOptionsModel := new(logsv0.GetDashboardOptions)
				getDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				getDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.GetDashboard(getDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceDashboard(replaceDashboardOptions *ReplaceDashboardOptions) - Operation response error`, func() {
		replaceDashboardPath := "/v1/dashboards/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDashboardPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceDashboard with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("10c27980-3532-21b0-8069-0c9110f03c90")

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(19))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(false)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("all")

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonPromQlQuery model
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel.Value = core.StringPtr("sum(rate(cx_data_usage_bytes_total[20m]))by(pillar,tier)")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel

				// Construct an instance of the ApisDashboardsV1AstFilterMetricsFilter model
				apisDashboardsV1AstFilterMetricsFilterModel := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
				apisDashboardsV1AstFilterMetricsFilterModel.Label = core.StringPtr("service")
				apisDashboardsV1AstFilterMetricsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartMetricsQuery model
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.PromqlQuery = apisDashboardsV1AstWidgetsCommonPromQlQueryModel
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterMetricsFilter{*apisDashboardsV1AstFilterMetricsFilterModel}

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
				apisDashboardsV1AstWidgetsLineChartQueryModel.Metrics = apisDashboardsV1AstWidgetsLineChartMetricsQueryModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(96))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("e4560525-521c-49e7-a7de-a2925626c304")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("20")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("linear")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("Query1")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Size")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionListSelection model
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel.Values = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(false)

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("DataUsageToMetrics Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.RelativeTimeFrame = core.StringPtr("86400s")

				// Construct an instance of the ReplaceDashboardOptions model
				replaceDashboardOptionsModel := new(logsv0.ReplaceDashboardOptions)
				replaceDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				replaceDashboardOptionsModel.Dashboard = dashboardModel
				replaceDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ReplaceDashboard(replaceDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ReplaceDashboard(replaceDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceDashboard(replaceDashboardOptions *ReplaceDashboardOptions)`, func() {
		replaceDashboardPath := "/v1/dashboards/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDashboardPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"href": "6U1Q8Hpa263Se8PkRKaiE", "id": "6U1Q8Hpa263Se8PkRKaiE", "name": "My Dashboard", "description": "This dashboard shows the performance of our production environment.", "layout": {"sections": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "rows": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "appearance": {"height": 5}, "widgets": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "title": "Response time", "description": "The average response time of the system", "definition": {"line_chart": {"legend": {"is_visible": true, "columns": ["name"], "group_by_query": true}, "tooltip": {"show_labels": true, "type": "single"}, "query_definitions": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "query": {"logs": {"lucene_query": {"value": "coralogix.metadata.applicationName:\"production\""}, "group_by": ["GroupBy"], "aggregations": [{"count": {}}], "filters": [{"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}], "group_bys": [{"keypath": ["Keypath"], "scope": "metadata"}]}}, "series_name_template": "{{severity}}", "series_count_limit": "10", "unit": "usd", "scale_type": "logarithmic", "name": "CPU usage", "is_visible": true, "color_scheme": "classic", "resolution": {"interval": "1m", "buckets_presented": 100}, "data_mode_type": "archive"}], "stacked_line": "relative"}}, "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z"}]}]}]}, "variables": [{"name": "service_name", "definition": {"multi_select": {"source": {"logs_path": {"observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "selection": {"all": {}}, "values_order_direction": "desc"}}, "display_name": "Service Name"}], "filters": [{"source": {"logs": {"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "enabled": true, "collapsed": true}], "annotations": [{"href": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Deployments", "enabled": true, "source": {"metrics": {"promql_query": {"value": "sum(up)"}, "strategy": {"start_time_metric": {}}, "message_template": "MessageTemplate", "labels": ["Labels"]}}}], "absolute_time_frame": {"from": "2021-01-01T00:00:00.000Z", "to": "2021-01-01T00:00:00.000Z"}}`)
				}))
			})
			It(`Invoke ReplaceDashboard successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("10c27980-3532-21b0-8069-0c9110f03c90")

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(19))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(false)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("all")

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonPromQlQuery model
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel.Value = core.StringPtr("sum(rate(cx_data_usage_bytes_total[20m]))by(pillar,tier)")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel

				// Construct an instance of the ApisDashboardsV1AstFilterMetricsFilter model
				apisDashboardsV1AstFilterMetricsFilterModel := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
				apisDashboardsV1AstFilterMetricsFilterModel.Label = core.StringPtr("service")
				apisDashboardsV1AstFilterMetricsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartMetricsQuery model
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.PromqlQuery = apisDashboardsV1AstWidgetsCommonPromQlQueryModel
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterMetricsFilter{*apisDashboardsV1AstFilterMetricsFilterModel}

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
				apisDashboardsV1AstWidgetsLineChartQueryModel.Metrics = apisDashboardsV1AstWidgetsLineChartMetricsQueryModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(96))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("e4560525-521c-49e7-a7de-a2925626c304")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("20")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("linear")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("Query1")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Size")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionListSelection model
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel.Values = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(false)

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("DataUsageToMetrics Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.RelativeTimeFrame = core.StringPtr("86400s")

				// Construct an instance of the ReplaceDashboardOptions model
				replaceDashboardOptionsModel := new(logsv0.ReplaceDashboardOptions)
				replaceDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				replaceDashboardOptionsModel.Dashboard = dashboardModel
				replaceDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ReplaceDashboardWithContext(ctx, replaceDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ReplaceDashboard(replaceDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ReplaceDashboardWithContext(ctx, replaceDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDashboardPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"href": "6U1Q8Hpa263Se8PkRKaiE", "id": "6U1Q8Hpa263Se8PkRKaiE", "name": "My Dashboard", "description": "This dashboard shows the performance of our production environment.", "layout": {"sections": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "rows": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "appearance": {"height": 5}, "widgets": [{"href": "Href", "id": {"value": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}, "title": "Response time", "description": "The average response time of the system", "definition": {"line_chart": {"legend": {"is_visible": true, "columns": ["name"], "group_by_query": true}, "tooltip": {"show_labels": true, "type": "single"}, "query_definitions": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "query": {"logs": {"lucene_query": {"value": "coralogix.metadata.applicationName:\"production\""}, "group_by": ["GroupBy"], "aggregations": [{"count": {}}], "filters": [{"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}], "group_bys": [{"keypath": ["Keypath"], "scope": "metadata"}]}}, "series_name_template": "{{severity}}", "series_count_limit": "10", "unit": "usd", "scale_type": "logarithmic", "name": "CPU usage", "is_visible": true, "color_scheme": "classic", "resolution": {"interval": "1m", "buckets_presented": 100}, "data_mode_type": "archive"}], "stacked_line": "relative"}}, "created_at": "2021-01-01T00:00:00.000Z", "updated_at": "2021-01-01T00:00:00.000Z"}]}]}]}, "variables": [{"name": "service_name", "definition": {"multi_select": {"source": {"logs_path": {"observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "selection": {"all": {}}, "values_order_direction": "desc"}}, "display_name": "Service Name"}], "filters": [{"source": {"logs": {"operator": {"equals": {"selection": {"all": {}}}}, "observation_field": {"keypath": ["Keypath"], "scope": "metadata"}}}, "enabled": true, "collapsed": true}], "annotations": [{"href": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "Deployments", "enabled": true, "source": {"metrics": {"promql_query": {"value": "sum(up)"}, "strategy": {"start_time_metric": {}}, "message_template": "MessageTemplate", "labels": ["Labels"]}}}], "absolute_time_frame": {"from": "2021-01-01T00:00:00.000Z", "to": "2021-01-01T00:00:00.000Z"}}`)
				}))
			})
			It(`Invoke ReplaceDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ReplaceDashboard(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("10c27980-3532-21b0-8069-0c9110f03c90")

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(19))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(false)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("all")

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonPromQlQuery model
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel.Value = core.StringPtr("sum(rate(cx_data_usage_bytes_total[20m]))by(pillar,tier)")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel

				// Construct an instance of the ApisDashboardsV1AstFilterMetricsFilter model
				apisDashboardsV1AstFilterMetricsFilterModel := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
				apisDashboardsV1AstFilterMetricsFilterModel.Label = core.StringPtr("service")
				apisDashboardsV1AstFilterMetricsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartMetricsQuery model
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.PromqlQuery = apisDashboardsV1AstWidgetsCommonPromQlQueryModel
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterMetricsFilter{*apisDashboardsV1AstFilterMetricsFilterModel}

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
				apisDashboardsV1AstWidgetsLineChartQueryModel.Metrics = apisDashboardsV1AstWidgetsLineChartMetricsQueryModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(96))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("e4560525-521c-49e7-a7de-a2925626c304")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("20")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("linear")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("Query1")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Size")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionListSelection model
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel.Values = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(false)

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("DataUsageToMetrics Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.RelativeTimeFrame = core.StringPtr("86400s")

				// Construct an instance of the ReplaceDashboardOptions model
				replaceDashboardOptionsModel := new(logsv0.ReplaceDashboardOptions)
				replaceDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				replaceDashboardOptionsModel.Dashboard = dashboardModel
				replaceDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ReplaceDashboard(replaceDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceDashboard with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("10c27980-3532-21b0-8069-0c9110f03c90")

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(19))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(false)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("all")

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonPromQlQuery model
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel.Value = core.StringPtr("sum(rate(cx_data_usage_bytes_total[20m]))by(pillar,tier)")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel

				// Construct an instance of the ApisDashboardsV1AstFilterMetricsFilter model
				apisDashboardsV1AstFilterMetricsFilterModel := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
				apisDashboardsV1AstFilterMetricsFilterModel.Label = core.StringPtr("service")
				apisDashboardsV1AstFilterMetricsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartMetricsQuery model
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.PromqlQuery = apisDashboardsV1AstWidgetsCommonPromQlQueryModel
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterMetricsFilter{*apisDashboardsV1AstFilterMetricsFilterModel}

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
				apisDashboardsV1AstWidgetsLineChartQueryModel.Metrics = apisDashboardsV1AstWidgetsLineChartMetricsQueryModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(96))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("e4560525-521c-49e7-a7de-a2925626c304")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("20")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("linear")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("Query1")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Size")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionListSelection model
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel.Values = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(false)

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("DataUsageToMetrics Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.RelativeTimeFrame = core.StringPtr("86400s")

				// Construct an instance of the ReplaceDashboardOptions model
				replaceDashboardOptionsModel := new(logsv0.ReplaceDashboardOptions)
				replaceDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				replaceDashboardOptionsModel.Dashboard = dashboardModel
				replaceDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ReplaceDashboard(replaceDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceDashboardOptions model with no property values
				replaceDashboardOptionsModelNew := new(logsv0.ReplaceDashboardOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.ReplaceDashboard(replaceDashboardOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("10c27980-3532-21b0-8069-0c9110f03c90")

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(19))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(false)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("all")

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonPromQlQuery model
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
				apisDashboardsV1AstWidgetsCommonPromQlQueryModel.Value = core.StringPtr("sum(rate(cx_data_usage_bytes_total[20m]))by(pillar,tier)")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel

				// Construct an instance of the ApisDashboardsV1AstFilterMetricsFilter model
				apisDashboardsV1AstFilterMetricsFilterModel := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
				apisDashboardsV1AstFilterMetricsFilterModel.Label = core.StringPtr("service")
				apisDashboardsV1AstFilterMetricsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartMetricsQuery model
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.PromqlQuery = apisDashboardsV1AstWidgetsCommonPromQlQueryModel
				apisDashboardsV1AstWidgetsLineChartMetricsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterMetricsFilter{*apisDashboardsV1AstFilterMetricsFilterModel}

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
				apisDashboardsV1AstWidgetsLineChartQueryModel.Metrics = apisDashboardsV1AstWidgetsLineChartMetricsQueryModel

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(96))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("e4560525-521c-49e7-a7de-a2925626c304")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("20")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("linear")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("Query1")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Size")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionListSelection model
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
				apisDashboardsV1AstFilterEqualsSelectionListSelectionModel.Values = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(false)

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("DataUsageToMetrics Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.RelativeTimeFrame = core.StringPtr("86400s")

				// Construct an instance of the ReplaceDashboardOptions model
				replaceDashboardOptionsModel := new(logsv0.ReplaceDashboardOptions)
				replaceDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				replaceDashboardOptionsModel.Dashboard = dashboardModel
				replaceDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ReplaceDashboard(replaceDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteDashboard(deleteDashboardOptions *DeleteDashboardOptions)`, func() {
		deleteDashboardPath := "/v1/dashboards/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteDashboardPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := logsService.DeleteDashboard(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteDashboardOptions model
				deleteDashboardOptionsModel := new(logsv0.DeleteDashboardOptions)
				deleteDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				deleteDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = logsService.DeleteDashboard(deleteDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteDashboard with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the DeleteDashboardOptions model
				deleteDashboardOptionsModel := new(logsv0.DeleteDashboardOptions)
				deleteDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				deleteDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := logsService.DeleteDashboard(deleteDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteDashboardOptions model with no property values
				deleteDashboardOptionsModelNew := new(logsv0.DeleteDashboardOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = logsService.DeleteDashboard(deleteDashboardOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PinDashboard(pinDashboardOptions *PinDashboardOptions) - Operation response error`, func() {
		pinDashboardPath := "/v1/dashboards/testString/pinned"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pinDashboardPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PinDashboard with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the PinDashboardOptions model
				pinDashboardOptionsModel := new(logsv0.PinDashboardOptions)
				pinDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				pinDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.PinDashboard(pinDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.PinDashboard(pinDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PinDashboard(pinDashboardOptions *PinDashboardOptions)`, func() {
		pinDashboardPath := "/v1/dashboards/testString/pinned"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pinDashboardPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PinDashboard successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the PinDashboardOptions model
				pinDashboardOptionsModel := new(logsv0.PinDashboardOptions)
				pinDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				pinDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.PinDashboardWithContext(ctx, pinDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.PinDashboard(pinDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.PinDashboardWithContext(ctx, pinDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(pinDashboardPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke PinDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.PinDashboard(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PinDashboardOptions model
				pinDashboardOptionsModel := new(logsv0.PinDashboardOptions)
				pinDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				pinDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.PinDashboard(pinDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PinDashboard with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the PinDashboardOptions model
				pinDashboardOptionsModel := new(logsv0.PinDashboardOptions)
				pinDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				pinDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.PinDashboard(pinDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PinDashboardOptions model with no property values
				pinDashboardOptionsModelNew := new(logsv0.PinDashboardOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.PinDashboard(pinDashboardOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke PinDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the PinDashboardOptions model
				pinDashboardOptionsModel := new(logsv0.PinDashboardOptions)
				pinDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				pinDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.PinDashboard(pinDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UnpinDashboard(unpinDashboardOptions *UnpinDashboardOptions)`, func() {
		unpinDashboardPath := "/v1/dashboards/testString/pinned"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(unpinDashboardPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke UnpinDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := logsService.UnpinDashboard(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UnpinDashboardOptions model
				unpinDashboardOptionsModel := new(logsv0.UnpinDashboardOptions)
				unpinDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				unpinDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = logsService.UnpinDashboard(unpinDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UnpinDashboard with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the UnpinDashboardOptions model
				unpinDashboardOptionsModel := new(logsv0.UnpinDashboardOptions)
				unpinDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				unpinDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := logsService.UnpinDashboard(unpinDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UnpinDashboardOptions model with no property values
				unpinDashboardOptionsModelNew := new(logsv0.UnpinDashboardOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = logsService.UnpinDashboard(unpinDashboardOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceDefaultDashboard(replaceDefaultDashboardOptions *ReplaceDefaultDashboardOptions) - Operation response error`, func() {
		replaceDefaultDashboardPath := "/v1/dashboards/testString/default"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDefaultDashboardPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceDefaultDashboard with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ReplaceDefaultDashboardOptions model
				replaceDefaultDashboardOptionsModel := new(logsv0.ReplaceDefaultDashboardOptions)
				replaceDefaultDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				replaceDefaultDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ReplaceDefaultDashboard(replaceDefaultDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ReplaceDefaultDashboard(replaceDefaultDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceDefaultDashboard(replaceDefaultDashboardOptions *ReplaceDefaultDashboardOptions)`, func() {
		replaceDefaultDashboardPath := "/v1/dashboards/testString/default"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDefaultDashboardPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ReplaceDefaultDashboard successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ReplaceDefaultDashboardOptions model
				replaceDefaultDashboardOptionsModel := new(logsv0.ReplaceDefaultDashboardOptions)
				replaceDefaultDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				replaceDefaultDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ReplaceDefaultDashboardWithContext(ctx, replaceDefaultDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ReplaceDefaultDashboard(replaceDefaultDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ReplaceDefaultDashboardWithContext(ctx, replaceDefaultDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDefaultDashboardPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke ReplaceDefaultDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ReplaceDefaultDashboard(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ReplaceDefaultDashboardOptions model
				replaceDefaultDashboardOptionsModel := new(logsv0.ReplaceDefaultDashboardOptions)
				replaceDefaultDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				replaceDefaultDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ReplaceDefaultDashboard(replaceDefaultDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceDefaultDashboard with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ReplaceDefaultDashboardOptions model
				replaceDefaultDashboardOptionsModel := new(logsv0.ReplaceDefaultDashboardOptions)
				replaceDefaultDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				replaceDefaultDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ReplaceDefaultDashboard(replaceDefaultDashboardOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceDefaultDashboardOptions model with no property values
				replaceDefaultDashboardOptionsModelNew := new(logsv0.ReplaceDefaultDashboardOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.ReplaceDefaultDashboard(replaceDefaultDashboardOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceDefaultDashboard successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ReplaceDefaultDashboardOptions model
				replaceDefaultDashboardOptionsModel := new(logsv0.ReplaceDefaultDashboardOptions)
				replaceDefaultDashboardOptionsModel.DashboardID = core.StringPtr("testString")
				replaceDefaultDashboardOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ReplaceDefaultDashboard(replaceDefaultDashboardOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AssignDashboardFolder(assignDashboardFolderOptions *AssignDashboardFolderOptions) - Operation response error`, func() {
		assignDashboardFolderPath := "/v1/dashboards/testString/folder/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(assignDashboardFolderPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke AssignDashboardFolder with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the AssignDashboardFolderOptions model
				assignDashboardFolderOptionsModel := new(logsv0.AssignDashboardFolderOptions)
				assignDashboardFolderOptionsModel.DashboardID = core.StringPtr("testString")
				assignDashboardFolderOptionsModel.FolderID = core.StringPtr("testString")
				assignDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.AssignDashboardFolder(assignDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.AssignDashboardFolder(assignDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AssignDashboardFolder(assignDashboardFolderOptions *AssignDashboardFolderOptions)`, func() {
		assignDashboardFolderPath := "/v1/dashboards/testString/folder/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(assignDashboardFolderPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke AssignDashboardFolder successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the AssignDashboardFolderOptions model
				assignDashboardFolderOptionsModel := new(logsv0.AssignDashboardFolderOptions)
				assignDashboardFolderOptionsModel.DashboardID = core.StringPtr("testString")
				assignDashboardFolderOptionsModel.FolderID = core.StringPtr("testString")
				assignDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.AssignDashboardFolderWithContext(ctx, assignDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.AssignDashboardFolder(assignDashboardFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.AssignDashboardFolderWithContext(ctx, assignDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(assignDashboardFolderPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{}`)
				}))
			})
			It(`Invoke AssignDashboardFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.AssignDashboardFolder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AssignDashboardFolderOptions model
				assignDashboardFolderOptionsModel := new(logsv0.AssignDashboardFolderOptions)
				assignDashboardFolderOptionsModel.DashboardID = core.StringPtr("testString")
				assignDashboardFolderOptionsModel.FolderID = core.StringPtr("testString")
				assignDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.AssignDashboardFolder(assignDashboardFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke AssignDashboardFolder with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the AssignDashboardFolderOptions model
				assignDashboardFolderOptionsModel := new(logsv0.AssignDashboardFolderOptions)
				assignDashboardFolderOptionsModel.DashboardID = core.StringPtr("testString")
				assignDashboardFolderOptionsModel.FolderID = core.StringPtr("testString")
				assignDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.AssignDashboardFolder(assignDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the AssignDashboardFolderOptions model with no property values
				assignDashboardFolderOptionsModelNew := new(logsv0.AssignDashboardFolderOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.AssignDashboardFolder(assignDashboardFolderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke AssignDashboardFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the AssignDashboardFolderOptions model
				assignDashboardFolderOptionsModel := new(logsv0.AssignDashboardFolderOptions)
				assignDashboardFolderOptionsModel.DashboardID = core.StringPtr("testString")
				assignDashboardFolderOptionsModel.FolderID = core.StringPtr("testString")
				assignDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.AssignDashboardFolder(assignDashboardFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDashboardFolders(listDashboardFoldersOptions *ListDashboardFoldersOptions) - Operation response error`, func() {
		listDashboardFoldersPath := "/v1/folders"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDashboardFoldersPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDashboardFolders with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListDashboardFoldersOptions model
				listDashboardFoldersOptionsModel := new(logsv0.ListDashboardFoldersOptions)
				listDashboardFoldersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ListDashboardFolders(listDashboardFoldersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ListDashboardFolders(listDashboardFoldersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDashboardFolders(listDashboardFoldersOptions *ListDashboardFoldersOptions)`, func() {
		listDashboardFoldersPath := "/v1/folders"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDashboardFoldersPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"folders": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder", "parent_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}]}`)
				}))
			})
			It(`Invoke ListDashboardFolders successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ListDashboardFoldersOptions model
				listDashboardFoldersOptionsModel := new(logsv0.ListDashboardFoldersOptions)
				listDashboardFoldersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ListDashboardFoldersWithContext(ctx, listDashboardFoldersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ListDashboardFolders(listDashboardFoldersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ListDashboardFoldersWithContext(ctx, listDashboardFoldersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDashboardFoldersPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"folders": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder", "parent_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}]}`)
				}))
			})
			It(`Invoke ListDashboardFolders successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ListDashboardFolders(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDashboardFoldersOptions model
				listDashboardFoldersOptionsModel := new(logsv0.ListDashboardFoldersOptions)
				listDashboardFoldersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ListDashboardFolders(listDashboardFoldersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListDashboardFolders with error: Operation request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListDashboardFoldersOptions model
				listDashboardFoldersOptionsModel := new(logsv0.ListDashboardFoldersOptions)
				listDashboardFoldersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ListDashboardFolders(listDashboardFoldersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListDashboardFolders successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListDashboardFoldersOptions model
				listDashboardFoldersOptionsModel := new(logsv0.ListDashboardFoldersOptions)
				listDashboardFoldersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ListDashboardFolders(listDashboardFoldersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDashboardFolder(createDashboardFolderOptions *CreateDashboardFolderOptions) - Operation response error`, func() {
		createDashboardFolderPath := "/v1/folders"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDashboardFolderPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDashboardFolder with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the CreateDashboardFolderOptions model
				createDashboardFolderOptionsModel := new(logsv0.CreateDashboardFolderOptions)
				createDashboardFolderOptionsModel.Name = core.StringPtr("My Folder")
				createDashboardFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				createDashboardFolderOptionsModel.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				createDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.CreateDashboardFolder(createDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.CreateDashboardFolder(createDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDashboardFolder(createDashboardFolderOptions *CreateDashboardFolderOptions)`, func() {
		createDashboardFolderPath := "/v1/folders"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDashboardFolderPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder", "parent_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}`)
				}))
			})
			It(`Invoke CreateDashboardFolder successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the CreateDashboardFolderOptions model
				createDashboardFolderOptionsModel := new(logsv0.CreateDashboardFolderOptions)
				createDashboardFolderOptionsModel.Name = core.StringPtr("My Folder")
				createDashboardFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				createDashboardFolderOptionsModel.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				createDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.CreateDashboardFolderWithContext(ctx, createDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.CreateDashboardFolder(createDashboardFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.CreateDashboardFolderWithContext(ctx, createDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDashboardFolderPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder", "parent_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}`)
				}))
			})
			It(`Invoke CreateDashboardFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.CreateDashboardFolder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateDashboardFolderOptions model
				createDashboardFolderOptionsModel := new(logsv0.CreateDashboardFolderOptions)
				createDashboardFolderOptionsModel.Name = core.StringPtr("My Folder")
				createDashboardFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				createDashboardFolderOptionsModel.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				createDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.CreateDashboardFolder(createDashboardFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateDashboardFolder with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the CreateDashboardFolderOptions model
				createDashboardFolderOptionsModel := new(logsv0.CreateDashboardFolderOptions)
				createDashboardFolderOptionsModel.Name = core.StringPtr("My Folder")
				createDashboardFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				createDashboardFolderOptionsModel.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				createDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.CreateDashboardFolder(createDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateDashboardFolderOptions model with no property values
				createDashboardFolderOptionsModelNew := new(logsv0.CreateDashboardFolderOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.CreateDashboardFolder(createDashboardFolderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateDashboardFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the CreateDashboardFolderOptions model
				createDashboardFolderOptionsModel := new(logsv0.CreateDashboardFolderOptions)
				createDashboardFolderOptionsModel.Name = core.StringPtr("My Folder")
				createDashboardFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				createDashboardFolderOptionsModel.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				createDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.CreateDashboardFolder(createDashboardFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceDashboardFolder(replaceDashboardFolderOptions *ReplaceDashboardFolderOptions) - Operation response error`, func() {
		replaceDashboardFolderPath := "/v1/folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDashboardFolderPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceDashboardFolder with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ReplaceDashboardFolderOptions model
				replaceDashboardFolderOptionsModel := new(logsv0.ReplaceDashboardFolderOptions)
				replaceDashboardFolderOptionsModel.FolderID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.Name = core.StringPtr("My Folder")
				replaceDashboardFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ReplaceDashboardFolder(replaceDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ReplaceDashboardFolder(replaceDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceDashboardFolder(replaceDashboardFolderOptions *ReplaceDashboardFolderOptions)`, func() {
		replaceDashboardFolderPath := "/v1/folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDashboardFolderPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder", "parent_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}`)
				}))
			})
			It(`Invoke ReplaceDashboardFolder successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ReplaceDashboardFolderOptions model
				replaceDashboardFolderOptionsModel := new(logsv0.ReplaceDashboardFolderOptions)
				replaceDashboardFolderOptionsModel.FolderID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.Name = core.StringPtr("My Folder")
				replaceDashboardFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ReplaceDashboardFolderWithContext(ctx, replaceDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ReplaceDashboardFolder(replaceDashboardFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ReplaceDashboardFolderWithContext(ctx, replaceDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceDashboardFolderPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder", "parent_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}`)
				}))
			})
			It(`Invoke ReplaceDashboardFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ReplaceDashboardFolder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ReplaceDashboardFolderOptions model
				replaceDashboardFolderOptionsModel := new(logsv0.ReplaceDashboardFolderOptions)
				replaceDashboardFolderOptionsModel.FolderID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.Name = core.StringPtr("My Folder")
				replaceDashboardFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ReplaceDashboardFolder(replaceDashboardFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceDashboardFolder with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ReplaceDashboardFolderOptions model
				replaceDashboardFolderOptionsModel := new(logsv0.ReplaceDashboardFolderOptions)
				replaceDashboardFolderOptionsModel.FolderID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.Name = core.StringPtr("My Folder")
				replaceDashboardFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ReplaceDashboardFolder(replaceDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceDashboardFolderOptions model with no property values
				replaceDashboardFolderOptionsModelNew := new(logsv0.ReplaceDashboardFolderOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.ReplaceDashboardFolder(replaceDashboardFolderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceDashboardFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ReplaceDashboardFolderOptions model
				replaceDashboardFolderOptionsModel := new(logsv0.ReplaceDashboardFolderOptions)
				replaceDashboardFolderOptionsModel.FolderID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.Name = core.StringPtr("My Folder")
				replaceDashboardFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ReplaceDashboardFolder(replaceDashboardFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteDashboardFolder(deleteDashboardFolderOptions *DeleteDashboardFolderOptions)`, func() {
		deleteDashboardFolderPath := "/v1/folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteDashboardFolderPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteDashboardFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := logsService.DeleteDashboardFolder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteDashboardFolderOptions model
				deleteDashboardFolderOptionsModel := new(logsv0.DeleteDashboardFolderOptions)
				deleteDashboardFolderOptionsModel.FolderID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = logsService.DeleteDashboardFolder(deleteDashboardFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteDashboardFolder with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the DeleteDashboardFolderOptions model
				deleteDashboardFolderOptionsModel := new(logsv0.DeleteDashboardFolderOptions)
				deleteDashboardFolderOptionsModel.FolderID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteDashboardFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := logsService.DeleteDashboardFolder(deleteDashboardFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteDashboardFolderOptions model with no property values
				deleteDashboardFolderOptionsModelNew := new(logsv0.DeleteDashboardFolderOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = logsService.DeleteDashboardFolder(deleteDashboardFolderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListE2m(listE2mOptions *ListE2mOptions) - Operation response error`, func() {
		listE2mPath := "/v1/events2metrics"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listE2mPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListE2m with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListE2mOptions model
				listE2mOptionsModel := new(logsv0.ListE2mOptions)
				listE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ListE2m(listE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ListE2m(listE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListE2m(listE2mOptions *ListE2mOptions)`, func() {
		listE2mPath := "/v1/events2metrics"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listE2mPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"events2metrics": [{"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09", "name": "Service_catalog_latency", "description": "avg and max the latency of catalog service", "create_time": "2022-06-30T12:30:00Z'", "update_time": "2022-06-30T12:30:00Z'", "permutations": {"limit": 30000, "has_exceeded_limit": true}, "metric_labels": [{"target_label": "alias_label_name", "source_field": "log_obj.string_value"}], "metric_fields": [{"target_base_metric_name": "alias_field_name", "source_field": "log_obj.numeric_field", "aggregations": [{"enabled": true, "agg_type": "samples", "target_metric_name": "alias_field_name_agg_func", "samples": {"sample_type": "max"}}]}], "type": "logs2metrics", "is_internal": true, "logs_query": {"lucene": "log_obj.numeric_field: [50 TO 100]", "alias": "new_query", "applicationname_filters": ["ApplicationnameFilters"], "subsystemname_filters": ["SubsystemnameFilters"], "severity_filters": ["critical"]}}]}`)
				}))
			})
			It(`Invoke ListE2m successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ListE2mOptions model
				listE2mOptionsModel := new(logsv0.ListE2mOptions)
				listE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ListE2mWithContext(ctx, listE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ListE2m(listE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ListE2mWithContext(ctx, listE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listE2mPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"events2metrics": [{"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09", "name": "Service_catalog_latency", "description": "avg and max the latency of catalog service", "create_time": "2022-06-30T12:30:00Z'", "update_time": "2022-06-30T12:30:00Z'", "permutations": {"limit": 30000, "has_exceeded_limit": true}, "metric_labels": [{"target_label": "alias_label_name", "source_field": "log_obj.string_value"}], "metric_fields": [{"target_base_metric_name": "alias_field_name", "source_field": "log_obj.numeric_field", "aggregations": [{"enabled": true, "agg_type": "samples", "target_metric_name": "alias_field_name_agg_func", "samples": {"sample_type": "max"}}]}], "type": "logs2metrics", "is_internal": true, "logs_query": {"lucene": "log_obj.numeric_field: [50 TO 100]", "alias": "new_query", "applicationname_filters": ["ApplicationnameFilters"], "subsystemname_filters": ["SubsystemnameFilters"], "severity_filters": ["critical"]}}]}`)
				}))
			})
			It(`Invoke ListE2m successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ListE2m(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListE2mOptions model
				listE2mOptionsModel := new(logsv0.ListE2mOptions)
				listE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ListE2m(listE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListE2m with error: Operation request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListE2mOptions model
				listE2mOptionsModel := new(logsv0.ListE2mOptions)
				listE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ListE2m(listE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListE2m successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListE2mOptions model
				listE2mOptionsModel := new(logsv0.ListE2mOptions)
				listE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ListE2m(listE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateE2m(createE2mOptions *CreateE2mOptions) - Operation response error`, func() {
		createE2mPath := "/v1/events2metrics"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createE2mPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateE2m with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("logs")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				event2MetricPrototypeModel.Name = core.StringPtr("test em2")
				event2MetricPrototypeModel.Description = core.StringPtr("Test e2m")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(1))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel

				// Construct an instance of the CreateE2mOptions model
				createE2mOptionsModel := new(logsv0.CreateE2mOptions)
				createE2mOptionsModel.Event2MetricPrototype = event2MetricPrototypeModel
				createE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.CreateE2m(createE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.CreateE2m(createE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateE2m(createE2mOptions *CreateE2mOptions)`, func() {
		createE2mPath := "/v1/events2metrics"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createE2mPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09", "name": "Service_catalog_latency", "description": "avg and max the latency of catalog service", "create_time": "2022-06-30T12:30:00Z'", "update_time": "2022-06-30T12:30:00Z'", "permutations": {"limit": 30000, "has_exceeded_limit": true}, "metric_labels": [{"target_label": "alias_label_name", "source_field": "log_obj.string_value"}], "metric_fields": [{"target_base_metric_name": "alias_field_name", "source_field": "log_obj.numeric_field", "aggregations": [{"enabled": true, "agg_type": "samples", "target_metric_name": "alias_field_name_agg_func", "samples": {"sample_type": "max"}}]}], "type": "logs2metrics", "is_internal": true, "logs_query": {"lucene": "log_obj.numeric_field: [50 TO 100]", "alias": "new_query", "applicationname_filters": ["ApplicationnameFilters"], "subsystemname_filters": ["SubsystemnameFilters"], "severity_filters": ["critical"]}}`)
				}))
			})
			It(`Invoke CreateE2m successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("logs")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				event2MetricPrototypeModel.Name = core.StringPtr("test em2")
				event2MetricPrototypeModel.Description = core.StringPtr("Test e2m")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(1))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel

				// Construct an instance of the CreateE2mOptions model
				createE2mOptionsModel := new(logsv0.CreateE2mOptions)
				createE2mOptionsModel.Event2MetricPrototype = event2MetricPrototypeModel
				createE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.CreateE2mWithContext(ctx, createE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.CreateE2m(createE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.CreateE2mWithContext(ctx, createE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createE2mPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09", "name": "Service_catalog_latency", "description": "avg and max the latency of catalog service", "create_time": "2022-06-30T12:30:00Z'", "update_time": "2022-06-30T12:30:00Z'", "permutations": {"limit": 30000, "has_exceeded_limit": true}, "metric_labels": [{"target_label": "alias_label_name", "source_field": "log_obj.string_value"}], "metric_fields": [{"target_base_metric_name": "alias_field_name", "source_field": "log_obj.numeric_field", "aggregations": [{"enabled": true, "agg_type": "samples", "target_metric_name": "alias_field_name_agg_func", "samples": {"sample_type": "max"}}]}], "type": "logs2metrics", "is_internal": true, "logs_query": {"lucene": "log_obj.numeric_field: [50 TO 100]", "alias": "new_query", "applicationname_filters": ["ApplicationnameFilters"], "subsystemname_filters": ["SubsystemnameFilters"], "severity_filters": ["critical"]}}`)
				}))
			})
			It(`Invoke CreateE2m successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.CreateE2m(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("logs")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				event2MetricPrototypeModel.Name = core.StringPtr("test em2")
				event2MetricPrototypeModel.Description = core.StringPtr("Test e2m")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(1))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel

				// Construct an instance of the CreateE2mOptions model
				createE2mOptionsModel := new(logsv0.CreateE2mOptions)
				createE2mOptionsModel.Event2MetricPrototype = event2MetricPrototypeModel
				createE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.CreateE2m(createE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateE2m with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("logs")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				event2MetricPrototypeModel.Name = core.StringPtr("test em2")
				event2MetricPrototypeModel.Description = core.StringPtr("Test e2m")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(1))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel

				// Construct an instance of the CreateE2mOptions model
				createE2mOptionsModel := new(logsv0.CreateE2mOptions)
				createE2mOptionsModel.Event2MetricPrototype = event2MetricPrototypeModel
				createE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.CreateE2m(createE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateE2mOptions model with no property values
				createE2mOptionsModelNew := new(logsv0.CreateE2mOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.CreateE2m(createE2mOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateE2m successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("logs")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				event2MetricPrototypeModel.Name = core.StringPtr("test em2")
				event2MetricPrototypeModel.Description = core.StringPtr("Test e2m")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(1))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel

				// Construct an instance of the CreateE2mOptions model
				createE2mOptionsModel := new(logsv0.CreateE2mOptions)
				createE2mOptionsModel.Event2MetricPrototype = event2MetricPrototypeModel
				createE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.CreateE2m(createE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetE2m(getE2mOptions *GetE2mOptions) - Operation response error`, func() {
		getE2mPath := "/v1/events2metrics/d6a3658e-78d2-47d0-9b81-b2c551f01b09"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getE2mPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetE2m with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetE2mOptions model
				getE2mOptionsModel := new(logsv0.GetE2mOptions)
				getE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				getE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.GetE2m(getE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.GetE2m(getE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetE2m(getE2mOptions *GetE2mOptions)`, func() {
		getE2mPath := "/v1/events2metrics/d6a3658e-78d2-47d0-9b81-b2c551f01b09"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getE2mPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09", "name": "Service_catalog_latency", "description": "avg and max the latency of catalog service", "create_time": "2022-06-30T12:30:00Z'", "update_time": "2022-06-30T12:30:00Z'", "permutations": {"limit": 30000, "has_exceeded_limit": true}, "metric_labels": [{"target_label": "alias_label_name", "source_field": "log_obj.string_value"}], "metric_fields": [{"target_base_metric_name": "alias_field_name", "source_field": "log_obj.numeric_field", "aggregations": [{"enabled": true, "agg_type": "samples", "target_metric_name": "alias_field_name_agg_func", "samples": {"sample_type": "max"}}]}], "type": "logs2metrics", "is_internal": true, "logs_query": {"lucene": "log_obj.numeric_field: [50 TO 100]", "alias": "new_query", "applicationname_filters": ["ApplicationnameFilters"], "subsystemname_filters": ["SubsystemnameFilters"], "severity_filters": ["critical"]}}`)
				}))
			})
			It(`Invoke GetE2m successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the GetE2mOptions model
				getE2mOptionsModel := new(logsv0.GetE2mOptions)
				getE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				getE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.GetE2mWithContext(ctx, getE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.GetE2m(getE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.GetE2mWithContext(ctx, getE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getE2mPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09", "name": "Service_catalog_latency", "description": "avg and max the latency of catalog service", "create_time": "2022-06-30T12:30:00Z'", "update_time": "2022-06-30T12:30:00Z'", "permutations": {"limit": 30000, "has_exceeded_limit": true}, "metric_labels": [{"target_label": "alias_label_name", "source_field": "log_obj.string_value"}], "metric_fields": [{"target_base_metric_name": "alias_field_name", "source_field": "log_obj.numeric_field", "aggregations": [{"enabled": true, "agg_type": "samples", "target_metric_name": "alias_field_name_agg_func", "samples": {"sample_type": "max"}}]}], "type": "logs2metrics", "is_internal": true, "logs_query": {"lucene": "log_obj.numeric_field: [50 TO 100]", "alias": "new_query", "applicationname_filters": ["ApplicationnameFilters"], "subsystemname_filters": ["SubsystemnameFilters"], "severity_filters": ["critical"]}}`)
				}))
			})
			It(`Invoke GetE2m successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.GetE2m(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetE2mOptions model
				getE2mOptionsModel := new(logsv0.GetE2mOptions)
				getE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				getE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.GetE2m(getE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetE2m with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetE2mOptions model
				getE2mOptionsModel := new(logsv0.GetE2mOptions)
				getE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				getE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.GetE2m(getE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetE2mOptions model with no property values
				getE2mOptionsModelNew := new(logsv0.GetE2mOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.GetE2m(getE2mOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetE2m successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetE2mOptions model
				getE2mOptionsModel := new(logsv0.GetE2mOptions)
				getE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				getE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.GetE2m(getE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceE2m(replaceE2mOptions *ReplaceE2mOptions) - Operation response error`, func() {
		replaceE2mPath := "/v1/events2metrics/d6a3658e-78d2-47d0-9b81-b2c551f01b09"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceE2mPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceE2m with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("logs")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				event2MetricPrototypeModel.Name = core.StringPtr("test em2")
				event2MetricPrototypeModel.Description = core.StringPtr("Test e2m updated")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(1))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel

				// Construct an instance of the ReplaceE2mOptions model
				replaceE2mOptionsModel := new(logsv0.ReplaceE2mOptions)
				replaceE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				replaceE2mOptionsModel.Event2MetricPrototype = event2MetricPrototypeModel
				replaceE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ReplaceE2m(replaceE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ReplaceE2m(replaceE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceE2m(replaceE2mOptions *ReplaceE2mOptions)`, func() {
		replaceE2mPath := "/v1/events2metrics/d6a3658e-78d2-47d0-9b81-b2c551f01b09"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceE2mPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09", "name": "Service_catalog_latency", "description": "avg and max the latency of catalog service", "create_time": "2022-06-30T12:30:00Z'", "update_time": "2022-06-30T12:30:00Z'", "permutations": {"limit": 30000, "has_exceeded_limit": true}, "metric_labels": [{"target_label": "alias_label_name", "source_field": "log_obj.string_value"}], "metric_fields": [{"target_base_metric_name": "alias_field_name", "source_field": "log_obj.numeric_field", "aggregations": [{"enabled": true, "agg_type": "samples", "target_metric_name": "alias_field_name_agg_func", "samples": {"sample_type": "max"}}]}], "type": "logs2metrics", "is_internal": true, "logs_query": {"lucene": "log_obj.numeric_field: [50 TO 100]", "alias": "new_query", "applicationname_filters": ["ApplicationnameFilters"], "subsystemname_filters": ["SubsystemnameFilters"], "severity_filters": ["critical"]}}`)
				}))
			})
			It(`Invoke ReplaceE2m successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("logs")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				event2MetricPrototypeModel.Name = core.StringPtr("test em2")
				event2MetricPrototypeModel.Description = core.StringPtr("Test e2m updated")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(1))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel

				// Construct an instance of the ReplaceE2mOptions model
				replaceE2mOptionsModel := new(logsv0.ReplaceE2mOptions)
				replaceE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				replaceE2mOptionsModel.Event2MetricPrototype = event2MetricPrototypeModel
				replaceE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ReplaceE2mWithContext(ctx, replaceE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ReplaceE2m(replaceE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ReplaceE2mWithContext(ctx, replaceE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceE2mPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09", "name": "Service_catalog_latency", "description": "avg and max the latency of catalog service", "create_time": "2022-06-30T12:30:00Z'", "update_time": "2022-06-30T12:30:00Z'", "permutations": {"limit": 30000, "has_exceeded_limit": true}, "metric_labels": [{"target_label": "alias_label_name", "source_field": "log_obj.string_value"}], "metric_fields": [{"target_base_metric_name": "alias_field_name", "source_field": "log_obj.numeric_field", "aggregations": [{"enabled": true, "agg_type": "samples", "target_metric_name": "alias_field_name_agg_func", "samples": {"sample_type": "max"}}]}], "type": "logs2metrics", "is_internal": true, "logs_query": {"lucene": "log_obj.numeric_field: [50 TO 100]", "alias": "new_query", "applicationname_filters": ["ApplicationnameFilters"], "subsystemname_filters": ["SubsystemnameFilters"], "severity_filters": ["critical"]}}`)
				}))
			})
			It(`Invoke ReplaceE2m successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ReplaceE2m(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("logs")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				event2MetricPrototypeModel.Name = core.StringPtr("test em2")
				event2MetricPrototypeModel.Description = core.StringPtr("Test e2m updated")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(1))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel

				// Construct an instance of the ReplaceE2mOptions model
				replaceE2mOptionsModel := new(logsv0.ReplaceE2mOptions)
				replaceE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				replaceE2mOptionsModel.Event2MetricPrototype = event2MetricPrototypeModel
				replaceE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ReplaceE2m(replaceE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceE2m with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("logs")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				event2MetricPrototypeModel.Name = core.StringPtr("test em2")
				event2MetricPrototypeModel.Description = core.StringPtr("Test e2m updated")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(1))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel

				// Construct an instance of the ReplaceE2mOptions model
				replaceE2mOptionsModel := new(logsv0.ReplaceE2mOptions)
				replaceE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				replaceE2mOptionsModel.Event2MetricPrototype = event2MetricPrototypeModel
				replaceE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ReplaceE2m(replaceE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceE2mOptions model with no property values
				replaceE2mOptionsModelNew := new(logsv0.ReplaceE2mOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.ReplaceE2m(replaceE2mOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceE2m successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("logs")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				event2MetricPrototypeModel.Name = core.StringPtr("test em2")
				event2MetricPrototypeModel.Description = core.StringPtr("Test e2m updated")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(1))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel

				// Construct an instance of the ReplaceE2mOptions model
				replaceE2mOptionsModel := new(logsv0.ReplaceE2mOptions)
				replaceE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				replaceE2mOptionsModel.Event2MetricPrototype = event2MetricPrototypeModel
				replaceE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ReplaceE2m(replaceE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteE2m(deleteE2mOptions *DeleteE2mOptions)`, func() {
		deleteE2mPath := "/v1/events2metrics/d6a3658e-78d2-47d0-9b81-b2c551f01b09"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteE2mPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteE2m successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := logsService.DeleteE2m(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteE2mOptions model
				deleteE2mOptionsModel := new(logsv0.DeleteE2mOptions)
				deleteE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				deleteE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = logsService.DeleteE2m(deleteE2mOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteE2m with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the DeleteE2mOptions model
				deleteE2mOptionsModel := new(logsv0.DeleteE2mOptions)
				deleteE2mOptionsModel.ID = core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				deleteE2mOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := logsService.DeleteE2m(deleteE2mOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteE2mOptions model with no property values
				deleteE2mOptionsModelNew := new(logsv0.DeleteE2mOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = logsService.DeleteE2m(deleteE2mOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListViews(listViewsOptions *ListViewsOptions) - Operation response error`, func() {
		listViewsPath := "/v1/views"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listViewsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListViews with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListViewsOptions model
				listViewsOptionsModel := new(logsv0.ListViewsOptions)
				listViewsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ListViews(listViewsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ListViews(listViewsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListViews(listViewsOptions *ListViewsOptions)`, func() {
		listViewsPath := "/v1/views"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listViewsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"views": [{"id": 52, "name": "Logs view", "search_query": {"query": "error"}, "time_selection": {"quick_selection": {"caption": "Last hour", "seconds": 3600}}, "filters": {"filters": [{"name": "applicationName", "selected_values": {"mapKey": true}}]}, "folder_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}]}`)
				}))
			})
			It(`Invoke ListViews successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ListViewsOptions model
				listViewsOptionsModel := new(logsv0.ListViewsOptions)
				listViewsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ListViewsWithContext(ctx, listViewsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ListViews(listViewsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ListViewsWithContext(ctx, listViewsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listViewsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"views": [{"id": 52, "name": "Logs view", "search_query": {"query": "error"}, "time_selection": {"quick_selection": {"caption": "Last hour", "seconds": 3600}}, "filters": {"filters": [{"name": "applicationName", "selected_values": {"mapKey": true}}]}, "folder_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}]}`)
				}))
			})
			It(`Invoke ListViews successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ListViews(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListViewsOptions model
				listViewsOptionsModel := new(logsv0.ListViewsOptions)
				listViewsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ListViews(listViewsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListViews with error: Operation request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListViewsOptions model
				listViewsOptionsModel := new(logsv0.ListViewsOptions)
				listViewsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ListViews(listViewsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListViews successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListViewsOptions model
				listViewsOptionsModel := new(logsv0.ListViewsOptions)
				listViewsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ListViews(listViewsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateView(createViewOptions *CreateViewOptions) - Operation response error`, func() {
		createViewPath := "/v1/views"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createViewPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateView with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs")

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}

				// Construct an instance of the CreateViewOptions model
				createViewOptionsModel := new(logsv0.CreateViewOptions)
				createViewOptionsModel.Name = core.StringPtr("Logs view")
				createViewOptionsModel.SearchQuery = apisViewsV1SearchQueryModel
				createViewOptionsModel.TimeSelection = apisViewsV1TimeSelectionModel
				createViewOptionsModel.Filters = apisViewsV1SelectedFiltersModel
				createViewOptionsModel.FolderID = CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
				createViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.CreateView(createViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.CreateView(createViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateView(createViewOptions *CreateViewOptions)`, func() {
		createViewPath := "/v1/views"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createViewPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": 52, "name": "Logs view", "search_query": {"query": "error"}, "time_selection": {"quick_selection": {"caption": "Last hour", "seconds": 3600}}, "filters": {"filters": [{"name": "applicationName", "selected_values": {"mapKey": true}}]}, "folder_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}`)
				}))
			})
			It(`Invoke CreateView successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs")

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}

				// Construct an instance of the CreateViewOptions model
				createViewOptionsModel := new(logsv0.CreateViewOptions)
				createViewOptionsModel.Name = core.StringPtr("Logs view")
				createViewOptionsModel.SearchQuery = apisViewsV1SearchQueryModel
				createViewOptionsModel.TimeSelection = apisViewsV1TimeSelectionModel
				createViewOptionsModel.Filters = apisViewsV1SelectedFiltersModel
				createViewOptionsModel.FolderID = CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
				createViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.CreateViewWithContext(ctx, createViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.CreateView(createViewOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.CreateViewWithContext(ctx, createViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createViewPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": 52, "name": "Logs view", "search_query": {"query": "error"}, "time_selection": {"quick_selection": {"caption": "Last hour", "seconds": 3600}}, "filters": {"filters": [{"name": "applicationName", "selected_values": {"mapKey": true}}]}, "folder_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}`)
				}))
			})
			It(`Invoke CreateView successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.CreateView(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs")

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}

				// Construct an instance of the CreateViewOptions model
				createViewOptionsModel := new(logsv0.CreateViewOptions)
				createViewOptionsModel.Name = core.StringPtr("Logs view")
				createViewOptionsModel.SearchQuery = apisViewsV1SearchQueryModel
				createViewOptionsModel.TimeSelection = apisViewsV1TimeSelectionModel
				createViewOptionsModel.Filters = apisViewsV1SelectedFiltersModel
				createViewOptionsModel.FolderID = CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
				createViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.CreateView(createViewOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateView with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs")

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}

				// Construct an instance of the CreateViewOptions model
				createViewOptionsModel := new(logsv0.CreateViewOptions)
				createViewOptionsModel.Name = core.StringPtr("Logs view")
				createViewOptionsModel.SearchQuery = apisViewsV1SearchQueryModel
				createViewOptionsModel.TimeSelection = apisViewsV1TimeSelectionModel
				createViewOptionsModel.Filters = apisViewsV1SelectedFiltersModel
				createViewOptionsModel.FolderID = CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
				createViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.CreateView(createViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateViewOptions model with no property values
				createViewOptionsModelNew := new(logsv0.CreateViewOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.CreateView(createViewOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateView successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs")

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}

				// Construct an instance of the CreateViewOptions model
				createViewOptionsModel := new(logsv0.CreateViewOptions)
				createViewOptionsModel.Name = core.StringPtr("Logs view")
				createViewOptionsModel.SearchQuery = apisViewsV1SearchQueryModel
				createViewOptionsModel.TimeSelection = apisViewsV1TimeSelectionModel
				createViewOptionsModel.Filters = apisViewsV1SelectedFiltersModel
				createViewOptionsModel.FolderID = CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
				createViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.CreateView(createViewOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetView(getViewOptions *GetViewOptions) - Operation response error`, func() {
		getViewPath := "/v1/views/52"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getViewPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetView with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetViewOptions model
				getViewOptionsModel := new(logsv0.GetViewOptions)
				getViewOptionsModel.ID = core.Int64Ptr(int64(52))
				getViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.GetView(getViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.GetView(getViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetView(getViewOptions *GetViewOptions)`, func() {
		getViewPath := "/v1/views/52"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getViewPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 52, "name": "Logs view", "search_query": {"query": "error"}, "time_selection": {"quick_selection": {"caption": "Last hour", "seconds": 3600}}, "filters": {"filters": [{"name": "applicationName", "selected_values": {"mapKey": true}}]}, "folder_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}`)
				}))
			})
			It(`Invoke GetView successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the GetViewOptions model
				getViewOptionsModel := new(logsv0.GetViewOptions)
				getViewOptionsModel.ID = core.Int64Ptr(int64(52))
				getViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.GetViewWithContext(ctx, getViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.GetView(getViewOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.GetViewWithContext(ctx, getViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getViewPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 52, "name": "Logs view", "search_query": {"query": "error"}, "time_selection": {"quick_selection": {"caption": "Last hour", "seconds": 3600}}, "filters": {"filters": [{"name": "applicationName", "selected_values": {"mapKey": true}}]}, "folder_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}`)
				}))
			})
			It(`Invoke GetView successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.GetView(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetViewOptions model
				getViewOptionsModel := new(logsv0.GetViewOptions)
				getViewOptionsModel.ID = core.Int64Ptr(int64(52))
				getViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.GetView(getViewOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetView with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetViewOptions model
				getViewOptionsModel := new(logsv0.GetViewOptions)
				getViewOptionsModel.ID = core.Int64Ptr(int64(52))
				getViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.GetView(getViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetViewOptions model with no property values
				getViewOptionsModelNew := new(logsv0.GetViewOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.GetView(getViewOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetView successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetViewOptions model
				getViewOptionsModel := new(logsv0.GetViewOptions)
				getViewOptionsModel.ID = core.Int64Ptr(int64(52))
				getViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.GetView(getViewOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceView(replaceViewOptions *ReplaceViewOptions) - Operation response error`, func() {
		replaceViewPath := "/v1/views/52"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceViewPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceView with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs new")

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}

				// Construct an instance of the ReplaceViewOptions model
				replaceViewOptionsModel := new(logsv0.ReplaceViewOptions)
				replaceViewOptionsModel.ID = core.Int64Ptr(int64(52))
				replaceViewOptionsModel.Name = core.StringPtr("Logs view")
				replaceViewOptionsModel.SearchQuery = apisViewsV1SearchQueryModel
				replaceViewOptionsModel.TimeSelection = apisViewsV1TimeSelectionModel
				replaceViewOptionsModel.Filters = apisViewsV1SelectedFiltersModel
				replaceViewOptionsModel.FolderID = CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
				replaceViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ReplaceView(replaceViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ReplaceView(replaceViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceView(replaceViewOptions *ReplaceViewOptions)`, func() {
		replaceViewPath := "/v1/views/52"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceViewPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 52, "name": "Logs view", "search_query": {"query": "error"}, "time_selection": {"quick_selection": {"caption": "Last hour", "seconds": 3600}}, "filters": {"filters": [{"name": "applicationName", "selected_values": {"mapKey": true}}]}, "folder_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}`)
				}))
			})
			It(`Invoke ReplaceView successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs new")

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}

				// Construct an instance of the ReplaceViewOptions model
				replaceViewOptionsModel := new(logsv0.ReplaceViewOptions)
				replaceViewOptionsModel.ID = core.Int64Ptr(int64(52))
				replaceViewOptionsModel.Name = core.StringPtr("Logs view")
				replaceViewOptionsModel.SearchQuery = apisViewsV1SearchQueryModel
				replaceViewOptionsModel.TimeSelection = apisViewsV1TimeSelectionModel
				replaceViewOptionsModel.Filters = apisViewsV1SelectedFiltersModel
				replaceViewOptionsModel.FolderID = CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
				replaceViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ReplaceViewWithContext(ctx, replaceViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ReplaceView(replaceViewOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ReplaceViewWithContext(ctx, replaceViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceViewPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": 52, "name": "Logs view", "search_query": {"query": "error"}, "time_selection": {"quick_selection": {"caption": "Last hour", "seconds": 3600}}, "filters": {"filters": [{"name": "applicationName", "selected_values": {"mapKey": true}}]}, "folder_id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"}`)
				}))
			})
			It(`Invoke ReplaceView successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ReplaceView(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs new")

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}

				// Construct an instance of the ReplaceViewOptions model
				replaceViewOptionsModel := new(logsv0.ReplaceViewOptions)
				replaceViewOptionsModel.ID = core.Int64Ptr(int64(52))
				replaceViewOptionsModel.Name = core.StringPtr("Logs view")
				replaceViewOptionsModel.SearchQuery = apisViewsV1SearchQueryModel
				replaceViewOptionsModel.TimeSelection = apisViewsV1TimeSelectionModel
				replaceViewOptionsModel.Filters = apisViewsV1SelectedFiltersModel
				replaceViewOptionsModel.FolderID = CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
				replaceViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ReplaceView(replaceViewOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceView with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs new")

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}

				// Construct an instance of the ReplaceViewOptions model
				replaceViewOptionsModel := new(logsv0.ReplaceViewOptions)
				replaceViewOptionsModel.ID = core.Int64Ptr(int64(52))
				replaceViewOptionsModel.Name = core.StringPtr("Logs view")
				replaceViewOptionsModel.SearchQuery = apisViewsV1SearchQueryModel
				replaceViewOptionsModel.TimeSelection = apisViewsV1TimeSelectionModel
				replaceViewOptionsModel.Filters = apisViewsV1SelectedFiltersModel
				replaceViewOptionsModel.FolderID = CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
				replaceViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ReplaceView(replaceViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceViewOptions model with no property values
				replaceViewOptionsModelNew := new(logsv0.ReplaceViewOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.ReplaceView(replaceViewOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceView successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs new")

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}

				// Construct an instance of the ReplaceViewOptions model
				replaceViewOptionsModel := new(logsv0.ReplaceViewOptions)
				replaceViewOptionsModel.ID = core.Int64Ptr(int64(52))
				replaceViewOptionsModel.Name = core.StringPtr("Logs view")
				replaceViewOptionsModel.SearchQuery = apisViewsV1SearchQueryModel
				replaceViewOptionsModel.TimeSelection = apisViewsV1TimeSelectionModel
				replaceViewOptionsModel.Filters = apisViewsV1SelectedFiltersModel
				replaceViewOptionsModel.FolderID = CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
				replaceViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ReplaceView(replaceViewOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteView(deleteViewOptions *DeleteViewOptions)`, func() {
		deleteViewPath := "/v1/views/52"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteViewPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteView successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := logsService.DeleteView(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteViewOptions model
				deleteViewOptionsModel := new(logsv0.DeleteViewOptions)
				deleteViewOptionsModel.ID = core.Int64Ptr(int64(52))
				deleteViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = logsService.DeleteView(deleteViewOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteView with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the DeleteViewOptions model
				deleteViewOptionsModel := new(logsv0.DeleteViewOptions)
				deleteViewOptionsModel.ID = core.Int64Ptr(int64(52))
				deleteViewOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := logsService.DeleteView(deleteViewOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteViewOptions model with no property values
				deleteViewOptionsModelNew := new(logsv0.DeleteViewOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = logsService.DeleteView(deleteViewOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListViewFolders(listViewFoldersOptions *ListViewFoldersOptions) - Operation response error`, func() {
		listViewFoldersPath := "/v1/view_folders"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listViewFoldersPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListViewFolders with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListViewFoldersOptions model
				listViewFoldersOptionsModel := new(logsv0.ListViewFoldersOptions)
				listViewFoldersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ListViewFolders(listViewFoldersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ListViewFolders(listViewFoldersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListViewFolders(listViewFoldersOptions *ListViewFoldersOptions)`, func() {
		listViewFoldersPath := "/v1/view_folders"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listViewFoldersPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"view_folders": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder"}]}`)
				}))
			})
			It(`Invoke ListViewFolders successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ListViewFoldersOptions model
				listViewFoldersOptionsModel := new(logsv0.ListViewFoldersOptions)
				listViewFoldersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ListViewFoldersWithContext(ctx, listViewFoldersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ListViewFolders(listViewFoldersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ListViewFoldersWithContext(ctx, listViewFoldersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listViewFoldersPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"view_folders": [{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder"}]}`)
				}))
			})
			It(`Invoke ListViewFolders successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ListViewFolders(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListViewFoldersOptions model
				listViewFoldersOptionsModel := new(logsv0.ListViewFoldersOptions)
				listViewFoldersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ListViewFolders(listViewFoldersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListViewFolders with error: Operation request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListViewFoldersOptions model
				listViewFoldersOptionsModel := new(logsv0.ListViewFoldersOptions)
				listViewFoldersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ListViewFolders(listViewFoldersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListViewFolders successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ListViewFoldersOptions model
				listViewFoldersOptionsModel := new(logsv0.ListViewFoldersOptions)
				listViewFoldersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ListViewFolders(listViewFoldersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateViewFolder(createViewFolderOptions *CreateViewFolderOptions) - Operation response error`, func() {
		createViewFolderPath := "/v1/view_folders"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createViewFolderPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateViewFolder with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the CreateViewFolderOptions model
				createViewFolderOptionsModel := new(logsv0.CreateViewFolderOptions)
				createViewFolderOptionsModel.Name = core.StringPtr("My Folder")
				createViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.CreateViewFolder(createViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.CreateViewFolder(createViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateViewFolder(createViewFolderOptions *CreateViewFolderOptions)`, func() {
		createViewFolderPath := "/v1/view_folders"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createViewFolderPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder"}`)
				}))
			})
			It(`Invoke CreateViewFolder successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the CreateViewFolderOptions model
				createViewFolderOptionsModel := new(logsv0.CreateViewFolderOptions)
				createViewFolderOptionsModel.Name = core.StringPtr("My Folder")
				createViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.CreateViewFolderWithContext(ctx, createViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.CreateViewFolder(createViewFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.CreateViewFolderWithContext(ctx, createViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createViewFolderPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder"}`)
				}))
			})
			It(`Invoke CreateViewFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.CreateViewFolder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateViewFolderOptions model
				createViewFolderOptionsModel := new(logsv0.CreateViewFolderOptions)
				createViewFolderOptionsModel.Name = core.StringPtr("My Folder")
				createViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.CreateViewFolder(createViewFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateViewFolder with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the CreateViewFolderOptions model
				createViewFolderOptionsModel := new(logsv0.CreateViewFolderOptions)
				createViewFolderOptionsModel.Name = core.StringPtr("My Folder")
				createViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.CreateViewFolder(createViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateViewFolderOptions model with no property values
				createViewFolderOptionsModelNew := new(logsv0.CreateViewFolderOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.CreateViewFolder(createViewFolderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateViewFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the CreateViewFolderOptions model
				createViewFolderOptionsModel := new(logsv0.CreateViewFolderOptions)
				createViewFolderOptionsModel.Name = core.StringPtr("My Folder")
				createViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.CreateViewFolder(createViewFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetViewFolder(getViewFolderOptions *GetViewFolderOptions) - Operation response error`, func() {
		getViewFolderPath := "/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getViewFolderPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetViewFolder with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetViewFolderOptions model
				getViewFolderOptionsModel := new(logsv0.GetViewFolderOptions)
				getViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.GetViewFolder(getViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.GetViewFolder(getViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetViewFolder(getViewFolderOptions *GetViewFolderOptions)`, func() {
		getViewFolderPath := "/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getViewFolderPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder"}`)
				}))
			})
			It(`Invoke GetViewFolder successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the GetViewFolderOptions model
				getViewFolderOptionsModel := new(logsv0.GetViewFolderOptions)
				getViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.GetViewFolderWithContext(ctx, getViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.GetViewFolder(getViewFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.GetViewFolderWithContext(ctx, getViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getViewFolderPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder"}`)
				}))
			})
			It(`Invoke GetViewFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.GetViewFolder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetViewFolderOptions model
				getViewFolderOptionsModel := new(logsv0.GetViewFolderOptions)
				getViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.GetViewFolder(getViewFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetViewFolder with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetViewFolderOptions model
				getViewFolderOptionsModel := new(logsv0.GetViewFolderOptions)
				getViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.GetViewFolder(getViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetViewFolderOptions model with no property values
				getViewFolderOptionsModelNew := new(logsv0.GetViewFolderOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.GetViewFolder(getViewFolderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetViewFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the GetViewFolderOptions model
				getViewFolderOptionsModel := new(logsv0.GetViewFolderOptions)
				getViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.GetViewFolder(getViewFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceViewFolder(replaceViewFolderOptions *ReplaceViewFolderOptions) - Operation response error`, func() {
		replaceViewFolderPath := "/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceViewFolderPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceViewFolder with error: Operation response processing error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ReplaceViewFolderOptions model
				replaceViewFolderOptionsModel := new(logsv0.ReplaceViewFolderOptions)
				replaceViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceViewFolderOptionsModel.Name = core.StringPtr("My Folder")
				replaceViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := logsService.ReplaceViewFolder(replaceViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				logsService.EnableRetries(0, 0)
				result, response, operationErr = logsService.ReplaceViewFolder(replaceViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceViewFolder(replaceViewFolderOptions *ReplaceViewFolderOptions)`, func() {
		replaceViewFolderPath := "/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceViewFolderPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder"}`)
				}))
			})
			It(`Invoke ReplaceViewFolder successfully with retries`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())
				logsService.EnableRetries(0, 0)

				// Construct an instance of the ReplaceViewFolderOptions model
				replaceViewFolderOptionsModel := new(logsv0.ReplaceViewFolderOptions)
				replaceViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceViewFolderOptionsModel.Name = core.StringPtr("My Folder")
				replaceViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := logsService.ReplaceViewFolderWithContext(ctx, replaceViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				logsService.DisableRetries()
				result, response, operationErr := logsService.ReplaceViewFolder(replaceViewFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = logsService.ReplaceViewFolderWithContext(ctx, replaceViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceViewFolderPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "3dc02998-0b50-4ea8-b68a-4779d716fa1f", "name": "My Folder"}`)
				}))
			})
			It(`Invoke ReplaceViewFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := logsService.ReplaceViewFolder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ReplaceViewFolderOptions model
				replaceViewFolderOptionsModel := new(logsv0.ReplaceViewFolderOptions)
				replaceViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceViewFolderOptionsModel.Name = core.StringPtr("My Folder")
				replaceViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = logsService.ReplaceViewFolder(replaceViewFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceViewFolder with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ReplaceViewFolderOptions model
				replaceViewFolderOptionsModel := new(logsv0.ReplaceViewFolderOptions)
				replaceViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceViewFolderOptionsModel.Name = core.StringPtr("My Folder")
				replaceViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := logsService.ReplaceViewFolder(replaceViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceViewFolderOptions model with no property values
				replaceViewFolderOptionsModelNew := new(logsv0.ReplaceViewFolderOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = logsService.ReplaceViewFolder(replaceViewFolderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceViewFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the ReplaceViewFolderOptions model
				replaceViewFolderOptionsModel := new(logsv0.ReplaceViewFolderOptions)
				replaceViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceViewFolderOptionsModel.Name = core.StringPtr("My Folder")
				replaceViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := logsService.ReplaceViewFolder(replaceViewFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteViewFolder(deleteViewFolderOptions *DeleteViewFolderOptions)`, func() {
		deleteViewFolderPath := "/v1/view_folders/3dc02998-0b50-4ea8-b68a-4779d716fa1f"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteViewFolderPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteViewFolder successfully`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := logsService.DeleteViewFolder(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteViewFolderOptions model
				deleteViewFolderOptionsModel := new(logsv0.DeleteViewFolderOptions)
				deleteViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = logsService.DeleteViewFolder(deleteViewFolderOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteViewFolder with error: Operation validation and request error`, func() {
				logsService, serviceErr := logsv0.NewLogsV0(&logsv0.LogsV0Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(logsService).ToNot(BeNil())

				// Construct an instance of the DeleteViewFolderOptions model
				deleteViewFolderOptionsModel := new(logsv0.DeleteViewFolderOptions)
				deleteViewFolderOptionsModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteViewFolderOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := logsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := logsService.DeleteViewFolder(deleteViewFolderOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteViewFolderOptions model with no property values
				deleteViewFolderOptionsModelNew := new(logsv0.DeleteViewFolderOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = logsService.DeleteViewFolder(deleteViewFolderOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			logsService, _ := logsv0.NewLogsV0(&logsv0.LogsV0Options{
				URL:           "http://logsv0modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
			})
			It(`Invoke NewAlertsV1AlertActiveTimeframe successfully`, func() {
				daysOfWeek := []string{"sunday"}
				var rangeVar *logsv0.AlertsV1TimeRange = nil
				_, err := logsService.NewAlertsV1AlertActiveTimeframe(daysOfWeek, rangeVar)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewAlertsV1AlertActiveWhen successfully`, func() {
				timeframes := []logsv0.AlertsV1AlertActiveTimeframe{}
				_model, err := logsService.NewAlertsV1AlertActiveWhen(timeframes)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAlertsV1AlertFiltersRatioAlert successfully`, func() {
				alias := "TopLevelAlert"
				_model, err := logsService.NewAlertsV1AlertFiltersRatioAlert(alias)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAlertsV1MetricAlertConditionParameters successfully`, func() {
				metricField := "cpu_usage"
				metricSource := "prometheus"
				arithmeticOperator := "percentile"
				_model, err := logsService.NewAlertsV1MetricAlertConditionParameters(metricField, metricSource, arithmeticOperator)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAlertsV1MetricAlertPromqlConditionParameters successfully`, func() {
				promqlText := "sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)"
				sampleThresholdPercentage := int64(100)
				_model, err := logsService.NewAlertsV1MetricAlertPromqlConditionParameters(promqlText, sampleThresholdPercentage)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAlertsV1TimeRange successfully`, func() {
				var start *logsv0.AlertsV1Time = nil
				var end *logsv0.AlertsV1Time = nil
				_, err := logsService.NewAlertsV1TimeRange(start, end)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewAlertsV2ConditionParameters successfully`, func() {
				threshold := float64(0.4)
				timeframe := "timeframe_36_h"
				_model, err := logsService.NewAlertsV2ConditionParameters(threshold, timeframe)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAlertsV2LessThanCondition successfully`, func() {
				var parameters *logsv0.AlertsV2ConditionParameters = nil
				_, err := logsService.NewAlertsV2LessThanCondition(parameters)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewAlertsV2LessThanUsualCondition successfully`, func() {
				var parameters *logsv0.AlertsV2ConditionParameters = nil
				_, err := logsService.NewAlertsV2LessThanUsualCondition(parameters)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewAlertsV2MoreThanCondition successfully`, func() {
				var parameters *logsv0.AlertsV2ConditionParameters = nil
				_, err := logsService.NewAlertsV2MoreThanCondition(parameters)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewAlertsV2MoreThanUsualCondition successfully`, func() {
				var parameters *logsv0.AlertsV2ConditionParameters = nil
				_, err := logsService.NewAlertsV2MoreThanUsualCondition(parameters)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewAlertsV2NewValueCondition successfully`, func() {
				var parameters *logsv0.AlertsV2ConditionParameters = nil
				_, err := logsService.NewAlertsV2NewValueCondition(parameters)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewAlertsV2UniqueCountCondition successfully`, func() {
				var parameters *logsv0.AlertsV2ConditionParameters = nil
				_, err := logsService.NewAlertsV2UniqueCountCondition(parameters)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstAnnotation successfully`, func() {
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				name := "Deployments"
				enabled := true
				var source logsv0.ApisDashboardsV1AstAnnotationSourceIntf = nil
				_, err := logsService.NewApisDashboardsV1AstAnnotation(id, name, enabled, source)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstAnnotationLogsSource successfully`, func() {
				var luceneQuery *logsv0.ApisDashboardsV1CommonLuceneQuery = nil
				var strategy logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyIntf = nil
				_, err := logsService.NewApisDashboardsV1AstAnnotationLogsSource(luceneQuery, strategy)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstAnnotationLogsSourceStrategyDuration successfully`, func() {
				var startTimestampField *logsv0.ApisDashboardsV1CommonObservationField = nil
				var durationField *logsv0.ApisDashboardsV1CommonObservationField = nil
				_, err := logsService.NewApisDashboardsV1AstAnnotationLogsSourceStrategyDuration(startTimestampField, durationField)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstAnnotationLogsSourceStrategyInstant successfully`, func() {
				var timestampField *logsv0.ApisDashboardsV1CommonObservationField = nil
				_, err := logsService.NewApisDashboardsV1AstAnnotationLogsSourceStrategyInstant(timestampField)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstAnnotationLogsSourceStrategyRange successfully`, func() {
				var startTimestampField *logsv0.ApisDashboardsV1CommonObservationField = nil
				var endTimestampField *logsv0.ApisDashboardsV1CommonObservationField = nil
				_, err := logsService.NewApisDashboardsV1AstAnnotationLogsSourceStrategyRange(startTimestampField, endTimestampField)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstMultiSelect successfully`, func() {
				var source logsv0.ApisDashboardsV1AstMultiSelectSourceIntf = nil
				var selection logsv0.ApisDashboardsV1AstMultiSelectSelectionIntf = nil
				valuesOrderDirection := "desc"
				_, err := logsService.NewApisDashboardsV1AstMultiSelect(source, selection, valuesOrderDirection)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstMultiSelectConstantListSource successfully`, func() {
				values := []string{"production", "staging"}
				_model, err := logsService.NewApisDashboardsV1AstMultiSelectConstantListSource(values)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstMultiSelectLogsPathSource successfully`, func() {
				var observationField *logsv0.ApisDashboardsV1CommonObservationField = nil
				_, err := logsService.NewApisDashboardsV1AstMultiSelectLogsPathSource(observationField)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstMultiSelectMetricLabelSource successfully`, func() {
				metricName := "http_requests_total"
				label := "service"
				_model, err := logsService.NewApisDashboardsV1AstMultiSelectMetricLabelSource(metricName, label)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstRow successfully`, func() {
				var id *logsv0.ApisDashboardsV1UUID = nil
				var appearance *logsv0.ApisDashboardsV1AstRowAppearance = nil
				_, err := logsService.NewApisDashboardsV1AstRow(id, appearance)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstRowAppearance successfully`, func() {
				height := int64(5)
				_model, err := logsService.NewApisDashboardsV1AstRowAppearance(height)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstSection successfully`, func() {
				var id *logsv0.ApisDashboardsV1UUID = nil
				_, err := logsService.NewApisDashboardsV1AstSection(id)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstVariable successfully`, func() {
				name := "service_name"
				var definition logsv0.ApisDashboardsV1AstVariableDefinitionIntf = nil
				displayName := "Service Name"
				_, err := logsService.NewApisDashboardsV1AstVariable(name, definition, displayName)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidget successfully`, func() {
				var id *logsv0.ApisDashboardsV1UUID = nil
				title := "Response time"
				var definition logsv0.ApisDashboardsV1AstWidgetDefinitionIntf = nil
				_, err := logsService.NewApisDashboardsV1AstWidget(id, title, definition)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsBarChart successfully`, func() {
				var query logsv0.ApisDashboardsV1AstWidgetsBarChartQueryIntf = nil
				maxBarsPerChart := int64(10)
				groupNameTemplate := "{{severity}}"
				var stackDefinition *logsv0.ApisDashboardsV1AstWidgetsBarChartStackDefinition = nil
				scaleType := "logarithmic"
				var colorsBy logsv0.ApisDashboardsV1AstWidgetsCommonColorsByIntf = nil
				var xAxis logsv0.ApisDashboardsV1AstWidgetsBarChartXAxisIntf = nil
				unit := "usd"
				sortBy := "name"
				colorScheme := "classic"
				_, err := logsService.NewApisDashboardsV1AstWidgetsBarChart(query, maxBarsPerChart, groupNameTemplate, stackDefinition, scaleType, colorsBy, xAxis, unit, sortBy, colorScheme)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsBarChartDataprimeQuery successfully`, func() {
				var dataprimeQuery *logsv0.ApisDashboardsV1CommonDataprimeQuery = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsBarChartDataprimeQuery(dataprimeQuery)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsBarChartLogsQuery successfully`, func() {
				var aggregation logsv0.ApisDashboardsV1CommonLogsAggregationIntf = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsBarChartLogsQuery(aggregation)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsCommonLegend successfully`, func() {
				isVisible := true
				groupByQuery := true
				_model, err := logsService.NewApisDashboardsV1AstWidgetsCommonLegend(isVisible, groupByQuery)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsDataTable successfully`, func() {
				var query logsv0.ApisDashboardsV1AstWidgetsDataTableQueryIntf = nil
				resultsPerPage := int64(10)
				rowStyle := "list"
				_, err := logsService.NewApisDashboardsV1AstWidgetsDataTable(query, resultsPerPage, rowStyle)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsDataTableColumn successfully`, func() {
				field := "coralogix.metadata.applicationName"
				_model, err := logsService.NewApisDashboardsV1AstWidgetsDataTableColumn(field)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsDataTableDataprimeQuery successfully`, func() {
				var dataprimeQuery *logsv0.ApisDashboardsV1CommonDataprimeQuery = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsDataTableDataprimeQuery(dataprimeQuery)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation successfully`, func() {
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				name := "count"
				isVisible := true
				var aggregation logsv0.ApisDashboardsV1CommonLogsAggregationIntf = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation(id, name, isVisible, aggregation)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsDataTableMetricsQuery successfully`, func() {
				var promqlQuery *logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsDataTableMetricsQuery(promqlQuery)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsGauge successfully`, func() {
				var query logsv0.ApisDashboardsV1AstWidgetsGaugeQueryIntf = nil
				min := float64(0)
				max := float64(100)
				showInnerArc := true
				showOuterArc := true
				unit := "usd"
				thresholdBy := "background"
				_, err := logsService.NewApisDashboardsV1AstWidgetsGauge(query, min, max, showInnerArc, showOuterArc, unit, thresholdBy)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsGaugeDataprimeQuery successfully`, func() {
				var dataprimeQuery *logsv0.ApisDashboardsV1CommonDataprimeQuery = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsGaugeDataprimeQuery(dataprimeQuery)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsGaugeMetricsQuery successfully`, func() {
				var promqlQuery *logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery = nil
				aggregation := "sum"
				_, err := logsService.NewApisDashboardsV1AstWidgetsGaugeMetricsQuery(promqlQuery, aggregation)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsGaugeThreshold successfully`, func() {
				from := float64(0.5)
				color := "warning"
				_model, err := logsService.NewApisDashboardsV1AstWidgetsGaugeThreshold(from, color)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsHorizontalBarChart successfully`, func() {
				colorScheme := "classic"
				_model, err := logsService.NewApisDashboardsV1AstWidgetsHorizontalBarChart(colorScheme)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsLineChart successfully`, func() {
				var legend *logsv0.ApisDashboardsV1AstWidgetsCommonLegend = nil
				var tooltip *logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsLineChart(legend, tooltip)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsLineChartDataprimeQuery successfully`, func() {
				var dataprimeQuery *logsv0.ApisDashboardsV1CommonDataprimeQuery = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsLineChartDataprimeQuery(dataprimeQuery)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsLineChartQueryDefinition successfully`, func() {
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				var query logsv0.ApisDashboardsV1AstWidgetsLineChartQueryIntf = nil
				isVisible := true
				var resolution *logsv0.ApisDashboardsV1AstWidgetsLineChartResolution = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsLineChartQueryDefinition(id, query, isVisible, resolution)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsMarkdown successfully`, func() {
				markdownText := "# Database metrics"
				_model, err := logsService.NewApisDashboardsV1AstWidgetsMarkdown(markdownText)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsPieChart successfully`, func() {
				var query logsv0.ApisDashboardsV1AstWidgetsPieChartQueryIntf = nil
				maxSlicesPerChart := int64(5)
				minSlicePercentage := int64(1)
				var stackDefinition *logsv0.ApisDashboardsV1AstWidgetsPieChartStackDefinition = nil
				var labelDefinition *logsv0.ApisDashboardsV1AstWidgetsPieChartLabelDefinition = nil
				showLegend := true
				colorScheme := "classic"
				_, err := logsService.NewApisDashboardsV1AstWidgetsPieChart(query, maxSlicesPerChart, minSlicePercentage, stackDefinition, labelDefinition, showLegend, colorScheme)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsPieChartDataprimeQuery successfully`, func() {
				var dataprimeQuery *logsv0.ApisDashboardsV1CommonDataprimeQuery = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsPieChartDataprimeQuery(dataprimeQuery)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsPieChartLogsQuery successfully`, func() {
				var aggregation logsv0.ApisDashboardsV1CommonLogsAggregationIntf = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsPieChartLogsQuery(aggregation)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1AstWidgetsPieChartMetricsQuery successfully`, func() {
				var promqlQuery *logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery = nil
				_, err := logsService.NewApisDashboardsV1AstWidgetsPieChartMetricsQuery(promqlQuery)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1CommonLogsAggregationAverage successfully`, func() {
				var observationField *logsv0.ApisDashboardsV1CommonObservationField = nil
				_, err := logsService.NewApisDashboardsV1CommonLogsAggregationAverage(observationField)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1CommonLogsAggregationCountDistinct successfully`, func() {
				var observationField *logsv0.ApisDashboardsV1CommonObservationField = nil
				_, err := logsService.NewApisDashboardsV1CommonLogsAggregationCountDistinct(observationField)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1CommonLogsAggregationMax successfully`, func() {
				var observationField *logsv0.ApisDashboardsV1CommonObservationField = nil
				_, err := logsService.NewApisDashboardsV1CommonLogsAggregationMax(observationField)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1CommonLogsAggregationMin successfully`, func() {
				var observationField *logsv0.ApisDashboardsV1CommonObservationField = nil
				_, err := logsService.NewApisDashboardsV1CommonLogsAggregationMin(observationField)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1CommonLogsAggregationPercentile successfully`, func() {
				percent := float64(72.5)
				var observationField *logsv0.ApisDashboardsV1CommonObservationField = nil
				_, err := logsService.NewApisDashboardsV1CommonLogsAggregationPercentile(percent, observationField)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1CommonLogsAggregationSum successfully`, func() {
				var observationField *logsv0.ApisDashboardsV1CommonObservationField = nil
				_, err := logsService.NewApisDashboardsV1CommonLogsAggregationSum(observationField)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApisDashboardsV1UUID successfully`, func() {
				value := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				_model, err := logsService.NewApisDashboardsV1UUID(value)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisViewsV1CustomTimeSelection successfully`, func() {
				fromTime := CreateMockDateTime("2024-01-25T11:31:43.152Z")
				toTime := CreateMockDateTime("2024-01-25T11:35:43.152Z")
				_model, err := logsService.NewApisViewsV1CustomTimeSelection(fromTime, toTime)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisViewsV1Filter successfully`, func() {
				name := "applicationName"
				selectedValues := map[string]bool{"key1": true}
				_model, err := logsService.NewApisViewsV1Filter(name, selectedValues)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisViewsV1QuickTimeSelection successfully`, func() {
				caption := "Last hour"
				seconds := int64(3600)
				_model, err := logsService.NewApisViewsV1QuickTimeSelection(caption, seconds)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewApisViewsV1SearchQuery successfully`, func() {
				query := "error"
				_model, err := logsService.NewApisViewsV1SearchQuery(query)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAssignDashboardFolderOptions successfully`, func() {
				// Construct an instance of the AssignDashboardFolderOptions model
				dashboardID := "testString"
				folderID := "testString"
				assignDashboardFolderOptionsModel := logsService.NewAssignDashboardFolderOptions(dashboardID, folderID)
				assignDashboardFolderOptionsModel.SetDashboardID("testString")
				assignDashboardFolderOptionsModel.SetFolderID("testString")
				assignDashboardFolderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(assignDashboardFolderOptionsModel).ToNot(BeNil())
				Expect(assignDashboardFolderOptionsModel.DashboardID).To(Equal(core.StringPtr("testString")))
				Expect(assignDashboardFolderOptionsModel.FolderID).To(Equal(core.StringPtr("testString")))
				Expect(assignDashboardFolderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateAlertOptions successfully`, func() {
				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				Expect(alertsV1MetricAlertConditionParametersModel).ToNot(BeNil())
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)
				Expect(alertsV1MetricAlertConditionParametersModel.MetricField).To(Equal(core.StringPtr("cpu_usage")))
				Expect(alertsV1MetricAlertConditionParametersModel.MetricSource).To(Equal(core.StringPtr("prometheus")))
				Expect(alertsV1MetricAlertConditionParametersModel.ArithmeticOperator).To(Equal(core.StringPtr("percentile")))
				Expect(alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier).To(Equal(core.Int64Ptr(int64(1))))
				Expect(alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage).To(Equal(core.Int64Ptr(int64(100))))
				Expect(alertsV1MetricAlertConditionParametersModel.NonNullPercentage).To(Equal(core.Int64Ptr(int64(100))))
				Expect(alertsV1MetricAlertConditionParametersModel.SwapNullValues).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				Expect(alertsV1MetricAlertPromqlConditionParametersModel).ToNot(BeNil())
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)
				Expect(alertsV1MetricAlertPromqlConditionParametersModel.PromqlText).To(Equal(core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")))
				Expect(alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier).To(Equal(core.Int64Ptr(int64(1))))
				Expect(alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage).To(Equal(core.Int64Ptr(int64(100))))
				Expect(alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage).To(Equal(core.Int64Ptr(int64(100))))
				Expect(alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				Expect(alertsV1RelatedExtendedDataModel).ToNot(BeNil())
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)
				Expect(alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration).To(Equal(core.StringPtr("cleanup_deadman_duration_24h")))
				Expect(alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				Expect(alertsV2ConditionParametersModel).ToNot(BeNil())
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel
				Expect(alertsV2ConditionParametersModel.Threshold).To(Equal(core.Float64Ptr(float64(1))))
				Expect(alertsV2ConditionParametersModel.Timeframe).To(Equal(core.StringPtr("timeframe_10_min")))
				Expect(alertsV2ConditionParametersModel.GroupBy).To(Equal([]string{"coralogix.metadata.applicationName"}))
				Expect(alertsV2ConditionParametersModel.MetricAlertParameters).To(Equal(alertsV1MetricAlertConditionParametersModel))
				Expect(alertsV2ConditionParametersModel.MetricAlertPromqlParameters).To(Equal(alertsV1MetricAlertPromqlConditionParametersModel))
				Expect(alertsV2ConditionParametersModel.IgnoreInfinity).To(Equal(core.BoolPtr(true)))
				Expect(alertsV2ConditionParametersModel.RelativeTimeframe).To(Equal(core.StringPtr("hour_or_unspecified")))
				Expect(alertsV2ConditionParametersModel.CardinalityFields).To(Equal([]string{}))
				Expect(alertsV2ConditionParametersModel.RelatedExtendedData).To(Equal(alertsV1RelatedExtendedDataModel))

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				Expect(alertsV2MoreThanConditionModel).ToNot(BeNil())
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")
				Expect(alertsV2MoreThanConditionModel.Parameters).To(Equal(alertsV2ConditionParametersModel))
				Expect(alertsV2MoreThanConditionModel.EvaluationWindow).To(Equal(core.StringPtr("rolling_or_unspecified")))

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				Expect(alertsV2AlertConditionModel).ToNot(BeNil())
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel
				Expect(alertsV2AlertConditionModel.MoreThan).To(Equal(alertsV2MoreThanConditionModel))

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				Expect(alertsV2AlertNotificationModel).ToNot(BeNil())
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))
				Expect(alertsV2AlertNotificationModel.RetriggeringPeriodSeconds).To(Equal(core.Int64Ptr(int64(60))))
				Expect(alertsV2AlertNotificationModel.NotifyOn).To(Equal(core.StringPtr("triggered_and_resolved")))
				Expect(alertsV2AlertNotificationModel.IntegrationID).To(Equal(core.Int64Ptr(int64(123))))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				Expect(alertsV2AlertNotificationGroupsModel).ToNot(BeNil())
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}
				Expect(alertsV2AlertNotificationGroupsModel.GroupByFields).To(Equal([]string{"coralogix.metadata.applicationName"}))
				Expect(alertsV2AlertNotificationGroupsModel.Notifications).To(Equal([]logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}))

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				Expect(alertsV1AlertFiltersMetadataFiltersModel).ToNot(BeNil())
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				Expect(alertsV1AlertFiltersMetadataFiltersModel.Applications).To(Equal([]string{"CpuMonitoring", "WebApi"}))
				Expect(alertsV1AlertFiltersMetadataFiltersModel.Subsystems).To(Equal([]string{"SnapshotGenerator", "PermissionControl"}))

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				Expect(alertsV1AlertFiltersRatioAlertModel).ToNot(BeNil())
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}
				Expect(alertsV1AlertFiltersRatioAlertModel.Alias).To(Equal(core.StringPtr("TopLevelAlert")))
				Expect(alertsV1AlertFiltersRatioAlertModel.Text).To(Equal(core.StringPtr("_exists_:\"container_name\"")))
				Expect(alertsV1AlertFiltersRatioAlertModel.Severities).To(Equal([]string{"critical"}))
				Expect(alertsV1AlertFiltersRatioAlertModel.Applications).To(Equal([]string{"CpuMonitoring", "WebApi"}))
				Expect(alertsV1AlertFiltersRatioAlertModel.Subsystems).To(Equal([]string{"SnapshotGenerator", "PermissionControl"}))
				Expect(alertsV1AlertFiltersRatioAlertModel.GroupBy).To(Equal([]string{"Host", "Thread"}))

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				Expect(alertsV1AlertFiltersModel).ToNot(BeNil())
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")
				Expect(alertsV1AlertFiltersModel.Severities).To(Equal([]string{"info"}))
				Expect(alertsV1AlertFiltersModel.Metadata).To(Equal(alertsV1AlertFiltersMetadataFiltersModel))
				Expect(alertsV1AlertFiltersModel.Alias).To(Equal(core.StringPtr("monitorQuery")))
				Expect(alertsV1AlertFiltersModel.Text).To(Equal(core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")))
				Expect(alertsV1AlertFiltersModel.RatioAlerts).To(Equal([]logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}))
				Expect(alertsV1AlertFiltersModel.FilterType).To(Equal(core.StringPtr("text_or_unspecified")))

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				Expect(alertsV1DateModel).ToNot(BeNil())
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))
				Expect(alertsV1DateModel.Year).To(Equal(core.Int64Ptr(int64(2012))))
				Expect(alertsV1DateModel.Month).To(Equal(core.Int64Ptr(int64(12))))
				Expect(alertsV1DateModel.Day).To(Equal(core.Int64Ptr(int64(24))))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				Expect(alertsV1TimeModel).ToNot(BeNil())
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))
				Expect(alertsV1TimeModel.Hours).To(Equal(core.Int64Ptr(int64(18))))
				Expect(alertsV1TimeModel.Minutes).To(Equal(core.Int64Ptr(int64(30))))
				Expect(alertsV1TimeModel.Seconds).To(Equal(core.Int64Ptr(int64(0))))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				Expect(alertsV1TimeRangeModel).ToNot(BeNil())
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel
				Expect(alertsV1TimeRangeModel.Start).To(Equal(alertsV1TimeModel))
				Expect(alertsV1TimeRangeModel.End).To(Equal(alertsV1TimeModel))

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				Expect(alertsV1AlertActiveTimeframeModel).ToNot(BeNil())
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel
				Expect(alertsV1AlertActiveTimeframeModel.DaysOfWeek).To(Equal([]string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}))
				Expect(alertsV1AlertActiveTimeframeModel.Range).To(Equal(alertsV1TimeRangeModel))

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				Expect(alertsV1AlertActiveWhenModel).ToNot(BeNil())
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}
				Expect(alertsV1AlertActiveWhenModel.Timeframes).To(Equal([]logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}))

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				Expect(alertsV1MetaLabelModel).ToNot(BeNil())
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")
				Expect(alertsV1MetaLabelModel.Key).To(Equal(core.StringPtr("env")))
				Expect(alertsV1MetaLabelModel.Value).To(Equal(core.StringPtr("dev")))

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				Expect(alertsV2AlertIncidentSettingsModel).ToNot(BeNil())
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)
				Expect(alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds).To(Equal(core.Int64Ptr(int64(300))))
				Expect(alertsV2AlertIncidentSettingsModel.NotifyOn).To(Equal(core.StringPtr("triggered_only")))
				Expect(alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the CreateAlertOptions model
				createAlertOptionsName := "Test alert"
				createAlertOptionsIsActive := true
				createAlertOptionsSeverity := "info_or_unspecified"
				var createAlertOptionsCondition logsv0.AlertsV2AlertConditionIntf = nil
				createAlertOptionsNotificationGroups := []logsv0.AlertsV2AlertNotificationGroups{}
				var createAlertOptionsFilters *logsv0.AlertsV1AlertFilters = nil
				createAlertOptionsModel := logsService.NewCreateAlertOptions(createAlertOptionsName, createAlertOptionsIsActive, createAlertOptionsSeverity, createAlertOptionsCondition, createAlertOptionsNotificationGroups, createAlertOptionsFilters)
				createAlertOptionsModel.SetName("Test alert")
				createAlertOptionsModel.SetIsActive(true)
				createAlertOptionsModel.SetSeverity("info_or_unspecified")
				createAlertOptionsModel.SetCondition(alertsV2AlertConditionModel)
				createAlertOptionsModel.SetNotificationGroups([]logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel})
				createAlertOptionsModel.SetFilters(alertsV1AlertFiltersModel)
				createAlertOptionsModel.SetDescription("Alert if the number of logs reaches a threshold")
				createAlertOptionsModel.SetExpiration(alertsV1DateModel)
				createAlertOptionsModel.SetActiveWhen(alertsV1AlertActiveWhenModel)
				createAlertOptionsModel.SetNotificationPayloadFilters([]string{"testString"})
				createAlertOptionsModel.SetMetaLabels([]logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel})
				createAlertOptionsModel.SetMetaLabelsStrings([]string{})
				createAlertOptionsModel.SetIncidentSettings(alertsV2AlertIncidentSettingsModel)
				createAlertOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createAlertOptionsModel).ToNot(BeNil())
				Expect(createAlertOptionsModel.Name).To(Equal(core.StringPtr("Test alert")))
				Expect(createAlertOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(createAlertOptionsModel.Severity).To(Equal(core.StringPtr("info_or_unspecified")))
				Expect(createAlertOptionsModel.Condition).To(Equal(alertsV2AlertConditionModel))
				Expect(createAlertOptionsModel.NotificationGroups).To(Equal([]logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}))
				Expect(createAlertOptionsModel.Filters).To(Equal(alertsV1AlertFiltersModel))
				Expect(createAlertOptionsModel.Description).To(Equal(core.StringPtr("Alert if the number of logs reaches a threshold")))
				Expect(createAlertOptionsModel.Expiration).To(Equal(alertsV1DateModel))
				Expect(createAlertOptionsModel.ActiveWhen).To(Equal(alertsV1AlertActiveWhenModel))
				Expect(createAlertOptionsModel.NotificationPayloadFilters).To(Equal([]string{"testString"}))
				Expect(createAlertOptionsModel.MetaLabels).To(Equal([]logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}))
				Expect(createAlertOptionsModel.MetaLabelsStrings).To(Equal([]string{}))
				Expect(createAlertOptionsModel.IncidentSettings).To(Equal(alertsV2AlertIncidentSettingsModel))
				Expect(createAlertOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateDashboardFolderOptions successfully`, func() {
				// Construct an instance of the CreateDashboardFolderOptions model
				createDashboardFolderOptionsName := "My Folder"
				createDashboardFolderOptionsModel := logsService.NewCreateDashboardFolderOptions(createDashboardFolderOptionsName)
				createDashboardFolderOptionsModel.SetName("My Folder")
				createDashboardFolderOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				createDashboardFolderOptionsModel.SetParentID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				createDashboardFolderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDashboardFolderOptionsModel).ToNot(BeNil())
				Expect(createDashboardFolderOptionsModel.Name).To(Equal(core.StringPtr("My Folder")))
				Expect(createDashboardFolderOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(createDashboardFolderOptionsModel.ParentID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(createDashboardFolderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateDashboardOptions successfully`, func() {
				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				Expect(apisDashboardsV1UUIDModel).ToNot(BeNil())
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				Expect(apisDashboardsV1UUIDModel.Value).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				Expect(apisDashboardsV1AstRowAppearanceModel).ToNot(BeNil())
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(5))
				Expect(apisDashboardsV1AstRowAppearanceModel.Height).To(Equal(core.Int64Ptr(int64(5))))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				Expect(apisDashboardsV1AstWidgetsCommonLegendModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)
				Expect(apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible).To(Equal(core.BoolPtr(true)))
				Expect(apisDashboardsV1AstWidgetsCommonLegendModel.Columns).To(Equal([]string{"name"}))
				Expect(apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				Expect(apisDashboardsV1AstWidgetsLineChartTooltipModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("single")
				Expect(apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels).To(Equal(core.BoolPtr(true)))
				Expect(apisDashboardsV1AstWidgetsLineChartTooltipModel.Type).To(Equal(core.StringPtr("single")))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLuceneQuery model
				apisDashboardsV1AstWidgetsCommonLuceneQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLuceneQuery)
				Expect(apisDashboardsV1AstWidgetsCommonLuceneQueryModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsCommonLuceneQueryModel.Value = core.StringPtr("coralogix.metadata.applicationName:\"production\"")
				Expect(apisDashboardsV1AstWidgetsCommonLuceneQueryModel.Value).To(Equal(core.StringPtr("coralogix.metadata.applicationName:\"production\"")))

				// Construct an instance of the ApisDashboardsV1CommonLogsAggregationCountEmpty model
				apisDashboardsV1CommonLogsAggregationCountEmptyModel := new(logsv0.ApisDashboardsV1CommonLogsAggregationCountEmpty)
				Expect(apisDashboardsV1CommonLogsAggregationCountEmptyModel).ToNot(BeNil())
				apisDashboardsV1CommonLogsAggregationCountEmptyModel.SetProperty("foo", "testString")
				Expect(apisDashboardsV1CommonLogsAggregationCountEmptyModel.GetProperties()).ToNot(BeEmpty())
				Expect(apisDashboardsV1CommonLogsAggregationCountEmptyModel.GetProperty("foo")).To(Equal("testString"))

				apisDashboardsV1CommonLogsAggregationCountEmptyModel.SetProperties(nil)
				Expect(apisDashboardsV1CommonLogsAggregationCountEmptyModel.GetProperties()).To(BeEmpty())

				apisDashboardsV1CommonLogsAggregationCountEmptyModelExpectedMap := make(map[string]interface{})
				apisDashboardsV1CommonLogsAggregationCountEmptyModelExpectedMap["foo"] = "testString"
				apisDashboardsV1CommonLogsAggregationCountEmptyModel.SetProperties(apisDashboardsV1CommonLogsAggregationCountEmptyModelExpectedMap)
				apisDashboardsV1CommonLogsAggregationCountEmptyModelActualMap := apisDashboardsV1CommonLogsAggregationCountEmptyModel.GetProperties()
				Expect(apisDashboardsV1CommonLogsAggregationCountEmptyModelActualMap).To(Equal(apisDashboardsV1CommonLogsAggregationCountEmptyModelExpectedMap))

				// Construct an instance of the ApisDashboardsV1CommonLogsAggregationValueCount model
				apisDashboardsV1CommonLogsAggregationModel := new(logsv0.ApisDashboardsV1CommonLogsAggregationValueCount)
				Expect(apisDashboardsV1CommonLogsAggregationModel).ToNot(BeNil())
				apisDashboardsV1CommonLogsAggregationModel.Count = apisDashboardsV1CommonLogsAggregationCountEmptyModel
				Expect(apisDashboardsV1CommonLogsAggregationModel.Count).To(Equal(apisDashboardsV1CommonLogsAggregationCountEmptyModel))

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				Expect(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel).ToNot(BeNil())
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")
				Expect(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.GetProperties()).ToNot(BeEmpty())
				Expect(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.GetProperty("foo")).To(Equal("testString"))

				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperties(nil)
				Expect(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.GetProperties()).To(BeEmpty())

				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelExpectedMap := make(map[string]interface{})
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelExpectedMap["foo"] = "testString"
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperties(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelExpectedMap)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelActualMap := apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.GetProperties()
				Expect(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelActualMap).To(Equal(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelExpectedMap))

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				Expect(apisDashboardsV1AstFilterEqualsSelectionModel).ToNot(BeNil())
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel
				Expect(apisDashboardsV1AstFilterEqualsSelectionModel.All).To(Equal(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel))

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				Expect(apisDashboardsV1AstFilterEqualsModel).ToNot(BeNil())
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel
				Expect(apisDashboardsV1AstFilterEqualsModel.Selection).To(Equal(apisDashboardsV1AstFilterEqualsSelectionModel))

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				Expect(apisDashboardsV1AstFilterOperatorModel).ToNot(BeNil())
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel
				Expect(apisDashboardsV1AstFilterOperatorModel.Equals).To(Equal(apisDashboardsV1AstFilterEqualsModel))

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				Expect(apisDashboardsV1CommonObservationFieldModel).ToNot(BeNil())
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")
				Expect(apisDashboardsV1CommonObservationFieldModel.Keypath).To(Equal([]string{"applicationname"}))
				Expect(apisDashboardsV1CommonObservationFieldModel.Scope).To(Equal(core.StringPtr("metadata")))

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				Expect(apisDashboardsV1AstFilterLogsFilterModel).ToNot(BeNil())
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel
				Expect(apisDashboardsV1AstFilterLogsFilterModel.Operator).To(Equal(apisDashboardsV1AstFilterOperatorModel))
				Expect(apisDashboardsV1AstFilterLogsFilterModel.ObservationField).To(Equal(apisDashboardsV1CommonObservationFieldModel))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartLogsQuery model
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartLogsQuery)
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel.LuceneQuery = apisDashboardsV1AstWidgetsCommonLuceneQueryModel
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel.GroupBy = []string{"testString"}
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel.Aggregations = []logsv0.ApisDashboardsV1CommonLogsAggregationIntf{apisDashboardsV1CommonLogsAggregationModel}
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterLogsFilter{*apisDashboardsV1AstFilterLogsFilterModel}
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel.GroupBys = []logsv0.ApisDashboardsV1CommonObservationField{*apisDashboardsV1CommonObservationFieldModel}
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel.LuceneQuery).To(Equal(apisDashboardsV1AstWidgetsCommonLuceneQueryModel))
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel.GroupBy).To(Equal([]string{"testString"}))
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel.Aggregations).To(Equal([]logsv0.ApisDashboardsV1CommonLogsAggregationIntf{apisDashboardsV1CommonLogsAggregationModel}))
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel.Filters).To(Equal([]logsv0.ApisDashboardsV1AstFilterLogsFilter{*apisDashboardsV1AstFilterLogsFilterModel}))
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel.GroupBys).To(Equal([]logsv0.ApisDashboardsV1CommonObservationField{*apisDashboardsV1CommonObservationFieldModel}))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueLogs model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueLogs)
				Expect(apisDashboardsV1AstWidgetsLineChartQueryModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartQueryModel.Logs = apisDashboardsV1AstWidgetsLineChartLogsQueryModel
				Expect(apisDashboardsV1AstWidgetsLineChartQueryModel.Logs).To(Equal(apisDashboardsV1AstWidgetsLineChartLogsQueryModel))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				Expect(apisDashboardsV1AstWidgetsLineChartResolutionModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(100))
				Expect(apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval).To(Equal(core.StringPtr("1m")))
				Expect(apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented).To(Equal(core.Int64Ptr(int64(100))))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("10")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("logarithmic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("CPU usage")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query).To(Equal(apisDashboardsV1AstWidgetsLineChartQueryModel))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate).To(Equal(core.StringPtr("{{severity}}")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit).To(Equal(core.StringPtr("10")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit).To(Equal(core.StringPtr("usd")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType).To(Equal(core.StringPtr("logarithmic")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name).To(Equal(core.StringPtr("CPU usage")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible).To(Equal(core.BoolPtr(true)))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme).To(Equal(core.StringPtr("classic")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution).To(Equal(apisDashboardsV1AstWidgetsLineChartResolutionModel))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType).To(Equal(core.StringPtr("archive")))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				Expect(apisDashboardsV1AstWidgetsLineChartModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")
				Expect(apisDashboardsV1AstWidgetsLineChartModel.Legend).To(Equal(apisDashboardsV1AstWidgetsCommonLegendModel))
				Expect(apisDashboardsV1AstWidgetsLineChartModel.Tooltip).To(Equal(apisDashboardsV1AstWidgetsLineChartTooltipModel))
				Expect(apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions).To(Equal([]logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}))
				Expect(apisDashboardsV1AstWidgetsLineChartModel.StackedLine).To(Equal(core.StringPtr("relative")))

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				Expect(apisDashboardsV1AstWidgetDefinitionModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel
				Expect(apisDashboardsV1AstWidgetDefinitionModel.LineChart).To(Equal(apisDashboardsV1AstWidgetsLineChartModel))

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				Expect(apisDashboardsV1AstWidgetModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Response time")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				Expect(apisDashboardsV1AstWidgetModel.Href).To(Equal(core.StringPtr("testString")))
				Expect(apisDashboardsV1AstWidgetModel.ID).To(Equal(apisDashboardsV1UUIDModel))
				Expect(apisDashboardsV1AstWidgetModel.Title).To(Equal(core.StringPtr("Response time")))
				Expect(apisDashboardsV1AstWidgetModel.Description).To(Equal(core.StringPtr("The average response time of the system")))
				Expect(apisDashboardsV1AstWidgetModel.Definition).To(Equal(apisDashboardsV1AstWidgetDefinitionModel))
				Expect(apisDashboardsV1AstWidgetModel.CreatedAt).To(Equal(CreateMockDateTime("2021-01-01T00:00:00.000Z")))
				Expect(apisDashboardsV1AstWidgetModel.UpdatedAt).To(Equal(CreateMockDateTime("2021-01-01T00:00:00.000Z")))

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				Expect(apisDashboardsV1AstRowModel).ToNot(BeNil())
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}
				Expect(apisDashboardsV1AstRowModel.Href).To(Equal(core.StringPtr("testString")))
				Expect(apisDashboardsV1AstRowModel.ID).To(Equal(apisDashboardsV1UUIDModel))
				Expect(apisDashboardsV1AstRowModel.Appearance).To(Equal(apisDashboardsV1AstRowAppearanceModel))
				Expect(apisDashboardsV1AstRowModel.Widgets).To(Equal([]logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}))

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				Expect(apisDashboardsV1AstSectionModel).ToNot(BeNil())
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}
				Expect(apisDashboardsV1AstSectionModel.Href).To(Equal(core.StringPtr("testString")))
				Expect(apisDashboardsV1AstSectionModel.ID).To(Equal(apisDashboardsV1UUIDModel))
				Expect(apisDashboardsV1AstSectionModel.Rows).To(Equal([]logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}))

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				Expect(apisDashboardsV1AstLayoutModel).ToNot(BeNil())
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}
				Expect(apisDashboardsV1AstLayoutModel.Sections).To(Equal([]logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}))

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				Expect(apisDashboardsV1AstMultiSelectLogsPathSourceModel).ToNot(BeNil())
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel
				Expect(apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField).To(Equal(apisDashboardsV1CommonObservationFieldModel))

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				Expect(apisDashboardsV1AstMultiSelectSourceModel).ToNot(BeNil())
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel
				Expect(apisDashboardsV1AstMultiSelectSourceModel.LogsPath).To(Equal(apisDashboardsV1AstMultiSelectLogsPathSourceModel))

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				Expect(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel).ToNot(BeNil())
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")
				Expect(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.GetProperties()).ToNot(BeEmpty())
				Expect(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.GetProperty("foo")).To(Equal("testString"))

				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperties(nil)
				Expect(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.GetProperties()).To(BeEmpty())

				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelExpectedMap := make(map[string]interface{})
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelExpectedMap["foo"] = "testString"
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperties(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelExpectedMap)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelActualMap := apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.GetProperties()
				Expect(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelActualMap).To(Equal(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelExpectedMap))

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				Expect(apisDashboardsV1AstMultiSelectSelectionModel).ToNot(BeNil())
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel
				Expect(apisDashboardsV1AstMultiSelectSelectionModel.All).To(Equal(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel))

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				Expect(apisDashboardsV1AstMultiSelectModel).ToNot(BeNil())
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")
				Expect(apisDashboardsV1AstMultiSelectModel.Source).To(Equal(apisDashboardsV1AstMultiSelectSourceModel))
				Expect(apisDashboardsV1AstMultiSelectModel.Selection).To(Equal(apisDashboardsV1AstMultiSelectSelectionModel))
				Expect(apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection).To(Equal(core.StringPtr("desc")))

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				Expect(apisDashboardsV1AstVariableDefinitionModel).ToNot(BeNil())
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel
				Expect(apisDashboardsV1AstVariableDefinitionModel.MultiSelect).To(Equal(apisDashboardsV1AstMultiSelectModel))

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				Expect(apisDashboardsV1AstVariableModel).ToNot(BeNil())
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")
				Expect(apisDashboardsV1AstVariableModel.Name).To(Equal(core.StringPtr("service_name")))
				Expect(apisDashboardsV1AstVariableModel.Definition).To(Equal(apisDashboardsV1AstVariableDefinitionModel))
				Expect(apisDashboardsV1AstVariableModel.DisplayName).To(Equal(core.StringPtr("Service Name")))

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				Expect(apisDashboardsV1AstFilterSourceModel).ToNot(BeNil())
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel
				Expect(apisDashboardsV1AstFilterSourceModel.Logs).To(Equal(apisDashboardsV1AstFilterLogsFilterModel))

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				Expect(apisDashboardsV1AstFilterModel).ToNot(BeNil())
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(true)
				Expect(apisDashboardsV1AstFilterModel.Source).To(Equal(apisDashboardsV1AstFilterSourceModel))
				Expect(apisDashboardsV1AstFilterModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apisDashboardsV1AstFilterModel.Collapsed).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				Expect(apisDashboardsV1CommonPromQlQueryModel).ToNot(BeNil())
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")
				Expect(apisDashboardsV1CommonPromQlQueryModel.Value).To(Equal(core.StringPtr("sum(up)")))

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel).ToNot(BeNil())
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.GetProperties()).ToNot(BeEmpty())
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.GetProperty("foo")).To(Equal("testString"))

				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperties(nil)
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.GetProperties()).To(BeEmpty())

				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelExpectedMap := make(map[string]interface{})
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelExpectedMap["foo"] = "testString"
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperties(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelExpectedMap)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelActualMap := apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.GetProperties()
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelActualMap).To(Equal(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelExpectedMap))

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStrategyModel).ToNot(BeNil())
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric).To(Equal(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel))

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				Expect(apisDashboardsV1AstAnnotationMetricsSourceModel).ToNot(BeNil())
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}
				Expect(apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery).To(Equal(apisDashboardsV1CommonPromQlQueryModel))
				Expect(apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy).To(Equal(apisDashboardsV1AstAnnotationMetricsSourceStrategyModel))
				Expect(apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate).To(Equal(core.StringPtr("testString")))
				Expect(apisDashboardsV1AstAnnotationMetricsSourceModel.Labels).To(Equal([]string{"testString"}))

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				Expect(apisDashboardsV1AstAnnotationSourceModel).ToNot(BeNil())
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel
				Expect(apisDashboardsV1AstAnnotationSourceModel.Metrics).To(Equal(apisDashboardsV1AstAnnotationMetricsSourceModel))

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				Expect(apisDashboardsV1AstAnnotationModel).ToNot(BeNil())
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel
				Expect(apisDashboardsV1AstAnnotationModel.Href).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(apisDashboardsV1AstAnnotationModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(apisDashboardsV1AstAnnotationModel.Name).To(Equal(core.StringPtr("Deployments")))
				Expect(apisDashboardsV1AstAnnotationModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apisDashboardsV1AstAnnotationModel.Source).To(Equal(apisDashboardsV1AstAnnotationSourceModel))

				// Construct an instance of the ApisDashboardsV1CommonTimeFrame model
				apisDashboardsV1CommonTimeFrameModel := new(logsv0.ApisDashboardsV1CommonTimeFrame)
				Expect(apisDashboardsV1CommonTimeFrameModel).ToNot(BeNil())
				apisDashboardsV1CommonTimeFrameModel.From = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1CommonTimeFrameModel.To = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				Expect(apisDashboardsV1CommonTimeFrameModel.From).To(Equal(CreateMockDateTime("2021-01-01T00:00:00.000Z")))
				Expect(apisDashboardsV1CommonTimeFrameModel.To).To(Equal(CreateMockDateTime("2021-01-01T00:00:00.000Z")))

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame)
				Expect(dashboardModel).ToNot(BeNil())
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("My Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.AbsoluteTimeFrame = apisDashboardsV1CommonTimeFrameModel
				Expect(dashboardModel.Href).To(Equal(core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")))
				Expect(dashboardModel.ID).To(Equal(core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")))
				Expect(dashboardModel.Name).To(Equal(core.StringPtr("My Dashboard")))
				Expect(dashboardModel.Description).To(Equal(core.StringPtr("This dashboard shows the performance of our production environment.")))
				Expect(dashboardModel.Layout).To(Equal(apisDashboardsV1AstLayoutModel))
				Expect(dashboardModel.Variables).To(Equal([]logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}))
				Expect(dashboardModel.Filters).To(Equal([]logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}))
				Expect(dashboardModel.Annotations).To(Equal([]logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}))
				Expect(dashboardModel.AbsoluteTimeFrame).To(Equal(apisDashboardsV1CommonTimeFrameModel))

				// Construct an instance of the CreateDashboardOptions model
				var dashboard logsv0.DashboardIntf = nil
				createDashboardOptionsModel := logsService.NewCreateDashboardOptions(dashboard)
				createDashboardOptionsModel.SetDashboard(dashboardModel)
				createDashboardOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDashboardOptionsModel).ToNot(BeNil())
				Expect(createDashboardOptionsModel.Dashboard).To(Equal(dashboardModel))
				Expect(createDashboardOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateE2mOptions successfully`, func() {
				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				Expect(apisEvents2metricsV2MetricLabelModel).ToNot(BeNil())
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")
				Expect(apisEvents2metricsV2MetricLabelModel.TargetLabel).To(Equal(core.StringPtr("alias_label_name")))
				Expect(apisEvents2metricsV2MetricLabelModel.SourceField).To(Equal(core.StringPtr("log_obj.string_value")))

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				Expect(apisEvents2metricsV2E2mAggSamplesModel).ToNot(BeNil())
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")
				Expect(apisEvents2metricsV2E2mAggSamplesModel.SampleType).To(Equal(core.StringPtr("max")))

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				Expect(apisEvents2metricsV2AggregationModel).ToNot(BeNil())
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel
				Expect(apisEvents2metricsV2AggregationModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apisEvents2metricsV2AggregationModel.AggType).To(Equal(core.StringPtr("samples")))
				Expect(apisEvents2metricsV2AggregationModel.TargetMetricName).To(Equal(core.StringPtr("alias_field_name_agg_func")))
				Expect(apisEvents2metricsV2AggregationModel.Samples).To(Equal(apisEvents2metricsV2E2mAggSamplesModel))

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				Expect(apisEvents2metricsV2MetricFieldModel).ToNot(BeNil())
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}
				Expect(apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName).To(Equal(core.StringPtr("alias_field_name")))
				Expect(apisEvents2metricsV2MetricFieldModel.SourceField).To(Equal(core.StringPtr("log_obj.numeric_field")))
				Expect(apisEvents2metricsV2MetricFieldModel.Aggregations).To(Equal([]logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}))

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				Expect(apisLogs2metricsV2LogsQueryModel).ToNot(BeNil())
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("log_obj.numeric_field: [50 TO 100]")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}
				Expect(apisLogs2metricsV2LogsQueryModel.Lucene).To(Equal(core.StringPtr("log_obj.numeric_field: [50 TO 100]")))
				Expect(apisLogs2metricsV2LogsQueryModel.Alias).To(Equal(core.StringPtr("new_query")))
				Expect(apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters).To(Equal([]string{"app_name"}))
				Expect(apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters).To(Equal([]string{"sub_name"}))
				Expect(apisLogs2metricsV2LogsQueryModel.SeverityFilters).To(Equal([]string{"critical"}))

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				Expect(event2MetricPrototypeModel).ToNot(BeNil())
				event2MetricPrototypeModel.Name = core.StringPtr("Service catalog latency")
				event2MetricPrototypeModel.Description = core.StringPtr("avg and max the latency of catalog service")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(30000))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel
				Expect(event2MetricPrototypeModel.Name).To(Equal(core.StringPtr("Service catalog latency")))
				Expect(event2MetricPrototypeModel.Description).To(Equal(core.StringPtr("avg and max the latency of catalog service")))
				Expect(event2MetricPrototypeModel.PermutationsLimit).To(Equal(core.Int64Ptr(int64(30000))))
				Expect(event2MetricPrototypeModel.MetricLabels).To(Equal([]logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}))
				Expect(event2MetricPrototypeModel.MetricFields).To(Equal([]logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}))
				Expect(event2MetricPrototypeModel.Type).To(Equal(core.StringPtr("logs2metrics")))
				Expect(event2MetricPrototypeModel.LogsQuery).To(Equal(apisLogs2metricsV2LogsQueryModel))

				// Construct an instance of the CreateE2mOptions model
				var event2MetricPrototype logsv0.Event2MetricPrototypeIntf = nil
				createE2mOptionsModel := logsService.NewCreateE2mOptions(event2MetricPrototype)
				createE2mOptionsModel.SetEvent2MetricPrototype(event2MetricPrototypeModel)
				createE2mOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createE2mOptionsModel).ToNot(BeNil())
				Expect(createE2mOptionsModel.Event2MetricPrototype).To(Equal(event2MetricPrototypeModel))
				Expect(createE2mOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateOutgoingWebhookOptions successfully`, func() {
				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				Expect(outgoingWebhooksV1IbmEventNotificationsConfigModel).ToNot(BeNil())
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")
				Expect(outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID).To(Equal(CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")))
				Expect(outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID).To(Equal(core.StringPtr("eu-es")))

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				Expect(outgoingWebhookPrototypeModel).ToNot(BeNil())
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel
				Expect(outgoingWebhookPrototypeModel.Type).To(Equal(core.StringPtr("ibm_event_notifications")))
				Expect(outgoingWebhookPrototypeModel.Name).To(Equal(core.StringPtr("Event Notifications Integration")))
				Expect(outgoingWebhookPrototypeModel.URL).To(Equal(core.StringPtr("https://example.com")))
				Expect(outgoingWebhookPrototypeModel.IbmEventNotifications).To(Equal(outgoingWebhooksV1IbmEventNotificationsConfigModel))

				// Construct an instance of the CreateOutgoingWebhookOptions model
				var outgoingWebhookPrototype logsv0.OutgoingWebhookPrototypeIntf = nil
				createOutgoingWebhookOptionsModel := logsService.NewCreateOutgoingWebhookOptions(outgoingWebhookPrototype)
				createOutgoingWebhookOptionsModel.SetOutgoingWebhookPrototype(outgoingWebhookPrototypeModel)
				createOutgoingWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createOutgoingWebhookOptionsModel).ToNot(BeNil())
				Expect(createOutgoingWebhookOptionsModel.OutgoingWebhookPrototype).To(Equal(outgoingWebhookPrototypeModel))
				Expect(createOutgoingWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreatePolicyOptions successfully`, func() {
				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				Expect(quotaV1RuleModel).ToNot(BeNil())
				quotaV1RuleModel.RuleTypeID = core.StringPtr("includes")
				quotaV1RuleModel.Name = core.StringPtr("Rule Name")
				Expect(quotaV1RuleModel.RuleTypeID).To(Equal(core.StringPtr("includes")))
				Expect(quotaV1RuleModel.Name).To(Equal(core.StringPtr("Rule Name")))

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				Expect(quotaV1ArchiveRetentionModel).ToNot(BeNil())
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				Expect(quotaV1ArchiveRetentionModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				Expect(quotaV1LogRulesModel).ToNot(BeNil())
				quotaV1LogRulesModel.Severities = []string{"critical"}
				Expect(quotaV1LogRulesModel.Severities).To(Equal([]string{"critical"}))

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				Expect(policyPrototypeModel).ToNot(BeNil())
				policyPrototypeModel.Name = core.StringPtr("My Policy")
				policyPrototypeModel.Description = core.StringPtr("My Policy Description")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel
				Expect(policyPrototypeModel.Name).To(Equal(core.StringPtr("My Policy")))
				Expect(policyPrototypeModel.Description).To(Equal(core.StringPtr("My Policy Description")))
				Expect(policyPrototypeModel.Priority).To(Equal(core.StringPtr("type_high")))
				Expect(policyPrototypeModel.ApplicationRule).To(Equal(quotaV1RuleModel))
				Expect(policyPrototypeModel.SubsystemRule).To(Equal(quotaV1RuleModel))
				Expect(policyPrototypeModel.ArchiveRetention).To(Equal(quotaV1ArchiveRetentionModel))
				Expect(policyPrototypeModel.LogRules).To(Equal(quotaV1LogRulesModel))

				// Construct an instance of the CreatePolicyOptions model
				var policyPrototype logsv0.PolicyPrototypeIntf = nil
				createPolicyOptionsModel := logsService.NewCreatePolicyOptions(policyPrototype)
				createPolicyOptionsModel.SetPolicyPrototype(policyPrototypeModel)
				createPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createPolicyOptionsModel).ToNot(BeNil())
				Expect(createPolicyOptionsModel.PolicyPrototype).To(Equal(policyPrototypeModel))
				Expect(createPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateRuleGroupOptions successfully`, func() {
				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				Expect(rulesV1ParseParametersModel).ToNot(BeNil())
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")
				Expect(rulesV1ParseParametersModel.DestinationField).To(Equal(core.StringPtr("text")))
				Expect(rulesV1ParseParametersModel.Rule).To(Equal(core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")))

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				Expect(rulesV1RuleParametersModel).ToNot(BeNil())
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel
				Expect(rulesV1RuleParametersModel.ParseParameters).To(Equal(rulesV1ParseParametersModel))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel).ToNot(BeNil())
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name).To(Equal(core.StringPtr("mysql-parse")))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description).To(Equal(core.StringPtr("mysql-parse")))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField).To(Equal(core.StringPtr("text")))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters).To(Equal(rulesV1RuleParametersModel))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel).ToNot(BeNil())
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules).To(Equal([]logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				Expect(rulesV1SubsystemNameConstraintModel).ToNot(BeNil())
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")
				Expect(rulesV1SubsystemNameConstraintModel.Value).To(Equal(core.StringPtr("mysql")))

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				Expect(rulesV1RuleMatcherModel).ToNot(BeNil())
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel
				Expect(rulesV1RuleMatcherModel.SubsystemName).To(Equal(rulesV1SubsystemNameConstraintModel))

				// Construct an instance of the CreateRuleGroupOptions model
				createRuleGroupOptionsName := "mysql-extractrule"
				createRuleGroupOptionsRuleSubgroups := []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{}
				createRuleGroupOptionsModel := logsService.NewCreateRuleGroupOptions(createRuleGroupOptionsName, createRuleGroupOptionsRuleSubgroups)
				createRuleGroupOptionsModel.SetName("mysql-extractrule")
				createRuleGroupOptionsModel.SetRuleSubgroups([]logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel})
				createRuleGroupOptionsModel.SetDescription("mysql audit logs  parser")
				createRuleGroupOptionsModel.SetEnabled(true)
				createRuleGroupOptionsModel.SetRuleMatchers([]logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel})
				createRuleGroupOptionsModel.SetOrder(int64(39))
				createRuleGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createRuleGroupOptionsModel).ToNot(BeNil())
				Expect(createRuleGroupOptionsModel.Name).To(Equal(core.StringPtr("mysql-extractrule")))
				Expect(createRuleGroupOptionsModel.RuleSubgroups).To(Equal([]logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}))
				Expect(createRuleGroupOptionsModel.Description).To(Equal(core.StringPtr("mysql audit logs  parser")))
				Expect(createRuleGroupOptionsModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(createRuleGroupOptionsModel.RuleMatchers).To(Equal([]logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}))
				Expect(createRuleGroupOptionsModel.Order).To(Equal(core.Int64Ptr(int64(39))))
				Expect(createRuleGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateViewFolderOptions successfully`, func() {
				// Construct an instance of the CreateViewFolderOptions model
				createViewFolderOptionsName := "My Folder"
				createViewFolderOptionsModel := logsService.NewCreateViewFolderOptions(createViewFolderOptionsName)
				createViewFolderOptionsModel.SetName("My Folder")
				createViewFolderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createViewFolderOptionsModel).ToNot(BeNil())
				Expect(createViewFolderOptionsModel.Name).To(Equal(core.StringPtr("My Folder")))
				Expect(createViewFolderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateViewOptions successfully`, func() {
				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				Expect(apisViewsV1SearchQueryModel).ToNot(BeNil())
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs")
				Expect(apisViewsV1SearchQueryModel.Query).To(Equal(core.StringPtr("logs")))

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				Expect(apisViewsV1CustomTimeSelectionModel).ToNot(BeNil())
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")
				Expect(apisViewsV1CustomTimeSelectionModel.FromTime).To(Equal(CreateMockDateTime("2024-01-25T11:31:43.152Z")))
				Expect(apisViewsV1CustomTimeSelectionModel.ToTime).To(Equal(CreateMockDateTime("2024-01-25T11:37:13.238Z")))

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				Expect(apisViewsV1TimeSelectionModel).ToNot(BeNil())
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel
				Expect(apisViewsV1TimeSelectionModel.CustomSelection).To(Equal(apisViewsV1CustomTimeSelectionModel))

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				Expect(apisViewsV1FilterModel).ToNot(BeNil())
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}
				Expect(apisViewsV1FilterModel.Name).To(Equal(core.StringPtr("applicationName")))
				Expect(apisViewsV1FilterModel.SelectedValues).To(Equal(map[string]bool{"key1": true}))

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				Expect(apisViewsV1SelectedFiltersModel).ToNot(BeNil())
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}
				Expect(apisViewsV1SelectedFiltersModel.Filters).To(Equal([]logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}))

				// Construct an instance of the CreateViewOptions model
				createViewOptionsName := "Logs view"
				var createViewOptionsSearchQuery *logsv0.ApisViewsV1SearchQuery = nil
				var createViewOptionsTimeSelection logsv0.ApisViewsV1TimeSelectionIntf = nil
				createViewOptionsModel := logsService.NewCreateViewOptions(createViewOptionsName, createViewOptionsSearchQuery, createViewOptionsTimeSelection)
				createViewOptionsModel.SetName("Logs view")
				createViewOptionsModel.SetSearchQuery(apisViewsV1SearchQueryModel)
				createViewOptionsModel.SetTimeSelection(apisViewsV1TimeSelectionModel)
				createViewOptionsModel.SetFilters(apisViewsV1SelectedFiltersModel)
				createViewOptionsModel.SetFolderID(CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673"))
				createViewOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createViewOptionsModel).ToNot(BeNil())
				Expect(createViewOptionsModel.Name).To(Equal(core.StringPtr("Logs view")))
				Expect(createViewOptionsModel.SearchQuery).To(Equal(apisViewsV1SearchQueryModel))
				Expect(createViewOptionsModel.TimeSelection).To(Equal(apisViewsV1TimeSelectionModel))
				Expect(createViewOptionsModel.Filters).To(Equal(apisViewsV1SelectedFiltersModel))
				Expect(createViewOptionsModel.FolderID).To(Equal(CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")))
				Expect(createViewOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDashboardFolder successfully`, func() {
				name := "My Folder"
				_model, err := logsService.NewDashboardFolder(name)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDeleteAlertOptions successfully`, func() {
				// Construct an instance of the DeleteAlertOptions model
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteAlertOptionsModel := logsService.NewDeleteAlertOptions(id)
				deleteAlertOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				deleteAlertOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteAlertOptionsModel).ToNot(BeNil())
				Expect(deleteAlertOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(deleteAlertOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteDashboardFolderOptions successfully`, func() {
				// Construct an instance of the DeleteDashboardFolderOptions model
				folderID := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteDashboardFolderOptionsModel := logsService.NewDeleteDashboardFolderOptions(folderID)
				deleteDashboardFolderOptionsModel.SetFolderID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				deleteDashboardFolderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteDashboardFolderOptionsModel).ToNot(BeNil())
				Expect(deleteDashboardFolderOptionsModel.FolderID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(deleteDashboardFolderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteDashboardOptions successfully`, func() {
				// Construct an instance of the DeleteDashboardOptions model
				dashboardID := "testString"
				deleteDashboardOptionsModel := logsService.NewDeleteDashboardOptions(dashboardID)
				deleteDashboardOptionsModel.SetDashboardID("testString")
				deleteDashboardOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteDashboardOptionsModel).ToNot(BeNil())
				Expect(deleteDashboardOptionsModel.DashboardID).To(Equal(core.StringPtr("testString")))
				Expect(deleteDashboardOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteE2mOptions successfully`, func() {
				// Construct an instance of the DeleteE2mOptions model
				id := "d6a3658e-78d2-47d0-9b81-b2c551f01b09"
				deleteE2mOptionsModel := logsService.NewDeleteE2mOptions(id)
				deleteE2mOptionsModel.SetID("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				deleteE2mOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteE2mOptionsModel).ToNot(BeNil())
				Expect(deleteE2mOptionsModel.ID).To(Equal(core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")))
				Expect(deleteE2mOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteOutgoingWebhookOptions successfully`, func() {
				// Construct an instance of the DeleteOutgoingWebhookOptions model
				id := CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				deleteOutgoingWebhookOptionsModel := logsService.NewDeleteOutgoingWebhookOptions(id)
				deleteOutgoingWebhookOptionsModel.SetID(CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660"))
				deleteOutgoingWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteOutgoingWebhookOptionsModel).ToNot(BeNil())
				Expect(deleteOutgoingWebhookOptionsModel.ID).To(Equal(CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")))
				Expect(deleteOutgoingWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeletePolicyOptions successfully`, func() {
				// Construct an instance of the DeletePolicyOptions model
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deletePolicyOptionsModel := logsService.NewDeletePolicyOptions(id)
				deletePolicyOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				deletePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deletePolicyOptionsModel).ToNot(BeNil())
				Expect(deletePolicyOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(deletePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteRuleGroupOptions successfully`, func() {
				// Construct an instance of the DeleteRuleGroupOptions model
				groupID := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteRuleGroupOptionsModel := logsService.NewDeleteRuleGroupOptions(groupID)
				deleteRuleGroupOptionsModel.SetGroupID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				deleteRuleGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteRuleGroupOptionsModel).ToNot(BeNil())
				Expect(deleteRuleGroupOptionsModel.GroupID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(deleteRuleGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteViewFolderOptions successfully`, func() {
				// Construct an instance of the DeleteViewFolderOptions model
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				deleteViewFolderOptionsModel := logsService.NewDeleteViewFolderOptions(id)
				deleteViewFolderOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				deleteViewFolderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteViewFolderOptionsModel).ToNot(BeNil())
				Expect(deleteViewFolderOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(deleteViewFolderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteViewOptions successfully`, func() {
				// Construct an instance of the DeleteViewOptions model
				id := int64(52)
				deleteViewOptionsModel := logsService.NewDeleteViewOptions(id)
				deleteViewOptionsModel.SetID(int64(52))
				deleteViewOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteViewOptionsModel).ToNot(BeNil())
				Expect(deleteViewOptionsModel.ID).To(Equal(core.Int64Ptr(int64(52))))
				Expect(deleteViewOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAlertOptions successfully`, func() {
				// Construct an instance of the GetAlertOptions model
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getAlertOptionsModel := logsService.NewGetAlertOptions(id)
				getAlertOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				getAlertOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAlertOptionsModel).ToNot(BeNil())
				Expect(getAlertOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(getAlertOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAlertsOptions successfully`, func() {
				// Construct an instance of the GetAlertsOptions model
				getAlertsOptionsModel := logsService.NewGetAlertsOptions()
				getAlertsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAlertsOptionsModel).ToNot(BeNil())
				Expect(getAlertsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetCompanyPoliciesOptions successfully`, func() {
				// Construct an instance of the GetCompanyPoliciesOptions model
				getCompanyPoliciesOptionsModel := logsService.NewGetCompanyPoliciesOptions()
				getCompanyPoliciesOptionsModel.SetEnabledOnly(true)
				getCompanyPoliciesOptionsModel.SetSourceType("logs")
				getCompanyPoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getCompanyPoliciesOptionsModel).ToNot(BeNil())
				Expect(getCompanyPoliciesOptionsModel.EnabledOnly).To(Equal(core.BoolPtr(true)))
				Expect(getCompanyPoliciesOptionsModel.SourceType).To(Equal(core.StringPtr("logs")))
				Expect(getCompanyPoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDashboardOptions successfully`, func() {
				// Construct an instance of the GetDashboardOptions model
				dashboardID := "testString"
				getDashboardOptionsModel := logsService.NewGetDashboardOptions(dashboardID)
				getDashboardOptionsModel.SetDashboardID("testString")
				getDashboardOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDashboardOptionsModel).ToNot(BeNil())
				Expect(getDashboardOptionsModel.DashboardID).To(Equal(core.StringPtr("testString")))
				Expect(getDashboardOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetE2mOptions successfully`, func() {
				// Construct an instance of the GetE2mOptions model
				id := "d6a3658e-78d2-47d0-9b81-b2c551f01b09"
				getE2mOptionsModel := logsService.NewGetE2mOptions(id)
				getE2mOptionsModel.SetID("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				getE2mOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getE2mOptionsModel).ToNot(BeNil())
				Expect(getE2mOptionsModel.ID).To(Equal(core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")))
				Expect(getE2mOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetOutgoingWebhookOptions successfully`, func() {
				// Construct an instance of the GetOutgoingWebhookOptions model
				id := CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				getOutgoingWebhookOptionsModel := logsService.NewGetOutgoingWebhookOptions(id)
				getOutgoingWebhookOptionsModel.SetID(CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660"))
				getOutgoingWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getOutgoingWebhookOptionsModel).ToNot(BeNil())
				Expect(getOutgoingWebhookOptionsModel.ID).To(Equal(CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")))
				Expect(getOutgoingWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetPolicyOptions successfully`, func() {
				// Construct an instance of the GetPolicyOptions model
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getPolicyOptionsModel := logsService.NewGetPolicyOptions(id)
				getPolicyOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				getPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getPolicyOptionsModel).ToNot(BeNil())
				Expect(getPolicyOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(getPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRuleGroupOptions successfully`, func() {
				// Construct an instance of the GetRuleGroupOptions model
				groupID := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getRuleGroupOptionsModel := logsService.NewGetRuleGroupOptions(groupID)
				getRuleGroupOptionsModel.SetGroupID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				getRuleGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRuleGroupOptionsModel).ToNot(BeNil())
				Expect(getRuleGroupOptionsModel.GroupID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(getRuleGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetViewFolderOptions successfully`, func() {
				// Construct an instance of the GetViewFolderOptions model
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				getViewFolderOptionsModel := logsService.NewGetViewFolderOptions(id)
				getViewFolderOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				getViewFolderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getViewFolderOptionsModel).ToNot(BeNil())
				Expect(getViewFolderOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(getViewFolderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetViewOptions successfully`, func() {
				// Construct an instance of the GetViewOptions model
				id := int64(52)
				getViewOptionsModel := logsService.NewGetViewOptions(id)
				getViewOptionsModel.SetID(int64(52))
				getViewOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getViewOptionsModel).ToNot(BeNil())
				Expect(getViewOptionsModel.ID).To(Equal(core.Int64Ptr(int64(52))))
				Expect(getViewOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListDashboardFoldersOptions successfully`, func() {
				// Construct an instance of the ListDashboardFoldersOptions model
				listDashboardFoldersOptionsModel := logsService.NewListDashboardFoldersOptions()
				listDashboardFoldersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDashboardFoldersOptionsModel).ToNot(BeNil())
				Expect(listDashboardFoldersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListE2mOptions successfully`, func() {
				// Construct an instance of the ListE2mOptions model
				listE2mOptionsModel := logsService.NewListE2mOptions()
				listE2mOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listE2mOptionsModel).ToNot(BeNil())
				Expect(listE2mOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListOutgoingWebhooksOptions successfully`, func() {
				// Construct an instance of the ListOutgoingWebhooksOptions model
				listOutgoingWebhooksOptionsModel := logsService.NewListOutgoingWebhooksOptions()
				listOutgoingWebhooksOptionsModel.SetType("ibm_event_notifications")
				listOutgoingWebhooksOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listOutgoingWebhooksOptionsModel).ToNot(BeNil())
				Expect(listOutgoingWebhooksOptionsModel.Type).To(Equal(core.StringPtr("ibm_event_notifications")))
				Expect(listOutgoingWebhooksOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListRuleGroupsOptions successfully`, func() {
				// Construct an instance of the ListRuleGroupsOptions model
				listRuleGroupsOptionsModel := logsService.NewListRuleGroupsOptions()
				listRuleGroupsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listRuleGroupsOptionsModel).ToNot(BeNil())
				Expect(listRuleGroupsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListViewFoldersOptions successfully`, func() {
				// Construct an instance of the ListViewFoldersOptions model
				listViewFoldersOptionsModel := logsService.NewListViewFoldersOptions()
				listViewFoldersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listViewFoldersOptionsModel).ToNot(BeNil())
				Expect(listViewFoldersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListViewsOptions successfully`, func() {
				// Construct an instance of the ListViewsOptions model
				listViewsOptionsModel := logsService.NewListViewsOptions()
				listViewsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listViewsOptionsModel).ToNot(BeNil())
				Expect(listViewsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewOutgoingWebhooksV1IbmEventNotificationsConfig successfully`, func() {
				eventNotificationsInstanceID := CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				regionID := "eu-es"
				_model, err := logsService.NewOutgoingWebhooksV1IbmEventNotificationsConfig(eventNotificationsInstanceID, regionID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPinDashboardOptions successfully`, func() {
				// Construct an instance of the PinDashboardOptions model
				dashboardID := "testString"
				pinDashboardOptionsModel := logsService.NewPinDashboardOptions(dashboardID)
				pinDashboardOptionsModel.SetDashboardID("testString")
				pinDashboardOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(pinDashboardOptionsModel).ToNot(BeNil())
				Expect(pinDashboardOptionsModel.DashboardID).To(Equal(core.StringPtr("testString")))
				Expect(pinDashboardOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewQuotaV1ArchiveRetention successfully`, func() {
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				_model, err := logsService.NewQuotaV1ArchiveRetention(id)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewQuotaV1Rule successfully`, func() {
				ruleTypeID := "includes"
				name := "Rule Name"
				_model, err := logsService.NewQuotaV1Rule(ruleTypeID, name)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewReplaceDashboardFolderOptions successfully`, func() {
				// Construct an instance of the ReplaceDashboardFolderOptions model
				folderID := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceDashboardFolderOptionsName := "My Folder"
				replaceDashboardFolderOptionsModel := logsService.NewReplaceDashboardFolderOptions(folderID, replaceDashboardFolderOptionsName)
				replaceDashboardFolderOptionsModel.SetFolderID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				replaceDashboardFolderOptionsModel.SetName("My Folder")
				replaceDashboardFolderOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				replaceDashboardFolderOptionsModel.SetParentID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				replaceDashboardFolderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceDashboardFolderOptionsModel).ToNot(BeNil())
				Expect(replaceDashboardFolderOptionsModel.FolderID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(replaceDashboardFolderOptionsModel.Name).To(Equal(core.StringPtr("My Folder")))
				Expect(replaceDashboardFolderOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(replaceDashboardFolderOptionsModel.ParentID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(replaceDashboardFolderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceDashboardOptions successfully`, func() {
				// Construct an instance of the ApisDashboardsV1UUID model
				apisDashboardsV1UUIDModel := new(logsv0.ApisDashboardsV1UUID)
				Expect(apisDashboardsV1UUIDModel).ToNot(BeNil())
				apisDashboardsV1UUIDModel.Value = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				Expect(apisDashboardsV1UUIDModel.Value).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))

				// Construct an instance of the ApisDashboardsV1AstRowAppearance model
				apisDashboardsV1AstRowAppearanceModel := new(logsv0.ApisDashboardsV1AstRowAppearance)
				Expect(apisDashboardsV1AstRowAppearanceModel).ToNot(BeNil())
				apisDashboardsV1AstRowAppearanceModel.Height = core.Int64Ptr(int64(5))
				Expect(apisDashboardsV1AstRowAppearanceModel.Height).To(Equal(core.Int64Ptr(int64(5))))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLegend model
				apisDashboardsV1AstWidgetsCommonLegendModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
				Expect(apisDashboardsV1AstWidgetsCommonLegendModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsCommonLegendModel.Columns = []string{"name"}
				apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery = core.BoolPtr(true)
				Expect(apisDashboardsV1AstWidgetsCommonLegendModel.IsVisible).To(Equal(core.BoolPtr(true)))
				Expect(apisDashboardsV1AstWidgetsCommonLegendModel.Columns).To(Equal([]string{"name"}))
				Expect(apisDashboardsV1AstWidgetsCommonLegendModel.GroupByQuery).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartTooltip model
				apisDashboardsV1AstWidgetsLineChartTooltipModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
				Expect(apisDashboardsV1AstWidgetsLineChartTooltipModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartTooltipModel.Type = core.StringPtr("single")
				Expect(apisDashboardsV1AstWidgetsLineChartTooltipModel.ShowLabels).To(Equal(core.BoolPtr(true)))
				Expect(apisDashboardsV1AstWidgetsLineChartTooltipModel.Type).To(Equal(core.StringPtr("single")))

				// Construct an instance of the ApisDashboardsV1AstWidgetsCommonLuceneQuery model
				apisDashboardsV1AstWidgetsCommonLuceneQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsCommonLuceneQuery)
				Expect(apisDashboardsV1AstWidgetsCommonLuceneQueryModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsCommonLuceneQueryModel.Value = core.StringPtr("coralogix.metadata.applicationName:\"production\"")
				Expect(apisDashboardsV1AstWidgetsCommonLuceneQueryModel.Value).To(Equal(core.StringPtr("coralogix.metadata.applicationName:\"production\"")))

				// Construct an instance of the ApisDashboardsV1CommonLogsAggregationCountEmpty model
				apisDashboardsV1CommonLogsAggregationCountEmptyModel := new(logsv0.ApisDashboardsV1CommonLogsAggregationCountEmpty)
				Expect(apisDashboardsV1CommonLogsAggregationCountEmptyModel).ToNot(BeNil())
				apisDashboardsV1CommonLogsAggregationCountEmptyModel.SetProperty("foo", "testString")
				Expect(apisDashboardsV1CommonLogsAggregationCountEmptyModel.GetProperties()).ToNot(BeEmpty())
				Expect(apisDashboardsV1CommonLogsAggregationCountEmptyModel.GetProperty("foo")).To(Equal("testString"))

				apisDashboardsV1CommonLogsAggregationCountEmptyModel.SetProperties(nil)
				Expect(apisDashboardsV1CommonLogsAggregationCountEmptyModel.GetProperties()).To(BeEmpty())

				apisDashboardsV1CommonLogsAggregationCountEmptyModelExpectedMap := make(map[string]interface{})
				apisDashboardsV1CommonLogsAggregationCountEmptyModelExpectedMap["foo"] = "testString"
				apisDashboardsV1CommonLogsAggregationCountEmptyModel.SetProperties(apisDashboardsV1CommonLogsAggregationCountEmptyModelExpectedMap)
				apisDashboardsV1CommonLogsAggregationCountEmptyModelActualMap := apisDashboardsV1CommonLogsAggregationCountEmptyModel.GetProperties()
				Expect(apisDashboardsV1CommonLogsAggregationCountEmptyModelActualMap).To(Equal(apisDashboardsV1CommonLogsAggregationCountEmptyModelExpectedMap))

				// Construct an instance of the ApisDashboardsV1CommonLogsAggregationValueCount model
				apisDashboardsV1CommonLogsAggregationModel := new(logsv0.ApisDashboardsV1CommonLogsAggregationValueCount)
				Expect(apisDashboardsV1CommonLogsAggregationModel).ToNot(BeNil())
				apisDashboardsV1CommonLogsAggregationModel.Count = apisDashboardsV1CommonLogsAggregationCountEmptyModel
				Expect(apisDashboardsV1CommonLogsAggregationModel.Count).To(Equal(apisDashboardsV1CommonLogsAggregationCountEmptyModel))

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty model
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)
				Expect(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel).ToNot(BeNil())
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")
				Expect(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.GetProperties()).ToNot(BeEmpty())
				Expect(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.GetProperty("foo")).To(Equal("testString"))

				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperties(nil)
				Expect(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.GetProperties()).To(BeEmpty())

				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelExpectedMap := make(map[string]interface{})
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelExpectedMap["foo"] = "testString"
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.SetProperties(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelExpectedMap)
				apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelActualMap := apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel.GetProperties()
				Expect(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelActualMap).To(Equal(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModelExpectedMap))

				// Construct an instance of the ApisDashboardsV1AstFilterEqualsSelectionValueAll model
				apisDashboardsV1AstFilterEqualsSelectionModel := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
				Expect(apisDashboardsV1AstFilterEqualsSelectionModel).ToNot(BeNil())
				apisDashboardsV1AstFilterEqualsSelectionModel.All = apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel
				Expect(apisDashboardsV1AstFilterEqualsSelectionModel.All).To(Equal(apisDashboardsV1AstFilterEqualsSelectionAllSelectionEmptyModel))

				// Construct an instance of the ApisDashboardsV1AstFilterEquals model
				apisDashboardsV1AstFilterEqualsModel := new(logsv0.ApisDashboardsV1AstFilterEquals)
				Expect(apisDashboardsV1AstFilterEqualsModel).ToNot(BeNil())
				apisDashboardsV1AstFilterEqualsModel.Selection = apisDashboardsV1AstFilterEqualsSelectionModel
				Expect(apisDashboardsV1AstFilterEqualsModel.Selection).To(Equal(apisDashboardsV1AstFilterEqualsSelectionModel))

				// Construct an instance of the ApisDashboardsV1AstFilterOperatorValueEquals model
				apisDashboardsV1AstFilterOperatorModel := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
				Expect(apisDashboardsV1AstFilterOperatorModel).ToNot(BeNil())
				apisDashboardsV1AstFilterOperatorModel.Equals = apisDashboardsV1AstFilterEqualsModel
				Expect(apisDashboardsV1AstFilterOperatorModel.Equals).To(Equal(apisDashboardsV1AstFilterEqualsModel))

				// Construct an instance of the ApisDashboardsV1CommonObservationField model
				apisDashboardsV1CommonObservationFieldModel := new(logsv0.ApisDashboardsV1CommonObservationField)
				Expect(apisDashboardsV1CommonObservationFieldModel).ToNot(BeNil())
				apisDashboardsV1CommonObservationFieldModel.Keypath = []string{"applicationname"}
				apisDashboardsV1CommonObservationFieldModel.Scope = core.StringPtr("metadata")
				Expect(apisDashboardsV1CommonObservationFieldModel.Keypath).To(Equal([]string{"applicationname"}))
				Expect(apisDashboardsV1CommonObservationFieldModel.Scope).To(Equal(core.StringPtr("metadata")))

				// Construct an instance of the ApisDashboardsV1AstFilterLogsFilter model
				apisDashboardsV1AstFilterLogsFilterModel := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
				Expect(apisDashboardsV1AstFilterLogsFilterModel).ToNot(BeNil())
				apisDashboardsV1AstFilterLogsFilterModel.Operator = apisDashboardsV1AstFilterOperatorModel
				apisDashboardsV1AstFilterLogsFilterModel.ObservationField = apisDashboardsV1CommonObservationFieldModel
				Expect(apisDashboardsV1AstFilterLogsFilterModel.Operator).To(Equal(apisDashboardsV1AstFilterOperatorModel))
				Expect(apisDashboardsV1AstFilterLogsFilterModel.ObservationField).To(Equal(apisDashboardsV1CommonObservationFieldModel))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartLogsQuery model
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartLogsQuery)
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel.LuceneQuery = apisDashboardsV1AstWidgetsCommonLuceneQueryModel
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel.GroupBy = []string{"testString"}
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel.Aggregations = []logsv0.ApisDashboardsV1CommonLogsAggregationIntf{apisDashboardsV1CommonLogsAggregationModel}
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel.Filters = []logsv0.ApisDashboardsV1AstFilterLogsFilter{*apisDashboardsV1AstFilterLogsFilterModel}
				apisDashboardsV1AstWidgetsLineChartLogsQueryModel.GroupBys = []logsv0.ApisDashboardsV1CommonObservationField{*apisDashboardsV1CommonObservationFieldModel}
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel.LuceneQuery).To(Equal(apisDashboardsV1AstWidgetsCommonLuceneQueryModel))
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel.GroupBy).To(Equal([]string{"testString"}))
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel.Aggregations).To(Equal([]logsv0.ApisDashboardsV1CommonLogsAggregationIntf{apisDashboardsV1CommonLogsAggregationModel}))
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel.Filters).To(Equal([]logsv0.ApisDashboardsV1AstFilterLogsFilter{*apisDashboardsV1AstFilterLogsFilterModel}))
				Expect(apisDashboardsV1AstWidgetsLineChartLogsQueryModel.GroupBys).To(Equal([]logsv0.ApisDashboardsV1CommonObservationField{*apisDashboardsV1CommonObservationFieldModel}))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryValueLogs model
				apisDashboardsV1AstWidgetsLineChartQueryModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueLogs)
				Expect(apisDashboardsV1AstWidgetsLineChartQueryModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartQueryModel.Logs = apisDashboardsV1AstWidgetsLineChartLogsQueryModel
				Expect(apisDashboardsV1AstWidgetsLineChartQueryModel.Logs).To(Equal(apisDashboardsV1AstWidgetsLineChartLogsQueryModel))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartResolution model
				apisDashboardsV1AstWidgetsLineChartResolutionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
				Expect(apisDashboardsV1AstWidgetsLineChartResolutionModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval = core.StringPtr("1m")
				apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented = core.Int64Ptr(int64(100))
				Expect(apisDashboardsV1AstWidgetsLineChartResolutionModel.Interval).To(Equal(core.StringPtr("1m")))
				Expect(apisDashboardsV1AstWidgetsLineChartResolutionModel.BucketsPresented).To(Equal(core.Int64Ptr(int64(100))))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChartQueryDefinition model
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query = apisDashboardsV1AstWidgetsLineChartQueryModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate = core.StringPtr("{{severity}}")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit = core.StringPtr("10")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit = core.StringPtr("usd")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType = core.StringPtr("logarithmic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name = core.StringPtr("CPU usage")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible = core.BoolPtr(true)
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme = core.StringPtr("classic")
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution = apisDashboardsV1AstWidgetsLineChartResolutionModel
				apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType = core.StringPtr("archive")
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Query).To(Equal(apisDashboardsV1AstWidgetsLineChartQueryModel))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesNameTemplate).To(Equal(core.StringPtr("{{severity}}")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.SeriesCountLimit).To(Equal(core.StringPtr("10")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Unit).To(Equal(core.StringPtr("usd")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ScaleType).To(Equal(core.StringPtr("logarithmic")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Name).To(Equal(core.StringPtr("CPU usage")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.IsVisible).To(Equal(core.BoolPtr(true)))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.ColorScheme).To(Equal(core.StringPtr("classic")))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.Resolution).To(Equal(apisDashboardsV1AstWidgetsLineChartResolutionModel))
				Expect(apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel.DataModeType).To(Equal(core.StringPtr("archive")))

				// Construct an instance of the ApisDashboardsV1AstWidgetsLineChart model
				apisDashboardsV1AstWidgetsLineChartModel := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
				Expect(apisDashboardsV1AstWidgetsLineChartModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetsLineChartModel.Legend = apisDashboardsV1AstWidgetsCommonLegendModel
				apisDashboardsV1AstWidgetsLineChartModel.Tooltip = apisDashboardsV1AstWidgetsLineChartTooltipModel
				apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions = []logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}
				apisDashboardsV1AstWidgetsLineChartModel.StackedLine = core.StringPtr("relative")
				Expect(apisDashboardsV1AstWidgetsLineChartModel.Legend).To(Equal(apisDashboardsV1AstWidgetsCommonLegendModel))
				Expect(apisDashboardsV1AstWidgetsLineChartModel.Tooltip).To(Equal(apisDashboardsV1AstWidgetsLineChartTooltipModel))
				Expect(apisDashboardsV1AstWidgetsLineChartModel.QueryDefinitions).To(Equal([]logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition{*apisDashboardsV1AstWidgetsLineChartQueryDefinitionModel}))
				Expect(apisDashboardsV1AstWidgetsLineChartModel.StackedLine).To(Equal(core.StringPtr("relative")))

				// Construct an instance of the ApisDashboardsV1AstWidgetDefinitionValueLineChart model
				apisDashboardsV1AstWidgetDefinitionModel := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
				Expect(apisDashboardsV1AstWidgetDefinitionModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetDefinitionModel.LineChart = apisDashboardsV1AstWidgetsLineChartModel
				Expect(apisDashboardsV1AstWidgetDefinitionModel.LineChart).To(Equal(apisDashboardsV1AstWidgetsLineChartModel))

				// Construct an instance of the ApisDashboardsV1AstWidget model
				apisDashboardsV1AstWidgetModel := new(logsv0.ApisDashboardsV1AstWidget)
				Expect(apisDashboardsV1AstWidgetModel).ToNot(BeNil())
				apisDashboardsV1AstWidgetModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstWidgetModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstWidgetModel.Title = core.StringPtr("Response time")
				apisDashboardsV1AstWidgetModel.Description = core.StringPtr("The average response time of the system")
				apisDashboardsV1AstWidgetModel.Definition = apisDashboardsV1AstWidgetDefinitionModel
				apisDashboardsV1AstWidgetModel.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1AstWidgetModel.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				Expect(apisDashboardsV1AstWidgetModel.Href).To(Equal(core.StringPtr("testString")))
				Expect(apisDashboardsV1AstWidgetModel.ID).To(Equal(apisDashboardsV1UUIDModel))
				Expect(apisDashboardsV1AstWidgetModel.Title).To(Equal(core.StringPtr("Response time")))
				Expect(apisDashboardsV1AstWidgetModel.Description).To(Equal(core.StringPtr("The average response time of the system")))
				Expect(apisDashboardsV1AstWidgetModel.Definition).To(Equal(apisDashboardsV1AstWidgetDefinitionModel))
				Expect(apisDashboardsV1AstWidgetModel.CreatedAt).To(Equal(CreateMockDateTime("2021-01-01T00:00:00.000Z")))
				Expect(apisDashboardsV1AstWidgetModel.UpdatedAt).To(Equal(CreateMockDateTime("2021-01-01T00:00:00.000Z")))

				// Construct an instance of the ApisDashboardsV1AstRow model
				apisDashboardsV1AstRowModel := new(logsv0.ApisDashboardsV1AstRow)
				Expect(apisDashboardsV1AstRowModel).ToNot(BeNil())
				apisDashboardsV1AstRowModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstRowModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstRowModel.Appearance = apisDashboardsV1AstRowAppearanceModel
				apisDashboardsV1AstRowModel.Widgets = []logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}
				Expect(apisDashboardsV1AstRowModel.Href).To(Equal(core.StringPtr("testString")))
				Expect(apisDashboardsV1AstRowModel.ID).To(Equal(apisDashboardsV1UUIDModel))
				Expect(apisDashboardsV1AstRowModel.Appearance).To(Equal(apisDashboardsV1AstRowAppearanceModel))
				Expect(apisDashboardsV1AstRowModel.Widgets).To(Equal([]logsv0.ApisDashboardsV1AstWidget{*apisDashboardsV1AstWidgetModel}))

				// Construct an instance of the ApisDashboardsV1AstSection model
				apisDashboardsV1AstSectionModel := new(logsv0.ApisDashboardsV1AstSection)
				Expect(apisDashboardsV1AstSectionModel).ToNot(BeNil())
				apisDashboardsV1AstSectionModel.Href = core.StringPtr("testString")
				apisDashboardsV1AstSectionModel.ID = apisDashboardsV1UUIDModel
				apisDashboardsV1AstSectionModel.Rows = []logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}
				Expect(apisDashboardsV1AstSectionModel.Href).To(Equal(core.StringPtr("testString")))
				Expect(apisDashboardsV1AstSectionModel.ID).To(Equal(apisDashboardsV1UUIDModel))
				Expect(apisDashboardsV1AstSectionModel.Rows).To(Equal([]logsv0.ApisDashboardsV1AstRow{*apisDashboardsV1AstRowModel}))

				// Construct an instance of the ApisDashboardsV1AstLayout model
				apisDashboardsV1AstLayoutModel := new(logsv0.ApisDashboardsV1AstLayout)
				Expect(apisDashboardsV1AstLayoutModel).ToNot(BeNil())
				apisDashboardsV1AstLayoutModel.Sections = []logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}
				Expect(apisDashboardsV1AstLayoutModel.Sections).To(Equal([]logsv0.ApisDashboardsV1AstSection{*apisDashboardsV1AstSectionModel}))

				// Construct an instance of the ApisDashboardsV1AstMultiSelectLogsPathSource model
				apisDashboardsV1AstMultiSelectLogsPathSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
				Expect(apisDashboardsV1AstMultiSelectLogsPathSourceModel).ToNot(BeNil())
				apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField = apisDashboardsV1CommonObservationFieldModel
				Expect(apisDashboardsV1AstMultiSelectLogsPathSourceModel.ObservationField).To(Equal(apisDashboardsV1CommonObservationFieldModel))

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSourceValueLogsPath model
				apisDashboardsV1AstMultiSelectSourceModel := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
				Expect(apisDashboardsV1AstMultiSelectSourceModel).ToNot(BeNil())
				apisDashboardsV1AstMultiSelectSourceModel.LogsPath = apisDashboardsV1AstMultiSelectLogsPathSourceModel
				Expect(apisDashboardsV1AstMultiSelectSourceModel.LogsPath).To(Equal(apisDashboardsV1AstMultiSelectLogsPathSourceModel))

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty model
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)
				Expect(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel).ToNot(BeNil())
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperty("foo", "testString")
				Expect(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.GetProperties()).ToNot(BeEmpty())
				Expect(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.GetProperty("foo")).To(Equal("testString"))

				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperties(nil)
				Expect(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.GetProperties()).To(BeEmpty())

				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelExpectedMap := make(map[string]interface{})
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelExpectedMap["foo"] = "testString"
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.SetProperties(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelExpectedMap)
				apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelActualMap := apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel.GetProperties()
				Expect(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelActualMap).To(Equal(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModelExpectedMap))

				// Construct an instance of the ApisDashboardsV1AstMultiSelectSelectionValueAll model
				apisDashboardsV1AstMultiSelectSelectionModel := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
				Expect(apisDashboardsV1AstMultiSelectSelectionModel).ToNot(BeNil())
				apisDashboardsV1AstMultiSelectSelectionModel.All = apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel
				Expect(apisDashboardsV1AstMultiSelectSelectionModel.All).To(Equal(apisDashboardsV1AstMultiSelectSelectionAllSelectionEmptyModel))

				// Construct an instance of the ApisDashboardsV1AstMultiSelect model
				apisDashboardsV1AstMultiSelectModel := new(logsv0.ApisDashboardsV1AstMultiSelect)
				Expect(apisDashboardsV1AstMultiSelectModel).ToNot(BeNil())
				apisDashboardsV1AstMultiSelectModel.Source = apisDashboardsV1AstMultiSelectSourceModel
				apisDashboardsV1AstMultiSelectModel.Selection = apisDashboardsV1AstMultiSelectSelectionModel
				apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection = core.StringPtr("desc")
				Expect(apisDashboardsV1AstMultiSelectModel.Source).To(Equal(apisDashboardsV1AstMultiSelectSourceModel))
				Expect(apisDashboardsV1AstMultiSelectModel.Selection).To(Equal(apisDashboardsV1AstMultiSelectSelectionModel))
				Expect(apisDashboardsV1AstMultiSelectModel.ValuesOrderDirection).To(Equal(core.StringPtr("desc")))

				// Construct an instance of the ApisDashboardsV1AstVariableDefinitionValueMultiSelect model
				apisDashboardsV1AstVariableDefinitionModel := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
				Expect(apisDashboardsV1AstVariableDefinitionModel).ToNot(BeNil())
				apisDashboardsV1AstVariableDefinitionModel.MultiSelect = apisDashboardsV1AstMultiSelectModel
				Expect(apisDashboardsV1AstVariableDefinitionModel.MultiSelect).To(Equal(apisDashboardsV1AstMultiSelectModel))

				// Construct an instance of the ApisDashboardsV1AstVariable model
				apisDashboardsV1AstVariableModel := new(logsv0.ApisDashboardsV1AstVariable)
				Expect(apisDashboardsV1AstVariableModel).ToNot(BeNil())
				apisDashboardsV1AstVariableModel.Name = core.StringPtr("service_name")
				apisDashboardsV1AstVariableModel.Definition = apisDashboardsV1AstVariableDefinitionModel
				apisDashboardsV1AstVariableModel.DisplayName = core.StringPtr("Service Name")
				Expect(apisDashboardsV1AstVariableModel.Name).To(Equal(core.StringPtr("service_name")))
				Expect(apisDashboardsV1AstVariableModel.Definition).To(Equal(apisDashboardsV1AstVariableDefinitionModel))
				Expect(apisDashboardsV1AstVariableModel.DisplayName).To(Equal(core.StringPtr("Service Name")))

				// Construct an instance of the ApisDashboardsV1AstFilterSourceValueLogs model
				apisDashboardsV1AstFilterSourceModel := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
				Expect(apisDashboardsV1AstFilterSourceModel).ToNot(BeNil())
				apisDashboardsV1AstFilterSourceModel.Logs = apisDashboardsV1AstFilterLogsFilterModel
				Expect(apisDashboardsV1AstFilterSourceModel.Logs).To(Equal(apisDashboardsV1AstFilterLogsFilterModel))

				// Construct an instance of the ApisDashboardsV1AstFilter model
				apisDashboardsV1AstFilterModel := new(logsv0.ApisDashboardsV1AstFilter)
				Expect(apisDashboardsV1AstFilterModel).ToNot(BeNil())
				apisDashboardsV1AstFilterModel.Source = apisDashboardsV1AstFilterSourceModel
				apisDashboardsV1AstFilterModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstFilterModel.Collapsed = core.BoolPtr(true)
				Expect(apisDashboardsV1AstFilterModel.Source).To(Equal(apisDashboardsV1AstFilterSourceModel))
				Expect(apisDashboardsV1AstFilterModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apisDashboardsV1AstFilterModel.Collapsed).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the ApisDashboardsV1CommonPromQlQuery model
				apisDashboardsV1CommonPromQlQueryModel := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
				Expect(apisDashboardsV1CommonPromQlQueryModel).ToNot(BeNil())
				apisDashboardsV1CommonPromQlQueryModel.Value = core.StringPtr("sum(up)")
				Expect(apisDashboardsV1CommonPromQlQueryModel.Value).To(Equal(core.StringPtr("sum(up)")))

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty model
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel).ToNot(BeNil())
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperty("foo", "testString")
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.GetProperties()).ToNot(BeEmpty())
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.GetProperty("foo")).To(Equal("testString"))

				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperties(nil)
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.GetProperties()).To(BeEmpty())

				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelExpectedMap := make(map[string]interface{})
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelExpectedMap["foo"] = "testString"
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.SetProperties(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelExpectedMap)
				apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelActualMap := apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel.GetProperties()
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelActualMap).To(Equal(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModelExpectedMap))

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSourceStrategy model
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStrategyModel).ToNot(BeNil())
				apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric = apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel
				Expect(apisDashboardsV1AstAnnotationMetricsSourceStrategyModel.StartTimeMetric).To(Equal(apisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmptyModel))

				// Construct an instance of the ApisDashboardsV1AstAnnotationMetricsSource model
				apisDashboardsV1AstAnnotationMetricsSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
				Expect(apisDashboardsV1AstAnnotationMetricsSourceModel).ToNot(BeNil())
				apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery = apisDashboardsV1CommonPromQlQueryModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy = apisDashboardsV1AstAnnotationMetricsSourceStrategyModel
				apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate = core.StringPtr("testString")
				apisDashboardsV1AstAnnotationMetricsSourceModel.Labels = []string{"testString"}
				Expect(apisDashboardsV1AstAnnotationMetricsSourceModel.PromqlQuery).To(Equal(apisDashboardsV1CommonPromQlQueryModel))
				Expect(apisDashboardsV1AstAnnotationMetricsSourceModel.Strategy).To(Equal(apisDashboardsV1AstAnnotationMetricsSourceStrategyModel))
				Expect(apisDashboardsV1AstAnnotationMetricsSourceModel.MessageTemplate).To(Equal(core.StringPtr("testString")))
				Expect(apisDashboardsV1AstAnnotationMetricsSourceModel.Labels).To(Equal([]string{"testString"}))

				// Construct an instance of the ApisDashboardsV1AstAnnotationSourceValueMetrics model
				apisDashboardsV1AstAnnotationSourceModel := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
				Expect(apisDashboardsV1AstAnnotationSourceModel).ToNot(BeNil())
				apisDashboardsV1AstAnnotationSourceModel.Metrics = apisDashboardsV1AstAnnotationMetricsSourceModel
				Expect(apisDashboardsV1AstAnnotationSourceModel.Metrics).To(Equal(apisDashboardsV1AstAnnotationMetricsSourceModel))

				// Construct an instance of the ApisDashboardsV1AstAnnotation model
				apisDashboardsV1AstAnnotationModel := new(logsv0.ApisDashboardsV1AstAnnotation)
				Expect(apisDashboardsV1AstAnnotationModel).ToNot(BeNil())
				apisDashboardsV1AstAnnotationModel.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				apisDashboardsV1AstAnnotationModel.Name = core.StringPtr("Deployments")
				apisDashboardsV1AstAnnotationModel.Enabled = core.BoolPtr(true)
				apisDashboardsV1AstAnnotationModel.Source = apisDashboardsV1AstAnnotationSourceModel
				Expect(apisDashboardsV1AstAnnotationModel.Href).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(apisDashboardsV1AstAnnotationModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(apisDashboardsV1AstAnnotationModel.Name).To(Equal(core.StringPtr("Deployments")))
				Expect(apisDashboardsV1AstAnnotationModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apisDashboardsV1AstAnnotationModel.Source).To(Equal(apisDashboardsV1AstAnnotationSourceModel))

				// Construct an instance of the ApisDashboardsV1CommonTimeFrame model
				apisDashboardsV1CommonTimeFrameModel := new(logsv0.ApisDashboardsV1CommonTimeFrame)
				Expect(apisDashboardsV1CommonTimeFrameModel).ToNot(BeNil())
				apisDashboardsV1CommonTimeFrameModel.From = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				apisDashboardsV1CommonTimeFrameModel.To = CreateMockDateTime("2021-01-01T00:00:00.000Z")
				Expect(apisDashboardsV1CommonTimeFrameModel.From).To(Equal(CreateMockDateTime("2021-01-01T00:00:00.000Z")))
				Expect(apisDashboardsV1CommonTimeFrameModel.To).To(Equal(CreateMockDateTime("2021-01-01T00:00:00.000Z")))

				// Construct an instance of the DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame model
				dashboardModel := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame)
				Expect(dashboardModel).ToNot(BeNil())
				dashboardModel.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
				dashboardModel.Name = core.StringPtr("My Dashboard")
				dashboardModel.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
				dashboardModel.Layout = apisDashboardsV1AstLayoutModel
				dashboardModel.Variables = []logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}
				dashboardModel.Filters = []logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}
				dashboardModel.Annotations = []logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}
				dashboardModel.AbsoluteTimeFrame = apisDashboardsV1CommonTimeFrameModel
				Expect(dashboardModel.Href).To(Equal(core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")))
				Expect(dashboardModel.ID).To(Equal(core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")))
				Expect(dashboardModel.Name).To(Equal(core.StringPtr("My Dashboard")))
				Expect(dashboardModel.Description).To(Equal(core.StringPtr("This dashboard shows the performance of our production environment.")))
				Expect(dashboardModel.Layout).To(Equal(apisDashboardsV1AstLayoutModel))
				Expect(dashboardModel.Variables).To(Equal([]logsv0.ApisDashboardsV1AstVariable{*apisDashboardsV1AstVariableModel}))
				Expect(dashboardModel.Filters).To(Equal([]logsv0.ApisDashboardsV1AstFilter{*apisDashboardsV1AstFilterModel}))
				Expect(dashboardModel.Annotations).To(Equal([]logsv0.ApisDashboardsV1AstAnnotation{*apisDashboardsV1AstAnnotationModel}))
				Expect(dashboardModel.AbsoluteTimeFrame).To(Equal(apisDashboardsV1CommonTimeFrameModel))

				// Construct an instance of the ReplaceDashboardOptions model
				dashboardID := "testString"
				var dashboard logsv0.DashboardIntf = nil
				replaceDashboardOptionsModel := logsService.NewReplaceDashboardOptions(dashboardID, dashboard)
				replaceDashboardOptionsModel.SetDashboardID("testString")
				replaceDashboardOptionsModel.SetDashboard(dashboardModel)
				replaceDashboardOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceDashboardOptionsModel).ToNot(BeNil())
				Expect(replaceDashboardOptionsModel.DashboardID).To(Equal(core.StringPtr("testString")))
				Expect(replaceDashboardOptionsModel.Dashboard).To(Equal(dashboardModel))
				Expect(replaceDashboardOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceDefaultDashboardOptions successfully`, func() {
				// Construct an instance of the ReplaceDefaultDashboardOptions model
				dashboardID := "testString"
				replaceDefaultDashboardOptionsModel := logsService.NewReplaceDefaultDashboardOptions(dashboardID)
				replaceDefaultDashboardOptionsModel.SetDashboardID("testString")
				replaceDefaultDashboardOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceDefaultDashboardOptionsModel).ToNot(BeNil())
				Expect(replaceDefaultDashboardOptionsModel.DashboardID).To(Equal(core.StringPtr("testString")))
				Expect(replaceDefaultDashboardOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceE2mOptions successfully`, func() {
				// Construct an instance of the ApisEvents2metricsV2MetricLabel model
				apisEvents2metricsV2MetricLabelModel := new(logsv0.ApisEvents2metricsV2MetricLabel)
				Expect(apisEvents2metricsV2MetricLabelModel).ToNot(BeNil())
				apisEvents2metricsV2MetricLabelModel.TargetLabel = core.StringPtr("alias_label_name")
				apisEvents2metricsV2MetricLabelModel.SourceField = core.StringPtr("log_obj.string_value")
				Expect(apisEvents2metricsV2MetricLabelModel.TargetLabel).To(Equal(core.StringPtr("alias_label_name")))
				Expect(apisEvents2metricsV2MetricLabelModel.SourceField).To(Equal(core.StringPtr("log_obj.string_value")))

				// Construct an instance of the ApisEvents2metricsV2E2mAggSamples model
				apisEvents2metricsV2E2mAggSamplesModel := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
				Expect(apisEvents2metricsV2E2mAggSamplesModel).ToNot(BeNil())
				apisEvents2metricsV2E2mAggSamplesModel.SampleType = core.StringPtr("max")
				Expect(apisEvents2metricsV2E2mAggSamplesModel.SampleType).To(Equal(core.StringPtr("max")))

				// Construct an instance of the ApisEvents2metricsV2AggregationAggMetadataSamples model
				apisEvents2metricsV2AggregationModel := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
				Expect(apisEvents2metricsV2AggregationModel).ToNot(BeNil())
				apisEvents2metricsV2AggregationModel.Enabled = core.BoolPtr(true)
				apisEvents2metricsV2AggregationModel.AggType = core.StringPtr("samples")
				apisEvents2metricsV2AggregationModel.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
				apisEvents2metricsV2AggregationModel.Samples = apisEvents2metricsV2E2mAggSamplesModel
				Expect(apisEvents2metricsV2AggregationModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(apisEvents2metricsV2AggregationModel.AggType).To(Equal(core.StringPtr("samples")))
				Expect(apisEvents2metricsV2AggregationModel.TargetMetricName).To(Equal(core.StringPtr("alias_field_name_agg_func")))
				Expect(apisEvents2metricsV2AggregationModel.Samples).To(Equal(apisEvents2metricsV2E2mAggSamplesModel))

				// Construct an instance of the ApisEvents2metricsV2MetricField model
				apisEvents2metricsV2MetricFieldModel := new(logsv0.ApisEvents2metricsV2MetricField)
				Expect(apisEvents2metricsV2MetricFieldModel).ToNot(BeNil())
				apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName = core.StringPtr("alias_field_name")
				apisEvents2metricsV2MetricFieldModel.SourceField = core.StringPtr("log_obj.numeric_field")
				apisEvents2metricsV2MetricFieldModel.Aggregations = []logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}
				Expect(apisEvents2metricsV2MetricFieldModel.TargetBaseMetricName).To(Equal(core.StringPtr("alias_field_name")))
				Expect(apisEvents2metricsV2MetricFieldModel.SourceField).To(Equal(core.StringPtr("log_obj.numeric_field")))
				Expect(apisEvents2metricsV2MetricFieldModel.Aggregations).To(Equal([]logsv0.ApisEvents2metricsV2AggregationIntf{apisEvents2metricsV2AggregationModel}))

				// Construct an instance of the ApisLogs2metricsV2LogsQuery model
				apisLogs2metricsV2LogsQueryModel := new(logsv0.ApisLogs2metricsV2LogsQuery)
				Expect(apisLogs2metricsV2LogsQueryModel).ToNot(BeNil())
				apisLogs2metricsV2LogsQueryModel.Lucene = core.StringPtr("log_obj.numeric_field: [50 TO 100]")
				apisLogs2metricsV2LogsQueryModel.Alias = core.StringPtr("new_query")
				apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters = []string{"app_name"}
				apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters = []string{"sub_name"}
				apisLogs2metricsV2LogsQueryModel.SeverityFilters = []string{"critical"}
				Expect(apisLogs2metricsV2LogsQueryModel.Lucene).To(Equal(core.StringPtr("log_obj.numeric_field: [50 TO 100]")))
				Expect(apisLogs2metricsV2LogsQueryModel.Alias).To(Equal(core.StringPtr("new_query")))
				Expect(apisLogs2metricsV2LogsQueryModel.ApplicationnameFilters).To(Equal([]string{"app_name"}))
				Expect(apisLogs2metricsV2LogsQueryModel.SubsystemnameFilters).To(Equal([]string{"sub_name"}))
				Expect(apisLogs2metricsV2LogsQueryModel.SeverityFilters).To(Equal([]string{"critical"}))

				// Construct an instance of the Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery model
				event2MetricPrototypeModel := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
				Expect(event2MetricPrototypeModel).ToNot(BeNil())
				event2MetricPrototypeModel.Name = core.StringPtr("Service catalog latency")
				event2MetricPrototypeModel.Description = core.StringPtr("avg and max the latency of catalog service")
				event2MetricPrototypeModel.PermutationsLimit = core.Int64Ptr(int64(30000))
				event2MetricPrototypeModel.MetricLabels = []logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}
				event2MetricPrototypeModel.MetricFields = []logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}
				event2MetricPrototypeModel.Type = core.StringPtr("logs2metrics")
				event2MetricPrototypeModel.LogsQuery = apisLogs2metricsV2LogsQueryModel
				Expect(event2MetricPrototypeModel.Name).To(Equal(core.StringPtr("Service catalog latency")))
				Expect(event2MetricPrototypeModel.Description).To(Equal(core.StringPtr("avg and max the latency of catalog service")))
				Expect(event2MetricPrototypeModel.PermutationsLimit).To(Equal(core.Int64Ptr(int64(30000))))
				Expect(event2MetricPrototypeModel.MetricLabels).To(Equal([]logsv0.ApisEvents2metricsV2MetricLabel{*apisEvents2metricsV2MetricLabelModel}))
				Expect(event2MetricPrototypeModel.MetricFields).To(Equal([]logsv0.ApisEvents2metricsV2MetricField{*apisEvents2metricsV2MetricFieldModel}))
				Expect(event2MetricPrototypeModel.Type).To(Equal(core.StringPtr("logs2metrics")))
				Expect(event2MetricPrototypeModel.LogsQuery).To(Equal(apisLogs2metricsV2LogsQueryModel))

				// Construct an instance of the ReplaceE2mOptions model
				id := "d6a3658e-78d2-47d0-9b81-b2c551f01b09"
				var event2MetricPrototype logsv0.Event2MetricPrototypeIntf = nil
				replaceE2mOptionsModel := logsService.NewReplaceE2mOptions(id, event2MetricPrototype)
				replaceE2mOptionsModel.SetID("d6a3658e-78d2-47d0-9b81-b2c551f01b09")
				replaceE2mOptionsModel.SetEvent2MetricPrototype(event2MetricPrototypeModel)
				replaceE2mOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceE2mOptionsModel).ToNot(BeNil())
				Expect(replaceE2mOptionsModel.ID).To(Equal(core.StringPtr("d6a3658e-78d2-47d0-9b81-b2c551f01b09")))
				Expect(replaceE2mOptionsModel.Event2MetricPrototype).To(Equal(event2MetricPrototypeModel))
				Expect(replaceE2mOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceViewFolderOptions successfully`, func() {
				// Construct an instance of the ReplaceViewFolderOptions model
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				replaceViewFolderOptionsName := "My Folder"
				replaceViewFolderOptionsModel := logsService.NewReplaceViewFolderOptions(id, replaceViewFolderOptionsName)
				replaceViewFolderOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				replaceViewFolderOptionsModel.SetName("My Folder")
				replaceViewFolderOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceViewFolderOptionsModel).ToNot(BeNil())
				Expect(replaceViewFolderOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(replaceViewFolderOptionsModel.Name).To(Equal(core.StringPtr("My Folder")))
				Expect(replaceViewFolderOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceViewOptions successfully`, func() {
				// Construct an instance of the ApisViewsV1SearchQuery model
				apisViewsV1SearchQueryModel := new(logsv0.ApisViewsV1SearchQuery)
				Expect(apisViewsV1SearchQueryModel).ToNot(BeNil())
				apisViewsV1SearchQueryModel.Query = core.StringPtr("logs new")
				Expect(apisViewsV1SearchQueryModel.Query).To(Equal(core.StringPtr("logs new")))

				// Construct an instance of the ApisViewsV1CustomTimeSelection model
				apisViewsV1CustomTimeSelectionModel := new(logsv0.ApisViewsV1CustomTimeSelection)
				Expect(apisViewsV1CustomTimeSelectionModel).ToNot(BeNil())
				apisViewsV1CustomTimeSelectionModel.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
				apisViewsV1CustomTimeSelectionModel.ToTime = CreateMockDateTime("2024-01-25T11:37:13.238Z")
				Expect(apisViewsV1CustomTimeSelectionModel.FromTime).To(Equal(CreateMockDateTime("2024-01-25T11:31:43.152Z")))
				Expect(apisViewsV1CustomTimeSelectionModel.ToTime).To(Equal(CreateMockDateTime("2024-01-25T11:37:13.238Z")))

				// Construct an instance of the ApisViewsV1TimeSelectionSelectionTypeCustomSelection model
				apisViewsV1TimeSelectionModel := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
				Expect(apisViewsV1TimeSelectionModel).ToNot(BeNil())
				apisViewsV1TimeSelectionModel.CustomSelection = apisViewsV1CustomTimeSelectionModel
				Expect(apisViewsV1TimeSelectionModel.CustomSelection).To(Equal(apisViewsV1CustomTimeSelectionModel))

				// Construct an instance of the ApisViewsV1Filter model
				apisViewsV1FilterModel := new(logsv0.ApisViewsV1Filter)
				Expect(apisViewsV1FilterModel).ToNot(BeNil())
				apisViewsV1FilterModel.Name = core.StringPtr("applicationName")
				apisViewsV1FilterModel.SelectedValues = map[string]bool{"key1": true}
				Expect(apisViewsV1FilterModel.Name).To(Equal(core.StringPtr("applicationName")))
				Expect(apisViewsV1FilterModel.SelectedValues).To(Equal(map[string]bool{"key1": true}))

				// Construct an instance of the ApisViewsV1SelectedFilters model
				apisViewsV1SelectedFiltersModel := new(logsv0.ApisViewsV1SelectedFilters)
				Expect(apisViewsV1SelectedFiltersModel).ToNot(BeNil())
				apisViewsV1SelectedFiltersModel.Filters = []logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}
				Expect(apisViewsV1SelectedFiltersModel.Filters).To(Equal([]logsv0.ApisViewsV1Filter{*apisViewsV1FilterModel}))

				// Construct an instance of the ReplaceViewOptions model
				id := int64(52)
				replaceViewOptionsName := "Logs view"
				var replaceViewOptionsSearchQuery *logsv0.ApisViewsV1SearchQuery = nil
				var replaceViewOptionsTimeSelection logsv0.ApisViewsV1TimeSelectionIntf = nil
				replaceViewOptionsModel := logsService.NewReplaceViewOptions(id, replaceViewOptionsName, replaceViewOptionsSearchQuery, replaceViewOptionsTimeSelection)
				replaceViewOptionsModel.SetID(int64(52))
				replaceViewOptionsModel.SetName("Logs view")
				replaceViewOptionsModel.SetSearchQuery(apisViewsV1SearchQueryModel)
				replaceViewOptionsModel.SetTimeSelection(apisViewsV1TimeSelectionModel)
				replaceViewOptionsModel.SetFilters(apisViewsV1SelectedFiltersModel)
				replaceViewOptionsModel.SetFolderID(CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673"))
				replaceViewOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceViewOptionsModel).ToNot(BeNil())
				Expect(replaceViewOptionsModel.ID).To(Equal(core.Int64Ptr(int64(52))))
				Expect(replaceViewOptionsModel.Name).To(Equal(core.StringPtr("Logs view")))
				Expect(replaceViewOptionsModel.SearchQuery).To(Equal(apisViewsV1SearchQueryModel))
				Expect(replaceViewOptionsModel.TimeSelection).To(Equal(apisViewsV1TimeSelectionModel))
				Expect(replaceViewOptionsModel.Filters).To(Equal(apisViewsV1SelectedFiltersModel))
				Expect(replaceViewOptionsModel.FolderID).To(Equal(CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")))
				Expect(replaceViewOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRulesV1AllowParameters successfully`, func() {
				keepBlockedLogs := true
				rule := "^this log should be kept!!!.*$"
				_model, err := logsService.NewRulesV1AllowParameters(keepBlockedLogs, rule)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1ApplicationNameConstraint successfully`, func() {
				value := "my-application"
				_model, err := logsService.NewRulesV1ApplicationNameConstraint(value)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1BlockParameters successfully`, func() {
				keepBlockedLogs := true
				rule := "^this log should be blocked!!!.*$"
				_model, err := logsService.NewRulesV1BlockParameters(keepBlockedLogs, rule)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1CreateRuleGroupRequestCreateRuleSubgroup successfully`, func() {
				rules := []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{}
				order := int64(1)
				_model, err := logsService.NewRulesV1CreateRuleGroupRequestCreateRuleSubgroup(rules, order)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule successfully`, func() {
				sourceField := "log_obj.date_time"
				var parameters logsv0.RulesV1RuleParametersIntf = nil
				enabled := true
				order := int64(1)
				_, err := logsService.NewRulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule(sourceField, parameters, enabled, order)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewRulesV1ExtractParameters successfully`, func() {
				rule := "^http:\\\\/\\\\/my\\\\.service\\\\.com\\\\/#(?P<service>\\\\w+)\\\\-(?P<region>[^_]+)_"
				_model, err := logsService.NewRulesV1ExtractParameters(rule)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1ExtractTimestampParameters successfully`, func() {
				standard := "nanots"
				format := "%Y-%m-%ddT%H:%M:%S.%f%z"
				_model, err := logsService.NewRulesV1ExtractTimestampParameters(standard, format)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1JSONParseParameters successfully`, func() {
				destinationField := "json.content"
				overrideDest := true
				_model, err := logsService.NewRulesV1JSONParseParameters(destinationField, overrideDest)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1JSONStringifyParameters successfully`, func() {
				destinationField := "json.stringified"
				_model, err := logsService.NewRulesV1JSONStringifyParameters(destinationField)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1ParseParameters successfully`, func() {
				destinationField := "text.message"
				rule := "^http:\\\\/\\\\/my\\\\.service\\\\.com\\\\/#(?P<service>\\\\w+)\\\\-(?P<region>[^_]+)$"
				_model, err := logsService.NewRulesV1ParseParameters(destinationField, rule)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1RemoveFieldsParameters successfully`, func() {
				fields := []string{"json.field1", "json.field2"}
				_model, err := logsService.NewRulesV1RemoveFieldsParameters(fields)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1ReplaceParameters successfully`, func() {
				destinationField := "text.message"
				replaceNewVal := "***"
				rule := "the password is (?P<password>[A-Za-z0-9!@#$].)"
				_model, err := logsService.NewRulesV1ReplaceParameters(destinationField, replaceNewVal, rule)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1SeverityConstraint successfully`, func() {
				value := "critical"
				_model, err := logsService.NewRulesV1SeverityConstraint(value)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRulesV1SubsystemNameConstraint successfully`, func() {
				value := "my-subsystem"
				_model, err := logsService.NewRulesV1SubsystemNameConstraint(value)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewUnpinDashboardOptions successfully`, func() {
				// Construct an instance of the UnpinDashboardOptions model
				dashboardID := "testString"
				unpinDashboardOptionsModel := logsService.NewUnpinDashboardOptions(dashboardID)
				unpinDashboardOptionsModel.SetDashboardID("testString")
				unpinDashboardOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(unpinDashboardOptionsModel).ToNot(BeNil())
				Expect(unpinDashboardOptionsModel.DashboardID).To(Equal(core.StringPtr("testString")))
				Expect(unpinDashboardOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateAlertOptions successfully`, func() {
				// Construct an instance of the AlertsV1MetricAlertConditionParameters model
				alertsV1MetricAlertConditionParametersModel := new(logsv0.AlertsV1MetricAlertConditionParameters)
				Expect(alertsV1MetricAlertConditionParametersModel).ToNot(BeNil())
				alertsV1MetricAlertConditionParametersModel.MetricField = core.StringPtr("cpu_usage")
				alertsV1MetricAlertConditionParametersModel.MetricSource = core.StringPtr("prometheus")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperator = core.StringPtr("percentile")
				alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertConditionParametersModel.SwapNullValues = core.BoolPtr(true)
				Expect(alertsV1MetricAlertConditionParametersModel.MetricField).To(Equal(core.StringPtr("cpu_usage")))
				Expect(alertsV1MetricAlertConditionParametersModel.MetricSource).To(Equal(core.StringPtr("prometheus")))
				Expect(alertsV1MetricAlertConditionParametersModel.ArithmeticOperator).To(Equal(core.StringPtr("percentile")))
				Expect(alertsV1MetricAlertConditionParametersModel.ArithmeticOperatorModifier).To(Equal(core.Int64Ptr(int64(1))))
				Expect(alertsV1MetricAlertConditionParametersModel.SampleThresholdPercentage).To(Equal(core.Int64Ptr(int64(100))))
				Expect(alertsV1MetricAlertConditionParametersModel.NonNullPercentage).To(Equal(core.Int64Ptr(int64(100))))
				Expect(alertsV1MetricAlertConditionParametersModel.SwapNullValues).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the AlertsV1MetricAlertPromqlConditionParameters model
				alertsV1MetricAlertPromqlConditionParametersModel := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
				Expect(alertsV1MetricAlertPromqlConditionParametersModel).ToNot(BeNil())
				alertsV1MetricAlertPromqlConditionParametersModel.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
				alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
				alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage = core.Int64Ptr(int64(100))
				alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues = core.BoolPtr(true)
				Expect(alertsV1MetricAlertPromqlConditionParametersModel.PromqlText).To(Equal(core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")))
				Expect(alertsV1MetricAlertPromqlConditionParametersModel.ArithmeticOperatorModifier).To(Equal(core.Int64Ptr(int64(1))))
				Expect(alertsV1MetricAlertPromqlConditionParametersModel.SampleThresholdPercentage).To(Equal(core.Int64Ptr(int64(100))))
				Expect(alertsV1MetricAlertPromqlConditionParametersModel.NonNullPercentage).To(Equal(core.Int64Ptr(int64(100))))
				Expect(alertsV1MetricAlertPromqlConditionParametersModel.SwapNullValues).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the AlertsV1RelatedExtendedData model
				alertsV1RelatedExtendedDataModel := new(logsv0.AlertsV1RelatedExtendedData)
				Expect(alertsV1RelatedExtendedDataModel).ToNot(BeNil())
				alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
				alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman = core.BoolPtr(true)
				Expect(alertsV1RelatedExtendedDataModel.CleanupDeadmanDuration).To(Equal(core.StringPtr("cleanup_deadman_duration_24h")))
				Expect(alertsV1RelatedExtendedDataModel.ShouldTriggerDeadman).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the AlertsV2ConditionParameters model
				alertsV2ConditionParametersModel := new(logsv0.AlertsV2ConditionParameters)
				Expect(alertsV2ConditionParametersModel).ToNot(BeNil())
				alertsV2ConditionParametersModel.Threshold = core.Float64Ptr(float64(1))
				alertsV2ConditionParametersModel.Timeframe = core.StringPtr("timeframe_10_min")
				alertsV2ConditionParametersModel.GroupBy = []string{"coralogix.metadata.applicationName"}
				alertsV2ConditionParametersModel.MetricAlertParameters = alertsV1MetricAlertConditionParametersModel
				alertsV2ConditionParametersModel.MetricAlertPromqlParameters = alertsV1MetricAlertPromqlConditionParametersModel
				alertsV2ConditionParametersModel.IgnoreInfinity = core.BoolPtr(true)
				alertsV2ConditionParametersModel.RelativeTimeframe = core.StringPtr("hour_or_unspecified")
				alertsV2ConditionParametersModel.CardinalityFields = []string{}
				alertsV2ConditionParametersModel.RelatedExtendedData = alertsV1RelatedExtendedDataModel
				Expect(alertsV2ConditionParametersModel.Threshold).To(Equal(core.Float64Ptr(float64(1))))
				Expect(alertsV2ConditionParametersModel.Timeframe).To(Equal(core.StringPtr("timeframe_10_min")))
				Expect(alertsV2ConditionParametersModel.GroupBy).To(Equal([]string{"coralogix.metadata.applicationName"}))
				Expect(alertsV2ConditionParametersModel.MetricAlertParameters).To(Equal(alertsV1MetricAlertConditionParametersModel))
				Expect(alertsV2ConditionParametersModel.MetricAlertPromqlParameters).To(Equal(alertsV1MetricAlertPromqlConditionParametersModel))
				Expect(alertsV2ConditionParametersModel.IgnoreInfinity).To(Equal(core.BoolPtr(true)))
				Expect(alertsV2ConditionParametersModel.RelativeTimeframe).To(Equal(core.StringPtr("hour_or_unspecified")))
				Expect(alertsV2ConditionParametersModel.CardinalityFields).To(Equal([]string{}))
				Expect(alertsV2ConditionParametersModel.RelatedExtendedData).To(Equal(alertsV1RelatedExtendedDataModel))

				// Construct an instance of the AlertsV2MoreThanCondition model
				alertsV2MoreThanConditionModel := new(logsv0.AlertsV2MoreThanCondition)
				Expect(alertsV2MoreThanConditionModel).ToNot(BeNil())
				alertsV2MoreThanConditionModel.Parameters = alertsV2ConditionParametersModel
				alertsV2MoreThanConditionModel.EvaluationWindow = core.StringPtr("rolling_or_unspecified")
				Expect(alertsV2MoreThanConditionModel.Parameters).To(Equal(alertsV2ConditionParametersModel))
				Expect(alertsV2MoreThanConditionModel.EvaluationWindow).To(Equal(core.StringPtr("rolling_or_unspecified")))

				// Construct an instance of the AlertsV2AlertConditionConditionMoreThan model
				alertsV2AlertConditionModel := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
				Expect(alertsV2AlertConditionModel).ToNot(BeNil())
				alertsV2AlertConditionModel.MoreThan = alertsV2MoreThanConditionModel
				Expect(alertsV2AlertConditionModel.MoreThan).To(Equal(alertsV2MoreThanConditionModel))

				// Construct an instance of the AlertsV2AlertNotificationIntegrationTypeIntegrationID model
				alertsV2AlertNotificationModel := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
				Expect(alertsV2AlertNotificationModel).ToNot(BeNil())
				alertsV2AlertNotificationModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
				alertsV2AlertNotificationModel.NotifyOn = core.StringPtr("triggered_and_resolved")
				alertsV2AlertNotificationModel.IntegrationID = core.Int64Ptr(int64(123))
				Expect(alertsV2AlertNotificationModel.RetriggeringPeriodSeconds).To(Equal(core.Int64Ptr(int64(60))))
				Expect(alertsV2AlertNotificationModel.NotifyOn).To(Equal(core.StringPtr("triggered_and_resolved")))
				Expect(alertsV2AlertNotificationModel.IntegrationID).To(Equal(core.Int64Ptr(int64(123))))

				// Construct an instance of the AlertsV2AlertNotificationGroups model
				alertsV2AlertNotificationGroupsModel := new(logsv0.AlertsV2AlertNotificationGroups)
				Expect(alertsV2AlertNotificationGroupsModel).ToNot(BeNil())
				alertsV2AlertNotificationGroupsModel.GroupByFields = []string{"coralogix.metadata.applicationName"}
				alertsV2AlertNotificationGroupsModel.Notifications = []logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}
				Expect(alertsV2AlertNotificationGroupsModel.GroupByFields).To(Equal([]string{"coralogix.metadata.applicationName"}))
				Expect(alertsV2AlertNotificationGroupsModel.Notifications).To(Equal([]logsv0.AlertsV2AlertNotificationIntf{alertsV2AlertNotificationModel}))

				// Construct an instance of the AlertsV1AlertFiltersMetadataFilters model
				alertsV1AlertFiltersMetadataFiltersModel := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
				Expect(alertsV1AlertFiltersMetadataFiltersModel).ToNot(BeNil())
				alertsV1AlertFiltersMetadataFiltersModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersMetadataFiltersModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				Expect(alertsV1AlertFiltersMetadataFiltersModel.Applications).To(Equal([]string{"CpuMonitoring", "WebApi"}))
				Expect(alertsV1AlertFiltersMetadataFiltersModel.Subsystems).To(Equal([]string{"SnapshotGenerator", "PermissionControl"}))

				// Construct an instance of the AlertsV1AlertFiltersRatioAlert model
				alertsV1AlertFiltersRatioAlertModel := new(logsv0.AlertsV1AlertFiltersRatioAlert)
				Expect(alertsV1AlertFiltersRatioAlertModel).ToNot(BeNil())
				alertsV1AlertFiltersRatioAlertModel.Alias = core.StringPtr("TopLevelAlert")
				alertsV1AlertFiltersRatioAlertModel.Text = core.StringPtr("_exists_:\"container_name\"")
				alertsV1AlertFiltersRatioAlertModel.Severities = []string{"critical"}
				alertsV1AlertFiltersRatioAlertModel.Applications = []string{"CpuMonitoring", "WebApi"}
				alertsV1AlertFiltersRatioAlertModel.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
				alertsV1AlertFiltersRatioAlertModel.GroupBy = []string{"Host", "Thread"}
				Expect(alertsV1AlertFiltersRatioAlertModel.Alias).To(Equal(core.StringPtr("TopLevelAlert")))
				Expect(alertsV1AlertFiltersRatioAlertModel.Text).To(Equal(core.StringPtr("_exists_:\"container_name\"")))
				Expect(alertsV1AlertFiltersRatioAlertModel.Severities).To(Equal([]string{"critical"}))
				Expect(alertsV1AlertFiltersRatioAlertModel.Applications).To(Equal([]string{"CpuMonitoring", "WebApi"}))
				Expect(alertsV1AlertFiltersRatioAlertModel.Subsystems).To(Equal([]string{"SnapshotGenerator", "PermissionControl"}))
				Expect(alertsV1AlertFiltersRatioAlertModel.GroupBy).To(Equal([]string{"Host", "Thread"}))

				// Construct an instance of the AlertsV1AlertFilters model
				alertsV1AlertFiltersModel := new(logsv0.AlertsV1AlertFilters)
				Expect(alertsV1AlertFiltersModel).ToNot(BeNil())
				alertsV1AlertFiltersModel.Severities = []string{"info"}
				alertsV1AlertFiltersModel.Metadata = alertsV1AlertFiltersMetadataFiltersModel
				alertsV1AlertFiltersModel.Alias = core.StringPtr("monitorQuery")
				alertsV1AlertFiltersModel.Text = core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")
				alertsV1AlertFiltersModel.RatioAlerts = []logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}
				alertsV1AlertFiltersModel.FilterType = core.StringPtr("text_or_unspecified")
				Expect(alertsV1AlertFiltersModel.Severities).To(Equal([]string{"info"}))
				Expect(alertsV1AlertFiltersModel.Metadata).To(Equal(alertsV1AlertFiltersMetadataFiltersModel))
				Expect(alertsV1AlertFiltersModel.Alias).To(Equal(core.StringPtr("monitorQuery")))
				Expect(alertsV1AlertFiltersModel.Text).To(Equal(core.StringPtr("initiator.id.keyword:iam-ServiceId-10820fd6-c3fe-414e-8fd5-44ce95f7d34d AND action.keyword:cloud-object-storage.object.create")))
				Expect(alertsV1AlertFiltersModel.RatioAlerts).To(Equal([]logsv0.AlertsV1AlertFiltersRatioAlert{*alertsV1AlertFiltersRatioAlertModel}))
				Expect(alertsV1AlertFiltersModel.FilterType).To(Equal(core.StringPtr("text_or_unspecified")))

				// Construct an instance of the AlertsV1Date model
				alertsV1DateModel := new(logsv0.AlertsV1Date)
				Expect(alertsV1DateModel).ToNot(BeNil())
				alertsV1DateModel.Year = core.Int64Ptr(int64(2012))
				alertsV1DateModel.Month = core.Int64Ptr(int64(12))
				alertsV1DateModel.Day = core.Int64Ptr(int64(24))
				Expect(alertsV1DateModel.Year).To(Equal(core.Int64Ptr(int64(2012))))
				Expect(alertsV1DateModel.Month).To(Equal(core.Int64Ptr(int64(12))))
				Expect(alertsV1DateModel.Day).To(Equal(core.Int64Ptr(int64(24))))

				// Construct an instance of the AlertsV1Time model
				alertsV1TimeModel := new(logsv0.AlertsV1Time)
				Expect(alertsV1TimeModel).ToNot(BeNil())
				alertsV1TimeModel.Hours = core.Int64Ptr(int64(18))
				alertsV1TimeModel.Minutes = core.Int64Ptr(int64(30))
				alertsV1TimeModel.Seconds = core.Int64Ptr(int64(0))
				Expect(alertsV1TimeModel.Hours).To(Equal(core.Int64Ptr(int64(18))))
				Expect(alertsV1TimeModel.Minutes).To(Equal(core.Int64Ptr(int64(30))))
				Expect(alertsV1TimeModel.Seconds).To(Equal(core.Int64Ptr(int64(0))))

				// Construct an instance of the AlertsV1TimeRange model
				alertsV1TimeRangeModel := new(logsv0.AlertsV1TimeRange)
				Expect(alertsV1TimeRangeModel).ToNot(BeNil())
				alertsV1TimeRangeModel.Start = alertsV1TimeModel
				alertsV1TimeRangeModel.End = alertsV1TimeModel
				Expect(alertsV1TimeRangeModel.Start).To(Equal(alertsV1TimeModel))
				Expect(alertsV1TimeRangeModel.End).To(Equal(alertsV1TimeModel))

				// Construct an instance of the AlertsV1AlertActiveTimeframe model
				alertsV1AlertActiveTimeframeModel := new(logsv0.AlertsV1AlertActiveTimeframe)
				Expect(alertsV1AlertActiveTimeframeModel).ToNot(BeNil())
				alertsV1AlertActiveTimeframeModel.DaysOfWeek = []string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}
				alertsV1AlertActiveTimeframeModel.Range = alertsV1TimeRangeModel
				Expect(alertsV1AlertActiveTimeframeModel.DaysOfWeek).To(Equal([]string{"sunday", "monday_or_unspecified", "tuesday", "wednesday", "thursday", "friday", "saturday"}))
				Expect(alertsV1AlertActiveTimeframeModel.Range).To(Equal(alertsV1TimeRangeModel))

				// Construct an instance of the AlertsV1AlertActiveWhen model
				alertsV1AlertActiveWhenModel := new(logsv0.AlertsV1AlertActiveWhen)
				Expect(alertsV1AlertActiveWhenModel).ToNot(BeNil())
				alertsV1AlertActiveWhenModel.Timeframes = []logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}
				Expect(alertsV1AlertActiveWhenModel.Timeframes).To(Equal([]logsv0.AlertsV1AlertActiveTimeframe{*alertsV1AlertActiveTimeframeModel}))

				// Construct an instance of the AlertsV1MetaLabel model
				alertsV1MetaLabelModel := new(logsv0.AlertsV1MetaLabel)
				Expect(alertsV1MetaLabelModel).ToNot(BeNil())
				alertsV1MetaLabelModel.Key = core.StringPtr("env")
				alertsV1MetaLabelModel.Value = core.StringPtr("dev")
				Expect(alertsV1MetaLabelModel.Key).To(Equal(core.StringPtr("env")))
				Expect(alertsV1MetaLabelModel.Value).To(Equal(core.StringPtr("dev")))

				// Construct an instance of the AlertsV2AlertIncidentSettings model
				alertsV2AlertIncidentSettingsModel := new(logsv0.AlertsV2AlertIncidentSettings)
				Expect(alertsV2AlertIncidentSettingsModel).ToNot(BeNil())
				alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds = core.Int64Ptr(int64(300))
				alertsV2AlertIncidentSettingsModel.NotifyOn = core.StringPtr("triggered_only")
				alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings = core.BoolPtr(true)
				Expect(alertsV2AlertIncidentSettingsModel.RetriggeringPeriodSeconds).To(Equal(core.Int64Ptr(int64(300))))
				Expect(alertsV2AlertIncidentSettingsModel.NotifyOn).To(Equal(core.StringPtr("triggered_only")))
				Expect(alertsV2AlertIncidentSettingsModel.UseAsNotificationSettings).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the UpdateAlertOptions model
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateAlertOptionsName := "Test alert"
				updateAlertOptionsIsActive := true
				updateAlertOptionsSeverity := "info_or_unspecified"
				var updateAlertOptionsCondition logsv0.AlertsV2AlertConditionIntf = nil
				updateAlertOptionsNotificationGroups := []logsv0.AlertsV2AlertNotificationGroups{}
				var updateAlertOptionsFilters *logsv0.AlertsV1AlertFilters = nil
				updateAlertOptionsModel := logsService.NewUpdateAlertOptions(id, updateAlertOptionsName, updateAlertOptionsIsActive, updateAlertOptionsSeverity, updateAlertOptionsCondition, updateAlertOptionsNotificationGroups, updateAlertOptionsFilters)
				updateAlertOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				updateAlertOptionsModel.SetName("Test alert")
				updateAlertOptionsModel.SetIsActive(true)
				updateAlertOptionsModel.SetSeverity("info_or_unspecified")
				updateAlertOptionsModel.SetCondition(alertsV2AlertConditionModel)
				updateAlertOptionsModel.SetNotificationGroups([]logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel})
				updateAlertOptionsModel.SetFilters(alertsV1AlertFiltersModel)
				updateAlertOptionsModel.SetDescription("Alert if the number of logs reaches a threshold")
				updateAlertOptionsModel.SetExpiration(alertsV1DateModel)
				updateAlertOptionsModel.SetActiveWhen(alertsV1AlertActiveWhenModel)
				updateAlertOptionsModel.SetNotificationPayloadFilters([]string{"testString"})
				updateAlertOptionsModel.SetMetaLabels([]logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel})
				updateAlertOptionsModel.SetMetaLabelsStrings([]string{})
				updateAlertOptionsModel.SetIncidentSettings(alertsV2AlertIncidentSettingsModel)
				updateAlertOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateAlertOptionsModel).ToNot(BeNil())
				Expect(updateAlertOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(updateAlertOptionsModel.Name).To(Equal(core.StringPtr("Test alert")))
				Expect(updateAlertOptionsModel.IsActive).To(Equal(core.BoolPtr(true)))
				Expect(updateAlertOptionsModel.Severity).To(Equal(core.StringPtr("info_or_unspecified")))
				Expect(updateAlertOptionsModel.Condition).To(Equal(alertsV2AlertConditionModel))
				Expect(updateAlertOptionsModel.NotificationGroups).To(Equal([]logsv0.AlertsV2AlertNotificationGroups{*alertsV2AlertNotificationGroupsModel}))
				Expect(updateAlertOptionsModel.Filters).To(Equal(alertsV1AlertFiltersModel))
				Expect(updateAlertOptionsModel.Description).To(Equal(core.StringPtr("Alert if the number of logs reaches a threshold")))
				Expect(updateAlertOptionsModel.Expiration).To(Equal(alertsV1DateModel))
				Expect(updateAlertOptionsModel.ActiveWhen).To(Equal(alertsV1AlertActiveWhenModel))
				Expect(updateAlertOptionsModel.NotificationPayloadFilters).To(Equal([]string{"testString"}))
				Expect(updateAlertOptionsModel.MetaLabels).To(Equal([]logsv0.AlertsV1MetaLabel{*alertsV1MetaLabelModel}))
				Expect(updateAlertOptionsModel.MetaLabelsStrings).To(Equal([]string{}))
				Expect(updateAlertOptionsModel.IncidentSettings).To(Equal(alertsV2AlertIncidentSettingsModel))
				Expect(updateAlertOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateOutgoingWebhookOptions successfully`, func() {
				// Construct an instance of the OutgoingWebhooksV1IbmEventNotificationsConfig model
				outgoingWebhooksV1IbmEventNotificationsConfigModel := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
				Expect(outgoingWebhooksV1IbmEventNotificationsConfigModel).ToNot(BeNil())
				outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID = core.StringPtr("eu-es")
				Expect(outgoingWebhooksV1IbmEventNotificationsConfigModel.EventNotificationsInstanceID).To(Equal(CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")))
				Expect(outgoingWebhooksV1IbmEventNotificationsConfigModel.RegionID).To(Equal(core.StringPtr("eu-es")))

				// Construct an instance of the OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications model
				outgoingWebhookPrototypeModel := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
				Expect(outgoingWebhookPrototypeModel).ToNot(BeNil())
				outgoingWebhookPrototypeModel.Type = core.StringPtr("ibm_event_notifications")
				outgoingWebhookPrototypeModel.Name = core.StringPtr("Event Notifications Integration")
				outgoingWebhookPrototypeModel.URL = core.StringPtr("https://example.com")
				outgoingWebhookPrototypeModel.IbmEventNotifications = outgoingWebhooksV1IbmEventNotificationsConfigModel
				Expect(outgoingWebhookPrototypeModel.Type).To(Equal(core.StringPtr("ibm_event_notifications")))
				Expect(outgoingWebhookPrototypeModel.Name).To(Equal(core.StringPtr("Event Notifications Integration")))
				Expect(outgoingWebhookPrototypeModel.URL).To(Equal(core.StringPtr("https://example.com")))
				Expect(outgoingWebhookPrototypeModel.IbmEventNotifications).To(Equal(outgoingWebhooksV1IbmEventNotificationsConfigModel))

				// Construct an instance of the UpdateOutgoingWebhookOptions model
				id := CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
				var outgoingWebhookPrototype logsv0.OutgoingWebhookPrototypeIntf = nil
				updateOutgoingWebhookOptionsModel := logsService.NewUpdateOutgoingWebhookOptions(id, outgoingWebhookPrototype)
				updateOutgoingWebhookOptionsModel.SetID(CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660"))
				updateOutgoingWebhookOptionsModel.SetOutgoingWebhookPrototype(outgoingWebhookPrototypeModel)
				updateOutgoingWebhookOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateOutgoingWebhookOptionsModel).ToNot(BeNil())
				Expect(updateOutgoingWebhookOptionsModel.ID).To(Equal(CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")))
				Expect(updateOutgoingWebhookOptionsModel.OutgoingWebhookPrototype).To(Equal(outgoingWebhookPrototypeModel))
				Expect(updateOutgoingWebhookOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdatePolicyOptions successfully`, func() {
				// Construct an instance of the QuotaV1Rule model
				quotaV1RuleModel := new(logsv0.QuotaV1Rule)
				Expect(quotaV1RuleModel).ToNot(BeNil())
				quotaV1RuleModel.RuleTypeID = core.StringPtr("includes")
				quotaV1RuleModel.Name = core.StringPtr("Rule Name")
				Expect(quotaV1RuleModel.RuleTypeID).To(Equal(core.StringPtr("includes")))
				Expect(quotaV1RuleModel.Name).To(Equal(core.StringPtr("Rule Name")))

				// Construct an instance of the QuotaV1ArchiveRetention model
				quotaV1ArchiveRetentionModel := new(logsv0.QuotaV1ArchiveRetention)
				Expect(quotaV1ArchiveRetentionModel).ToNot(BeNil())
				quotaV1ArchiveRetentionModel.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				Expect(quotaV1ArchiveRetentionModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))

				// Construct an instance of the QuotaV1LogRules model
				quotaV1LogRulesModel := new(logsv0.QuotaV1LogRules)
				Expect(quotaV1LogRulesModel).ToNot(BeNil())
				quotaV1LogRulesModel.Severities = []string{"critical"}
				Expect(quotaV1LogRulesModel.Severities).To(Equal([]string{"critical"}))

				// Construct an instance of the PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules model
				policyPrototypeModel := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
				Expect(policyPrototypeModel).ToNot(BeNil())
				policyPrototypeModel.Name = core.StringPtr("My Policy")
				policyPrototypeModel.Description = core.StringPtr("My Policy Description")
				policyPrototypeModel.Priority = core.StringPtr("type_high")
				policyPrototypeModel.ApplicationRule = quotaV1RuleModel
				policyPrototypeModel.SubsystemRule = quotaV1RuleModel
				policyPrototypeModel.ArchiveRetention = quotaV1ArchiveRetentionModel
				policyPrototypeModel.LogRules = quotaV1LogRulesModel
				Expect(policyPrototypeModel.Name).To(Equal(core.StringPtr("My Policy")))
				Expect(policyPrototypeModel.Description).To(Equal(core.StringPtr("My Policy Description")))
				Expect(policyPrototypeModel.Priority).To(Equal(core.StringPtr("type_high")))
				Expect(policyPrototypeModel.ApplicationRule).To(Equal(quotaV1RuleModel))
				Expect(policyPrototypeModel.SubsystemRule).To(Equal(quotaV1RuleModel))
				Expect(policyPrototypeModel.ArchiveRetention).To(Equal(quotaV1ArchiveRetentionModel))
				Expect(policyPrototypeModel.LogRules).To(Equal(quotaV1LogRulesModel))

				// Construct an instance of the UpdatePolicyOptions model
				id := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				var policyPrototype logsv0.PolicyPrototypeIntf = nil
				updatePolicyOptionsModel := logsService.NewUpdatePolicyOptions(id, policyPrototype)
				updatePolicyOptionsModel.SetID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				updatePolicyOptionsModel.SetPolicyPrototype(policyPrototypeModel)
				updatePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updatePolicyOptionsModel).ToNot(BeNil())
				Expect(updatePolicyOptionsModel.ID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(updatePolicyOptionsModel.PolicyPrototype).To(Equal(policyPrototypeModel))
				Expect(updatePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateRuleGroupOptions successfully`, func() {
				// Construct an instance of the RulesV1ParseParameters model
				rulesV1ParseParametersModel := new(logsv0.RulesV1ParseParameters)
				Expect(rulesV1ParseParametersModel).ToNot(BeNil())
				rulesV1ParseParametersModel.DestinationField = core.StringPtr("text")
				rulesV1ParseParametersModel.Rule = core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")
				Expect(rulesV1ParseParametersModel.DestinationField).To(Equal(core.StringPtr("text")))
				Expect(rulesV1ParseParametersModel.Rule).To(Equal(core.StringPtr("(?P<timestamp>[^,]+),(?P<hostname>[^,]+),(?P<username>[^,]+),(?P<ip>[^,]+),(?P<connectionId>[0-9]+),(?P<queryId>[0-9]+),(?P<operation>[^,]+),(?P<database>[^,]+),'?(?P<object>.*)'?,(?P<returnCode>[0-9]+)")))

				// Construct an instance of the RulesV1RuleParametersRuleParametersParseParameters model
				rulesV1RuleParametersModel := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
				Expect(rulesV1RuleParametersModel).ToNot(BeNil())
				rulesV1RuleParametersModel.ParseParameters = rulesV1ParseParametersModel
				Expect(rulesV1RuleParametersModel.ParseParameters).To(Equal(rulesV1ParseParametersModel))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel).ToNot(BeNil())
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description = core.StringPtr("mysql-parse")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField = core.StringPtr("text")
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters = rulesV1RuleParametersModel
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order = core.Int64Ptr(int64(1))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Name).To(Equal(core.StringPtr("mysql-parse")))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Description).To(Equal(core.StringPtr("mysql-parse")))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.SourceField).To(Equal(core.StringPtr("text")))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Parameters).To(Equal(rulesV1RuleParametersModel))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel.Order).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the RulesV1CreateRuleGroupRequestCreateRuleSubgroup model
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel).ToNot(BeNil())
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules = []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled = core.BoolPtr(true)
				rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order = core.Int64Ptr(int64(1))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Rules).To(Equal([]logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRuleModel}))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel.Order).To(Equal(core.Int64Ptr(int64(1))))

				// Construct an instance of the RulesV1SubsystemNameConstraint model
				rulesV1SubsystemNameConstraintModel := new(logsv0.RulesV1SubsystemNameConstraint)
				Expect(rulesV1SubsystemNameConstraintModel).ToNot(BeNil())
				rulesV1SubsystemNameConstraintModel.Value = core.StringPtr("mysql")
				Expect(rulesV1SubsystemNameConstraintModel.Value).To(Equal(core.StringPtr("mysql")))

				// Construct an instance of the RulesV1RuleMatcherConstraintSubsystemName model
				rulesV1RuleMatcherModel := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
				Expect(rulesV1RuleMatcherModel).ToNot(BeNil())
				rulesV1RuleMatcherModel.SubsystemName = rulesV1SubsystemNameConstraintModel
				Expect(rulesV1RuleMatcherModel.SubsystemName).To(Equal(rulesV1SubsystemNameConstraintModel))

				// Construct an instance of the UpdateRuleGroupOptions model
				groupID := CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
				updateRuleGroupOptionsName := "mysql-extractrule"
				updateRuleGroupOptionsRuleSubgroups := []logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{}
				updateRuleGroupOptionsModel := logsService.NewUpdateRuleGroupOptions(groupID, updateRuleGroupOptionsName, updateRuleGroupOptionsRuleSubgroups)
				updateRuleGroupOptionsModel.SetGroupID(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f"))
				updateRuleGroupOptionsModel.SetName("mysql-extractrule")
				updateRuleGroupOptionsModel.SetRuleSubgroups([]logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel})
				updateRuleGroupOptionsModel.SetDescription("mysql audit logs parser")
				updateRuleGroupOptionsModel.SetEnabled(true)
				updateRuleGroupOptionsModel.SetRuleMatchers([]logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel})
				updateRuleGroupOptionsModel.SetOrder(int64(39))
				updateRuleGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateRuleGroupOptionsModel).ToNot(BeNil())
				Expect(updateRuleGroupOptionsModel.GroupID).To(Equal(CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")))
				Expect(updateRuleGroupOptionsModel.Name).To(Equal(core.StringPtr("mysql-extractrule")))
				Expect(updateRuleGroupOptionsModel.RuleSubgroups).To(Equal([]logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup{*rulesV1CreateRuleGroupRequestCreateRuleSubgroupModel}))
				Expect(updateRuleGroupOptionsModel.Description).To(Equal(core.StringPtr("mysql audit logs parser")))
				Expect(updateRuleGroupOptionsModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(updateRuleGroupOptionsModel.RuleMatchers).To(Equal([]logsv0.RulesV1RuleMatcherIntf{rulesV1RuleMatcherModel}))
				Expect(updateRuleGroupOptionsModel.Order).To(Equal(core.Int64Ptr(int64(39))))
				Expect(updateRuleGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes successfully`, func() {
				name := "My Dashboard"
				var layout *logsv0.ApisDashboardsV1AstLayout = nil
				_, err := logsService.NewDashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes(name, layout)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewDashboardApisDashboardsV1AstDashboardAutoRefreshOff successfully`, func() {
				name := "My Dashboard"
				var layout *logsv0.ApisDashboardsV1AstLayout = nil
				_, err := logsService.NewDashboardApisDashboardsV1AstDashboardAutoRefreshOff(name, layout)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewDashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes successfully`, func() {
				name := "My Dashboard"
				var layout *logsv0.ApisDashboardsV1AstLayout = nil
				_, err := logsService.NewDashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes(name, layout)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewDashboardApisDashboardsV1AstDashboardFolderFolderID successfully`, func() {
				name := "My Dashboard"
				var layout *logsv0.ApisDashboardsV1AstLayout = nil
				_, err := logsService.NewDashboardApisDashboardsV1AstDashboardFolderFolderID(name, layout)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewDashboardApisDashboardsV1AstDashboardFolderFolderPath successfully`, func() {
				name := "My Dashboard"
				var layout *logsv0.ApisDashboardsV1AstLayout = nil
				_, err := logsService.NewDashboardApisDashboardsV1AstDashboardFolderFolderPath(name, layout)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewDashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame successfully`, func() {
				name := "My Dashboard"
				var layout *logsv0.ApisDashboardsV1AstLayout = nil
				_, err := logsService.NewDashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame(name, layout)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewDashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame successfully`, func() {
				name := "My Dashboard"
				var layout *logsv0.ApisDashboardsV1AstLayout = nil
				_, err := logsService.NewDashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame(name, layout)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewEvent2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery successfully`, func() {
				name := "Service catalog latency"
				_model, err := logsService.NewEvent2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery(name)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewOutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications successfully`, func() {
				typeVar := "ibm_event_notifications"
				name := "Event Notifications Integration"
				_model, err := logsService.NewOutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications(typeVar, name)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules successfully`, func() {
				name := "My Policy"
				priority := "type_high"
				_model, err := logsService.NewPolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules(name, priority)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
		})
	})
	Describe(`Model unmarshaling tests`, func() {
		It(`Invoke UnmarshalAlertsV1AlertActiveTimeframe successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1AlertActiveTimeframe)
			model.DaysOfWeek = []string{"sunday"}
			model.Range = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1AlertActiveTimeframe
			err = logsv0.UnmarshalAlertsV1AlertActiveTimeframe(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1AlertActiveWhen successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1AlertActiveWhen)
			model.Timeframes = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1AlertActiveWhen
			err = logsv0.UnmarshalAlertsV1AlertActiveWhen(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1AlertFilters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1AlertFilters)
			model.Severities = []string{"critical"}
			model.Metadata = nil
			model.Alias = core.StringPtr("monitorQuery")
			model.Text = core.StringPtr("_exists_:\"container_name\"")
			model.RatioAlerts = nil
			model.FilterType = core.StringPtr("flow")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1AlertFilters
			err = logsv0.UnmarshalAlertsV1AlertFilters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1AlertFiltersMetadataFilters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1AlertFiltersMetadataFilters)
			model.Applications = []string{"CpuMonitoring", "WebApi"}
			model.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1AlertFiltersMetadataFilters
			err = logsv0.UnmarshalAlertsV1AlertFiltersMetadataFilters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1AlertFiltersRatioAlert successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1AlertFiltersRatioAlert)
			model.Alias = core.StringPtr("TopLevelAlert")
			model.Text = core.StringPtr("_exists_:\"container_name\"")
			model.Severities = []string{"critical"}
			model.Applications = []string{"CpuMonitoring", "WebApi"}
			model.Subsystems = []string{"SnapshotGenerator", "PermissionControl"}
			model.GroupBy = []string{"Host", "Thread"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1AlertFiltersRatioAlert
			err = logsv0.UnmarshalAlertsV1AlertFiltersRatioAlert(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1Date successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1Date)
			model.Year = core.Int64Ptr(int64(2012))
			model.Month = core.Int64Ptr(int64(12))
			model.Day = core.Int64Ptr(int64(24))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1Date
			err = logsv0.UnmarshalAlertsV1Date(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1FlowAlert successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1FlowAlert)
			model.ID = core.StringPtr("6ad87d32-1613-4cb1-b7e3-d97fee561913")
			model.Not = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1FlowAlert
			err = logsv0.UnmarshalAlertsV1FlowAlert(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1FlowAlerts successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1FlowAlerts)
			model.Op = core.StringPtr("or")
			model.Values = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1FlowAlerts
			err = logsv0.UnmarshalAlertsV1FlowAlerts(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1FlowGroup successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1FlowGroup)
			model.Alerts = nil
			model.NextOp = core.StringPtr("or")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1FlowGroup
			err = logsv0.UnmarshalAlertsV1FlowGroup(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1FlowStage successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1FlowStage)
			model.Groups = nil
			model.Timeframe = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1FlowStage
			err = logsv0.UnmarshalAlertsV1FlowStage(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1FlowTimeframe successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1FlowTimeframe)
			model.Ms = core.Int64Ptr(int64(1000))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1FlowTimeframe
			err = logsv0.UnmarshalAlertsV1FlowTimeframe(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1MetaLabel successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1MetaLabel)
			model.Key = core.StringPtr("ColorLabel")
			model.Value = core.StringPtr("Red")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1MetaLabel
			err = logsv0.UnmarshalAlertsV1MetaLabel(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1MetricAlertConditionParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1MetricAlertConditionParameters)
			model.MetricField = core.StringPtr("cpu_usage")
			model.MetricSource = core.StringPtr("prometheus")
			model.ArithmeticOperator = core.StringPtr("percentile")
			model.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
			model.SampleThresholdPercentage = core.Int64Ptr(int64(100))
			model.NonNullPercentage = core.Int64Ptr(int64(100))
			model.SwapNullValues = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1MetricAlertConditionParameters
			err = logsv0.UnmarshalAlertsV1MetricAlertConditionParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1MetricAlertPromqlConditionParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1MetricAlertPromqlConditionParameters)
			model.PromqlText = core.StringPtr("sum(rate(container_cpu_usage_seconds_total{container_name=\"my-container\"}[5m])) by (pod_name)")
			model.ArithmeticOperatorModifier = core.Int64Ptr(int64(1))
			model.SampleThresholdPercentage = core.Int64Ptr(int64(100))
			model.NonNullPercentage = core.Int64Ptr(int64(100))
			model.SwapNullValues = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1MetricAlertPromqlConditionParameters
			err = logsv0.UnmarshalAlertsV1MetricAlertPromqlConditionParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1RelatedExtendedData successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1RelatedExtendedData)
			model.CleanupDeadmanDuration = core.StringPtr("cleanup_deadman_duration_24h")
			model.ShouldTriggerDeadman = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1RelatedExtendedData
			err = logsv0.UnmarshalAlertsV1RelatedExtendedData(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1Time successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1Time)
			model.Hours = core.Int64Ptr(int64(22))
			model.Minutes = core.Int64Ptr(int64(22))
			model.Seconds = core.Int64Ptr(int64(22))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1Time
			err = logsv0.UnmarshalAlertsV1Time(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV1TimeRange successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV1TimeRange)
			model.Start = nil
			model.End = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV1TimeRange
			err = logsv0.UnmarshalAlertsV1TimeRange(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertCondition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertCondition)
			model.Immediate = nil
			model.LessThan = nil
			model.MoreThan = nil
			model.MoreThanUsual = nil
			model.NewValue = nil
			model.Flow = nil
			model.UniqueCount = nil
			model.LessThanUsual = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertCondition
			err = logsv0.UnmarshalAlertsV2AlertCondition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertIncidentSettings successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertIncidentSettings)
			model.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
			model.NotifyOn = core.StringPtr("triggered_and_resolved")
			model.UseAsNotificationSettings = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertIncidentSettings
			err = logsv0.UnmarshalAlertsV2AlertIncidentSettings(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertNotification successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertNotification)
			model.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
			model.NotifyOn = core.StringPtr("triggered_and_resolved")
			model.IntegrationID = core.Int64Ptr(int64(123))
			model.Recipients = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertNotification
			err = logsv0.UnmarshalAlertsV2AlertNotification(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertNotificationGroups successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertNotificationGroups)
			model.GroupByFields = []string{"cpu"}
			model.Notifications = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertNotificationGroups
			err = logsv0.UnmarshalAlertsV2AlertNotificationGroups(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2ConditionParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2ConditionParameters)
			model.Threshold = core.Float64Ptr(float64(0.4))
			model.Timeframe = core.StringPtr("timeframe_36_h")
			model.GroupBy = []string{"message.severity"}
			model.MetricAlertParameters = nil
			model.MetricAlertPromqlParameters = nil
			model.IgnoreInfinity = core.BoolPtr(true)
			model.RelativeTimeframe = core.StringPtr("month")
			model.CardinalityFields = []string{"message.severity"}
			model.RelatedExtendedData = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2ConditionParameters
			err = logsv0.UnmarshalAlertsV2ConditionParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2FlowCondition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2FlowCondition)
			model.Stages = nil
			model.Parameters = nil
			model.EnforceSuppression = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2FlowCondition
			err = logsv0.UnmarshalAlertsV2FlowCondition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2ImmediateConditionEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2ImmediateConditionEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2ImmediateConditionEmpty
			err = logsv0.UnmarshalAlertsV2ImmediateConditionEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2LessThanCondition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2LessThanCondition)
			model.Parameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2LessThanCondition
			err = logsv0.UnmarshalAlertsV2LessThanCondition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2LessThanUsualCondition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2LessThanUsualCondition)
			model.Parameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2LessThanUsualCondition
			err = logsv0.UnmarshalAlertsV2LessThanUsualCondition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2MoreThanCondition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2MoreThanCondition)
			model.Parameters = nil
			model.EvaluationWindow = core.StringPtr("dynamic")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2MoreThanCondition
			err = logsv0.UnmarshalAlertsV2MoreThanCondition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2MoreThanUsualCondition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2MoreThanUsualCondition)
			model.Parameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2MoreThanUsualCondition
			err = logsv0.UnmarshalAlertsV2MoreThanUsualCondition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2NewValueCondition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2NewValueCondition)
			model.Parameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2NewValueCondition
			err = logsv0.UnmarshalAlertsV2NewValueCondition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2Recipients successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2Recipients)
			model.Emails = []string{"example@gmail.com"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2Recipients
			err = logsv0.UnmarshalAlertsV2Recipients(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2UniqueCountCondition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2UniqueCountCondition)
			model.Parameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2UniqueCountCondition
			err = logsv0.UnmarshalAlertsV2UniqueCountCondition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotation successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotation)
			model.Href = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
			model.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
			model.Name = core.StringPtr("Deployments")
			model.Enabled = core.BoolPtr(true)
			model.Source = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotation
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotation(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationLogsSource successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationLogsSource)
			model.LuceneQuery = nil
			model.Strategy = nil
			model.MessageTemplate = core.StringPtr("testString")
			model.LabelFields = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationLogsSource
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationLogsSource(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategy successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategy)
			model.Instant = nil
			model.Range = nil
			model.Duration = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategy
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyDuration successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration)
			model.StartTimestampField = nil
			model.DurationField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyDuration
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyDuration(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyInstant successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant)
			model.TimestampField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyInstant
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyInstant(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyRange successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyRange)
			model.StartTimestampField = nil
			model.EndTimestampField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyRange
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyRange(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationMetricsSource successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSource)
			model.PromqlQuery = nil
			model.Strategy = nil
			model.MessageTemplate = core.StringPtr("testString")
			model.Labels = []string{"testString"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationMetricsSource
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationMetricsSource(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationMetricsSourceStartTimeMetricEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationMetricsSourceStrategy successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy)
			model.StartTimeMetric = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationMetricsSourceStrategy
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationMetricsSourceStrategy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationSource successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationSource)
			model.Metrics = nil
			model.Logs = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationSource
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationSource(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstDashboardAutoRefreshFiveMinutesEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstDashboardAutoRefreshOffEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstDashboardAutoRefreshOffEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstDashboardAutoRefreshOffEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstDashboardAutoRefreshOffEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstDashboardAutoRefreshTwoMinutesEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilter successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilter)
			model.Source = nil
			model.Enabled = core.BoolPtr(true)
			model.Collapsed = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilter
			err = logsv0.UnmarshalApisDashboardsV1AstFilter(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterEquals successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterEquals)
			model.Selection = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterEquals
			err = logsv0.UnmarshalApisDashboardsV1AstFilterEquals(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterEqualsSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterEqualsSelection)
			model.All = nil
			model.List = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterEqualsSelection
			err = logsv0.UnmarshalApisDashboardsV1AstFilterEqualsSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstFilterEqualsSelectionAllSelectionEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterEqualsSelectionListSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection)
			model.Values = []string{"testString"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterEqualsSelectionListSelection
			err = logsv0.UnmarshalApisDashboardsV1AstFilterEqualsSelectionListSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterLogsFilter successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterLogsFilter)
			model.Operator = nil
			model.ObservationField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterLogsFilter
			err = logsv0.UnmarshalApisDashboardsV1AstFilterLogsFilter(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterMetricsFilter successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterMetricsFilter)
			model.Label = core.StringPtr("service")
			model.Operator = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterMetricsFilter
			err = logsv0.UnmarshalApisDashboardsV1AstFilterMetricsFilter(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterNotEquals successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterNotEquals)
			model.Selection = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterNotEquals
			err = logsv0.UnmarshalApisDashboardsV1AstFilterNotEquals(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterNotEqualsSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterNotEqualsSelection)
			model.List = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterNotEqualsSelection
			err = logsv0.UnmarshalApisDashboardsV1AstFilterNotEqualsSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterNotEqualsSelectionListSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterNotEqualsSelectionListSelection)
			model.Values = []string{"testString"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterNotEqualsSelectionListSelection
			err = logsv0.UnmarshalApisDashboardsV1AstFilterNotEqualsSelectionListSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterOperator successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterOperator)
			model.Equals = nil
			model.NotEquals = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterOperator
			err = logsv0.UnmarshalApisDashboardsV1AstFilterOperator(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterSource successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterSource)
			model.Logs = nil
			model.Metrics = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterSource
			err = logsv0.UnmarshalApisDashboardsV1AstFilterSource(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFolderPath successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFolderPath)
			model.Segments = []string{"production", "payments"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFolderPath
			err = logsv0.UnmarshalApisDashboardsV1AstFolderPath(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstLayout successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstLayout)
			model.Sections = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstLayout
			err = logsv0.UnmarshalApisDashboardsV1AstLayout(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelect successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelect)
			model.Source = nil
			model.Selection = nil
			model.ValuesOrderDirection = core.StringPtr("desc")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelect
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelect(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectConstantListSource successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectConstantListSource)
			model.Values = []string{"production", "staging"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectConstantListSource
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectConstantListSource(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectLogsPathSource successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource)
			model.ObservationField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectLogsPathSource
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectLogsPathSource(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectMetricLabelSource successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectMetricLabelSource)
			model.MetricName = core.StringPtr("http_requests_total")
			model.Label = core.StringPtr("service")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectMetricLabelSource
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectMetricLabelSource(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectSelection)
			model.All = nil
			model.List = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectSelection
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectSelectionAllSelectionEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectSelectionListSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionListSelection)
			model.Values = []string{"production", "staging"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectSelectionListSelection
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectSelectionListSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectSource successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectSource)
			model.LogsPath = nil
			model.MetricLabel = nil
			model.ConstantList = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectSource
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectSource(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstRow successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstRow)
			model.Href = core.StringPtr("testString")
			model.ID = nil
			model.Appearance = nil
			model.Widgets = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstRow
			err = logsv0.UnmarshalApisDashboardsV1AstRow(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstRowAppearance successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstRowAppearance)
			model.Height = core.Int64Ptr(int64(5))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstRowAppearance
			err = logsv0.UnmarshalApisDashboardsV1AstRowAppearance(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstSection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstSection)
			model.Href = core.StringPtr("testString")
			model.ID = nil
			model.Rows = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstSection
			err = logsv0.UnmarshalApisDashboardsV1AstSection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstVariable successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstVariable)
			model.Name = core.StringPtr("service_name")
			model.Definition = nil
			model.DisplayName = core.StringPtr("Service Name")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstVariable
			err = logsv0.UnmarshalApisDashboardsV1AstVariable(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstVariableDefinition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstVariableDefinition)
			model.MultiSelect = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstVariableDefinition
			err = logsv0.UnmarshalApisDashboardsV1AstVariableDefinition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidget successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidget)
			model.Href = core.StringPtr("testString")
			model.ID = nil
			model.Title = core.StringPtr("Response time")
			model.Description = core.StringPtr("The average response time of the system")
			model.Definition = nil
			model.CreatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")
			model.UpdatedAt = CreateMockDateTime("2021-01-01T00:00:00.000Z")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidget
			err = logsv0.UnmarshalApisDashboardsV1AstWidget(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetDefinition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetDefinition)
			model.LineChart = nil
			model.DataTable = nil
			model.Gauge = nil
			model.PieChart = nil
			model.BarChart = nil
			model.HorizontalBarChart = nil
			model.Markdown = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetDefinition
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetDefinition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChart successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChart)
			model.Query = nil
			model.MaxBarsPerChart = core.Int64Ptr(int64(10))
			model.GroupNameTemplate = core.StringPtr("{{severity}}")
			model.StackDefinition = nil
			model.ScaleType = core.StringPtr("logarithmic")
			model.ColorsBy = nil
			model.XAxis = nil
			model.Unit = core.StringPtr("usd")
			model.SortBy = core.StringPtr("name")
			model.ColorScheme = core.StringPtr("classic")
			model.DataModeType = core.StringPtr("archive")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChart
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChart(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartDataprimeQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartDataprimeQuery)
			model.DataprimeQuery = nil
			model.Filters = nil
			model.GroupNames = []string{"service", "severity"}
			model.StackedGroupName = core.StringPtr("severity")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartDataprimeQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartDataprimeQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartLogsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartLogsQuery)
			model.LuceneQuery = nil
			model.Aggregation = nil
			model.Filters = nil
			model.GroupNamesFields = nil
			model.StackedGroupNameField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartLogsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartLogsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartMetricsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartMetricsQuery)
			model.PromqlQuery = nil
			model.Filters = nil
			model.GroupNames = []string{"service", "pod"}
			model.StackedGroupName = core.StringPtr("pod")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartMetricsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartMetricsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartQuery)
			model.Logs = nil
			model.Metrics = nil
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartStackDefinition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartStackDefinition)
			model.MaxSlicesPerBar = core.Int64Ptr(int64(5))
			model.StackNameTemplate = core.StringPtr("{{severity}}")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartStackDefinition
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartStackDefinition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartXAxis successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartXAxis)
			model.Value = nil
			model.Time = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartXAxis
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartXAxis(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime)
			model.Interval = core.StringPtr("60s")
			model.BucketsPresented = core.Int64Ptr(int64(10))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByTime(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisXAxisByValueEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsCommonColorsBy successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsCommonColorsBy)
			model.Stack = nil
			model.GroupBy = nil
			model.Aggregation = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsCommonColorsBy
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsCommonColorsBy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByAggregationEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByGroupByEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsCommonColorsByColorsByStackEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsCommonLegend successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsCommonLegend)
			model.IsVisible = core.BoolPtr(true)
			model.Columns = []string{"name"}
			model.GroupByQuery = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsCommonLegend
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsCommonLegend(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsCommonLuceneQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsCommonLuceneQuery)
			model.Value = core.StringPtr("coralogix.metadata.applicationName:\"production\"")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsCommonLuceneQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsCommonLuceneQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsCommonPromQlQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery)
			model.Value = core.StringPtr("sum(up)")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsCommonPromQlQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsCommonPromQlQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTable successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTable)
			model.Query = nil
			model.ResultsPerPage = core.Int64Ptr(int64(10))
			model.RowStyle = core.StringPtr("list")
			model.Columns = nil
			model.OrderBy = nil
			model.DataModeType = core.StringPtr("archive")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTable
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTable(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTableColumn successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTableColumn)
			model.Field = core.StringPtr("coralogix.metadata.applicationName")
			model.Width = core.Int64Ptr(int64(100))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTableColumn
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTableColumn(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTableDataprimeQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTableDataprimeQuery)
			model.DataprimeQuery = nil
			model.Filters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTableDataprimeQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTableDataprimeQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTableLogsQuery)
			model.LuceneQuery = nil
			model.Filters = nil
			model.Grouping = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTableLogsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation)
			model.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
			model.Name = core.StringPtr("count")
			model.IsVisible = core.BoolPtr(true)
			model.Aggregation = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQueryAggregation(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping)
			model.Aggregations = nil
			model.GroupBys = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTableLogsQueryGrouping(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTableMetricsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTableMetricsQuery)
			model.PromqlQuery = nil
			model.Filters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTableMetricsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTableMetricsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTableQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTableQuery)
			model.Logs = nil
			model.Metrics = nil
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTableQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTableQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsGauge successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsGauge)
			model.Query = nil
			model.Min = core.Float64Ptr(float64(0))
			model.Max = core.Float64Ptr(float64(100))
			model.ShowInnerArc = core.BoolPtr(true)
			model.ShowOuterArc = core.BoolPtr(true)
			model.Unit = core.StringPtr("usd")
			model.Thresholds = nil
			model.DataModeType = core.StringPtr("archive")
			model.ThresholdBy = core.StringPtr("background")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsGauge
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsGauge(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsGaugeDataprimeQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsGaugeDataprimeQuery)
			model.DataprimeQuery = nil
			model.Filters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsGaugeDataprimeQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsGaugeDataprimeQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsGaugeLogsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsGaugeLogsQuery)
			model.LuceneQuery = nil
			model.LogsAggregation = nil
			model.Filters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsGaugeLogsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsGaugeLogsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsGaugeMetricsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsGaugeMetricsQuery)
			model.PromqlQuery = nil
			model.Aggregation = core.StringPtr("sum")
			model.Filters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsGaugeMetricsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsGaugeMetricsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsGaugeQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsGaugeQuery)
			model.Metrics = nil
			model.Logs = nil
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsGaugeQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsGaugeQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsGaugeThreshold successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsGaugeThreshold)
			model.From = core.Float64Ptr(float64(0.5))
			model.Color = core.StringPtr("warning")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsGaugeThreshold
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsGaugeThreshold(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChart successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChart)
			model.Query = nil
			model.MaxBarsPerChart = core.Int64Ptr(int64(5))
			model.GroupNameTemplate = core.StringPtr("{{severity}}")
			model.StackDefinition = nil
			model.ScaleType = core.StringPtr("logarithmic")
			model.ColorsBy = nil
			model.Unit = core.StringPtr("usd")
			model.DisplayOnBar = core.BoolPtr(true)
			model.YAxisViewBy = nil
			model.SortBy = core.StringPtr("name")
			model.ColorScheme = core.StringPtr("classic")
			model.DataModeType = core.StringPtr("archive")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChart
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChart(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery)
			model.DataprimeQuery = nil
			model.Filters = nil
			model.GroupNames = []string{"testString"}
			model.StackedGroupName = core.StringPtr("testString")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartDataprimeQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery)
			model.LuceneQuery = nil
			model.Aggregation = nil
			model.Filters = nil
			model.GroupNamesFields = nil
			model.StackedGroupNameField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartLogsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery)
			model.PromqlQuery = nil
			model.Filters = nil
			model.GroupNames = []string{"service"}
			model.StackedGroupName = core.StringPtr("service")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartMetricsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartQuery)
			model.Logs = nil
			model.Metrics = nil
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition)
			model.MaxSlicesPerBar = core.Int64Ptr(int64(5))
			model.StackNameTemplate = core.StringPtr("{{severity}}")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartStackDefinition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy)
			model.Category = nil
			model.Value = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewBy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByCategoryEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewByValueEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChart successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChart)
			model.Legend = nil
			model.Tooltip = nil
			model.QueryDefinitions = nil
			model.StackedLine = core.StringPtr("relative")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChart
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChart(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChartDataprimeQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChartDataprimeQuery)
			model.DataprimeQuery = nil
			model.Filters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChartDataprimeQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChartDataprimeQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChartLogsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChartLogsQuery)
			model.LuceneQuery = nil
			model.GroupBy = []string{"testString"}
			model.Aggregations = nil
			model.Filters = nil
			model.GroupBys = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChartLogsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChartLogsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChartMetricsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery)
			model.PromqlQuery = nil
			model.Filters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChartMetricsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChartMetricsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChartQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQuery)
			model.Logs = nil
			model.Metrics = nil
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChartQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChartQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChartQueryDefinition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition)
			model.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
			model.Query = nil
			model.SeriesNameTemplate = core.StringPtr("{{severity}}")
			model.SeriesCountLimit = core.StringPtr("10")
			model.Unit = core.StringPtr("usd")
			model.ScaleType = core.StringPtr("logarithmic")
			model.Name = core.StringPtr("CPU usage")
			model.IsVisible = core.BoolPtr(true)
			model.ColorScheme = core.StringPtr("classic")
			model.Resolution = nil
			model.DataModeType = core.StringPtr("archive")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChartQueryDefinition
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChartQueryDefinition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChartResolution successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChartResolution)
			model.Interval = core.StringPtr("1m")
			model.BucketsPresented = core.Int64Ptr(int64(100))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChartResolution
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChartResolution(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChartTooltip successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip)
			model.ShowLabels = core.BoolPtr(true)
			model.Type = core.StringPtr("single")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChartTooltip
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChartTooltip(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsMarkdown successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsMarkdown)
			model.MarkdownText = core.StringPtr("# Database metrics")
			model.TooltipText = core.StringPtr(" # Database metrics")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsMarkdown
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsMarkdown(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsPieChart successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsPieChart)
			model.Query = nil
			model.MaxSlicesPerChart = core.Int64Ptr(int64(5))
			model.MinSlicePercentage = core.Int64Ptr(int64(1))
			model.StackDefinition = nil
			model.LabelDefinition = nil
			model.ShowLegend = core.BoolPtr(true)
			model.GroupNameTemplate = core.StringPtr("testString")
			model.Unit = core.StringPtr("usd")
			model.ColorScheme = core.StringPtr("classic")
			model.DataModeType = core.StringPtr("archive")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsPieChart
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsPieChart(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsPieChartDataprimeQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsPieChartDataprimeQuery)
			model.DataprimeQuery = nil
			model.Filters = nil
			model.GroupNames = []string{"service", "pod"}
			model.StackedGroupName = core.StringPtr("pod")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsPieChartDataprimeQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsPieChartDataprimeQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsPieChartLabelDefinition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsPieChartLabelDefinition)
			model.LabelSource = core.StringPtr("stack")
			model.IsVisible = core.BoolPtr(true)
			model.ShowName = core.BoolPtr(true)
			model.ShowValue = core.BoolPtr(true)
			model.ShowPercentage = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsPieChartLabelDefinition
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsPieChartLabelDefinition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsPieChartLogsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsPieChartLogsQuery)
			model.LuceneQuery = nil
			model.Aggregation = nil
			model.Filters = nil
			model.GroupNamesFields = nil
			model.StackedGroupNameField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsPieChartLogsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsPieChartLogsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsPieChartMetricsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsPieChartMetricsQuery)
			model.PromqlQuery = nil
			model.Filters = nil
			model.GroupNames = []string{"service", "pod"}
			model.StackedGroupName = core.StringPtr("pod")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsPieChartMetricsQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsPieChartMetricsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsPieChartQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsPieChartQuery)
			model.Logs = nil
			model.Metrics = nil
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsPieChartQuery
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsPieChartQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsPieChartStackDefinition successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsPieChartStackDefinition)
			model.MaxSlicesPerStack = core.Int64Ptr(int64(5))
			model.StackNameTemplate = core.StringPtr("{{severity}}")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsPieChartStackDefinition
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsPieChartStackDefinition(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonDataprimeQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonDataprimeQuery)
			model.Text = core.StringPtr("source logs")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonDataprimeQuery
			err = logsv0.UnmarshalApisDashboardsV1CommonDataprimeQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregation successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregation)
			model.Count = nil
			model.CountDistinct = nil
			model.Sum = nil
			model.Average = nil
			model.Min = nil
			model.Max = nil
			model.Percentile = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregation
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregation(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationAverage successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationAverage)
			model.ObservationField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationAverage
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationAverage(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationCountDistinct successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationCountDistinct)
			model.ObservationField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationCountDistinct
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationCountDistinct(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationCountEmpty successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationCountEmpty)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationCountEmpty
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationCountEmpty(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationMax successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationMax)
			model.ObservationField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationMax
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationMax(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationMin successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationMin)
			model.ObservationField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationMin
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationMin(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationPercentile successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationPercentile)
			model.Percent = core.Float64Ptr(float64(72.5))
			model.ObservationField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationPercentile
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationPercentile(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationSum successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationSum)
			model.ObservationField = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationSum
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationSum(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLuceneQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLuceneQuery)
			model.Value = core.StringPtr("coralogix.metadata.applicationName:\"production\"")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLuceneQuery
			err = logsv0.UnmarshalApisDashboardsV1CommonLuceneQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonObservationField successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonObservationField)
			model.Keypath = []string{"applicationname"}
			model.Scope = core.StringPtr("metadata")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonObservationField
			err = logsv0.UnmarshalApisDashboardsV1CommonObservationField(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonOrderingField successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonOrderingField)
			model.Field = core.StringPtr("testString")
			model.OrderDirection = core.StringPtr("desc")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonOrderingField
			err = logsv0.UnmarshalApisDashboardsV1CommonOrderingField(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonPromQlQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonPromQlQuery)
			model.Value = core.StringPtr("sum(up)")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonPromQlQuery
			err = logsv0.UnmarshalApisDashboardsV1CommonPromQlQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonTimeFrame successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonTimeFrame)
			model.From = CreateMockDateTime("2021-01-01T00:00:00.000Z")
			model.To = CreateMockDateTime("2021-01-01T00:00:00.000Z")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonTimeFrame
			err = logsv0.UnmarshalApisDashboardsV1CommonTimeFrame(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1UUID successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1UUID)
			model.Value = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1UUID
			err = logsv0.UnmarshalApisDashboardsV1UUID(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisEvents2metricsV2Aggregation successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisEvents2metricsV2Aggregation)
			model.Enabled = core.BoolPtr(true)
			model.AggType = core.StringPtr("samples")
			model.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
			model.Samples = nil
			model.Histogram = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisEvents2metricsV2Aggregation
			err = logsv0.UnmarshalApisEvents2metricsV2Aggregation(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisEvents2metricsV2E2mAggHistogram successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisEvents2metricsV2E2mAggHistogram)
			model.Buckets = []float32{2}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisEvents2metricsV2E2mAggHistogram
			err = logsv0.UnmarshalApisEvents2metricsV2E2mAggHistogram(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisEvents2metricsV2E2mAggSamples successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisEvents2metricsV2E2mAggSamples)
			model.SampleType = core.StringPtr("max")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisEvents2metricsV2E2mAggSamples
			err = logsv0.UnmarshalApisEvents2metricsV2E2mAggSamples(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisEvents2metricsV2MetricField successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisEvents2metricsV2MetricField)
			model.TargetBaseMetricName = core.StringPtr("alias_field_name")
			model.SourceField = core.StringPtr("log_obj.numeric_field")
			model.Aggregations = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisEvents2metricsV2MetricField
			err = logsv0.UnmarshalApisEvents2metricsV2MetricField(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisEvents2metricsV2MetricLabel successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisEvents2metricsV2MetricLabel)
			model.TargetLabel = core.StringPtr("alias_label_name")
			model.SourceField = core.StringPtr("log_obj.string_value")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisEvents2metricsV2MetricLabel
			err = logsv0.UnmarshalApisEvents2metricsV2MetricLabel(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisLogs2metricsV2LogsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisLogs2metricsV2LogsQuery)
			model.Lucene = core.StringPtr("log_obj.numeric_field: [50 TO 100]")
			model.Alias = core.StringPtr("new_query")
			model.ApplicationnameFilters = []string{"app_name"}
			model.SubsystemnameFilters = []string{"sub_name"}
			model.SeverityFilters = []string{"critical"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisLogs2metricsV2LogsQuery
			err = logsv0.UnmarshalApisLogs2metricsV2LogsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisViewsV1CustomTimeSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisViewsV1CustomTimeSelection)
			model.FromTime = CreateMockDateTime("2024-01-25T11:31:43.152Z")
			model.ToTime = CreateMockDateTime("2024-01-25T11:35:43.152Z")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisViewsV1CustomTimeSelection
			err = logsv0.UnmarshalApisViewsV1CustomTimeSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisViewsV1Filter successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisViewsV1Filter)
			model.Name = core.StringPtr("applicationName")
			model.SelectedValues = map[string]bool{"key1": true}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisViewsV1Filter
			err = logsv0.UnmarshalApisViewsV1Filter(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisViewsV1QuickTimeSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisViewsV1QuickTimeSelection)
			model.Caption = core.StringPtr("Last hour")
			model.Seconds = core.Int64Ptr(int64(3600))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisViewsV1QuickTimeSelection
			err = logsv0.UnmarshalApisViewsV1QuickTimeSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisViewsV1SearchQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisViewsV1SearchQuery)
			model.Query = core.StringPtr("error")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisViewsV1SearchQuery
			err = logsv0.UnmarshalApisViewsV1SearchQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisViewsV1SelectedFilters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisViewsV1SelectedFilters)
			model.Filters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisViewsV1SelectedFilters
			err = logsv0.UnmarshalApisViewsV1SelectedFilters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisViewsV1TimeSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisViewsV1TimeSelection)
			model.QuickSelection = nil
			model.CustomSelection = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisViewsV1TimeSelection
			err = logsv0.UnmarshalApisViewsV1TimeSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDashboard successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.Dashboard)
			model.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.Name = core.StringPtr("My Dashboard")
			model.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
			model.Layout = nil
			model.Variables = nil
			model.Filters = nil
			model.Annotations = nil
			model.AbsoluteTimeFrame = nil
			model.RelativeTimeFrame = core.StringPtr("1d")
			model.FolderID = nil
			model.FolderPath = nil
			model.False = nil
			model.TwoMinutes = nil
			model.FiveMinutes = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.Dashboard
			err = logsv0.UnmarshalDashboard(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDashboardFolder successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.DashboardFolder)
			model.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")
			model.Name = core.StringPtr("My Folder")
			model.ParentID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.DashboardFolder
			err = logsv0.UnmarshalDashboardFolder(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalEvent2MetricPrototype successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.Event2MetricPrototype)
			model.Name = core.StringPtr("Service catalog latency")
			model.Description = core.StringPtr("avg and max the latency of catalog service")
			model.PermutationsLimit = core.Int64Ptr(int64(30000))
			model.MetricLabels = nil
			model.MetricFields = nil
			model.Type = core.StringPtr("logs2metrics")
			model.LogsQuery = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.Event2MetricPrototype
			err = logsv0.UnmarshalEvent2MetricPrototype(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalOutgoingWebhookPrototype successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.OutgoingWebhookPrototype)
			model.Type = core.StringPtr("ibm_event_notifications")
			model.Name = core.StringPtr("Event Notifications Integration")
			model.URL = core.StringPtr("https://example.com")
			model.IbmEventNotifications = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.OutgoingWebhookPrototype
			err = logsv0.UnmarshalOutgoingWebhookPrototype(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalOutgoingWebhooksV1IbmEventNotificationsConfig successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig)
			model.EventNotificationsInstanceID = CreateMockUUID("585bea36-bdd1-4bfb-9a26-51f1f8a12660")
			model.RegionID = core.StringPtr("eu-es")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.OutgoingWebhooksV1IbmEventNotificationsConfig
			err = logsv0.UnmarshalOutgoingWebhooksV1IbmEventNotificationsConfig(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPolicyPrototype successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.PolicyPrototype)
			model.Name = core.StringPtr("My Policy")
			model.Description = core.StringPtr("My Policy Description")
			model.Priority = core.StringPtr("type_high")
			model.ApplicationRule = nil
			model.SubsystemRule = nil
			model.ArchiveRetention = nil
			model.LogRules = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.PolicyPrototype
			err = logsv0.UnmarshalPolicyPrototype(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalQuotaV1ArchiveRetention successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.QuotaV1ArchiveRetention)
			model.ID = CreateMockUUID("3dc02998-0b50-4ea8-b68a-4779d716fa1f")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.QuotaV1ArchiveRetention
			err = logsv0.UnmarshalQuotaV1ArchiveRetention(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalQuotaV1LogRules successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.QuotaV1LogRules)
			model.Severities = []string{"critical"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.QuotaV1LogRules
			err = logsv0.UnmarshalQuotaV1LogRules(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalQuotaV1Rule successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.QuotaV1Rule)
			model.RuleTypeID = core.StringPtr("includes")
			model.Name = core.StringPtr("Rule Name")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.QuotaV1Rule
			err = logsv0.UnmarshalQuotaV1Rule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1AllowParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1AllowParameters)
			model.KeepBlockedLogs = core.BoolPtr(true)
			model.Rule = core.StringPtr("^this log should be kept!!!.*$")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1AllowParameters
			err = logsv0.UnmarshalRulesV1AllowParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1ApplicationNameConstraint successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1ApplicationNameConstraint)
			model.Value = core.StringPtr("my-application")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1ApplicationNameConstraint
			err = logsv0.UnmarshalRulesV1ApplicationNameConstraint(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1BlockParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1BlockParameters)
			model.KeepBlockedLogs = core.BoolPtr(true)
			model.Rule = core.StringPtr("^this log should be blocked!!!.*$")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1BlockParameters
			err = logsv0.UnmarshalRulesV1BlockParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1CreateRuleGroupRequestCreateRuleSubgroup successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup)
			model.Rules = nil
			model.Enabled = core.BoolPtr(true)
			model.Order = core.Int64Ptr(int64(1))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroup
			err = logsv0.UnmarshalRulesV1CreateRuleGroupRequestCreateRuleSubgroup(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule)
			model.Name = core.StringPtr("Extract Timestamp")
			model.Description = core.StringPtr("Extract timestamp with ISO format for Mysql logs")
			model.SourceField = core.StringPtr("log_obj.date_time")
			model.Parameters = nil
			model.Enabled = core.BoolPtr(true)
			model.Order = core.Int64Ptr(int64(1))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule
			err = logsv0.UnmarshalRulesV1CreateRuleGroupRequestCreateRuleSubgroupCreateRule(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1ExtractParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1ExtractParameters)
			model.Rule = core.StringPtr("^http:\\\\/\\\\/my\\\\.service\\\\.com\\\\/#(?P<service>\\\\w+)\\\\-(?P<region>[^_]+)_")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1ExtractParameters
			err = logsv0.UnmarshalRulesV1ExtractParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1ExtractTimestampParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1ExtractTimestampParameters)
			model.Standard = core.StringPtr("nanots")
			model.Format = core.StringPtr("%Y-%m-%ddT%H:%M:%S.%f%z")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1ExtractTimestampParameters
			err = logsv0.UnmarshalRulesV1ExtractTimestampParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1JSONExtractParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1JSONExtractParameters)
			model.DestinationField = core.StringPtr("severity")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1JSONExtractParameters
			err = logsv0.UnmarshalRulesV1JSONExtractParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1JSONParseParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1JSONParseParameters)
			model.DestinationField = core.StringPtr("json.content")
			model.DeleteSource = core.BoolPtr(true)
			model.OverrideDest = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1JSONParseParameters
			err = logsv0.UnmarshalRulesV1JSONParseParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1JSONStringifyParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1JSONStringifyParameters)
			model.DestinationField = core.StringPtr("json.stringified")
			model.DeleteSource = core.BoolPtr(true)

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1JSONStringifyParameters
			err = logsv0.UnmarshalRulesV1JSONStringifyParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1ParseParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1ParseParameters)
			model.DestinationField = core.StringPtr("text.message")
			model.Rule = core.StringPtr("^http:\\\\/\\\\/my\\\\.service\\\\.com\\\\/#(?P<service>\\\\w+)\\\\-(?P<region>[^_]+)$")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1ParseParameters
			err = logsv0.UnmarshalRulesV1ParseParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RemoveFieldsParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RemoveFieldsParameters)
			model.Fields = []string{"json.field1", "json.field2"}

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RemoveFieldsParameters
			err = logsv0.UnmarshalRulesV1RemoveFieldsParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1ReplaceParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1ReplaceParameters)
			model.DestinationField = core.StringPtr("text.message")
			model.ReplaceNewVal = core.StringPtr("***")
			model.Rule = core.StringPtr("the password is (?P<password>[A-Za-z0-9!@#$].)")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1ReplaceParameters
			err = logsv0.UnmarshalRulesV1ReplaceParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleMatcher successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleMatcher)
			model.ApplicationName = nil
			model.SubsystemName = nil
			model.Severity = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleMatcher
			err = logsv0.UnmarshalRulesV1RuleMatcher(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParameters)
			model.ExtractParameters = nil
			model.JSONExtractParameters = nil
			model.ReplaceParameters = nil
			model.ParseParameters = nil
			model.AllowParameters = nil
			model.BlockParameters = nil
			model.ExtractTimestampParameters = nil
			model.RemoveFieldsParameters = nil
			model.JSONStringifyParameters = nil
			model.JSONParseParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParameters
			err = logsv0.UnmarshalRulesV1RuleParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1SeverityConstraint successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1SeverityConstraint)
			model.Value = core.StringPtr("critical")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1SeverityConstraint
			err = logsv0.UnmarshalRulesV1SeverityConstraint(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1SubsystemNameConstraint successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1SubsystemNameConstraint)
			model.Value = core.StringPtr("my-subsystem")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1SubsystemNameConstraint
			err = logsv0.UnmarshalRulesV1SubsystemNameConstraint(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertConditionConditionFlow successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertConditionConditionFlow)
			model.Flow = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertConditionConditionFlow
			err = logsv0.UnmarshalAlertsV2AlertConditionConditionFlow(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertConditionConditionImmediate successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertConditionConditionImmediate)
			model.Immediate = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertConditionConditionImmediate
			err = logsv0.UnmarshalAlertsV2AlertConditionConditionImmediate(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertConditionConditionLessThan successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertConditionConditionLessThan)
			model.LessThan = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertConditionConditionLessThan
			err = logsv0.UnmarshalAlertsV2AlertConditionConditionLessThan(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertConditionConditionLessThanUsual successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertConditionConditionLessThanUsual)
			model.LessThanUsual = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertConditionConditionLessThanUsual
			err = logsv0.UnmarshalAlertsV2AlertConditionConditionLessThanUsual(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertConditionConditionMoreThan successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertConditionConditionMoreThan)
			model.MoreThan = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertConditionConditionMoreThan
			err = logsv0.UnmarshalAlertsV2AlertConditionConditionMoreThan(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertConditionConditionMoreThanUsual successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertConditionConditionMoreThanUsual)
			model.MoreThanUsual = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertConditionConditionMoreThanUsual
			err = logsv0.UnmarshalAlertsV2AlertConditionConditionMoreThanUsual(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertConditionConditionNewValue successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertConditionConditionNewValue)
			model.NewValue = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertConditionConditionNewValue
			err = logsv0.UnmarshalAlertsV2AlertConditionConditionNewValue(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertConditionConditionUniqueCount successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertConditionConditionUniqueCount)
			model.UniqueCount = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertConditionConditionUniqueCount
			err = logsv0.UnmarshalAlertsV2AlertConditionConditionUniqueCount(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertNotificationIntegrationTypeIntegrationID successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID)
			model.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
			model.NotifyOn = core.StringPtr("triggered_and_resolved")
			model.IntegrationID = core.Int64Ptr(int64(123))

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertNotificationIntegrationTypeIntegrationID
			err = logsv0.UnmarshalAlertsV2AlertNotificationIntegrationTypeIntegrationID(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalAlertsV2AlertNotificationIntegrationTypeRecipients successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.AlertsV2AlertNotificationIntegrationTypeRecipients)
			model.RetriggeringPeriodSeconds = core.Int64Ptr(int64(60))
			model.NotifyOn = core.StringPtr("triggered_and_resolved")
			model.Recipients = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.AlertsV2AlertNotificationIntegrationTypeRecipients
			err = logsv0.UnmarshalAlertsV2AlertNotificationIntegrationTypeRecipients(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration)
			model.Duration = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueDuration(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant)
			model.Instant = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueInstant(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange)
			model.Range = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationLogsSourceStrategyValueRange(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationSourceValueLogs successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueLogs)
			model.Logs = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationSourceValueLogs
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationSourceValueLogs(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstAnnotationSourceValueMetrics successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics)
			model.Metrics = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstAnnotationSourceValueMetrics
			err = logsv0.UnmarshalApisDashboardsV1AstAnnotationSourceValueMetrics(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterEqualsSelectionValueAll successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll)
			model.All = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueAll
			err = logsv0.UnmarshalApisDashboardsV1AstFilterEqualsSelectionValueAll(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterEqualsSelectionValueList successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueList)
			model.List = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterEqualsSelectionValueList
			err = logsv0.UnmarshalApisDashboardsV1AstFilterEqualsSelectionValueList(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterOperatorValueEquals successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterOperatorValueEquals)
			model.Equals = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterOperatorValueEquals
			err = logsv0.UnmarshalApisDashboardsV1AstFilterOperatorValueEquals(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterOperatorValueNotEquals successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterOperatorValueNotEquals)
			model.NotEquals = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterOperatorValueNotEquals
			err = logsv0.UnmarshalApisDashboardsV1AstFilterOperatorValueNotEquals(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterSourceValueLogs successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterSourceValueLogs)
			model.Logs = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterSourceValueLogs
			err = logsv0.UnmarshalApisDashboardsV1AstFilterSourceValueLogs(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstFilterSourceValueMetrics successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstFilterSourceValueMetrics)
			model.Metrics = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstFilterSourceValueMetrics
			err = logsv0.UnmarshalApisDashboardsV1AstFilterSourceValueMetrics(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectSelectionValueAll successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll)
			model.All = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectSelectionValueAll
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectSelectionValueAll(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectSelectionValueList successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectSelectionValueList)
			model.List = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectSelectionValueList
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectSelectionValueList(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectSourceValueConstantList successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueConstantList)
			model.ConstantList = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectSourceValueConstantList
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectSourceValueConstantList(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectSourceValueLogsPath successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath)
			model.LogsPath = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectSourceValueLogsPath
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectSourceValueLogsPath(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstMultiSelectSourceValueMetricLabel successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstMultiSelectSourceValueMetricLabel)
			model.MetricLabel = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstMultiSelectSourceValueMetricLabel
			err = logsv0.UnmarshalApisDashboardsV1AstMultiSelectSourceValueMetricLabel(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstVariableDefinitionValueMultiSelect successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect)
			model.MultiSelect = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstVariableDefinitionValueMultiSelect
			err = logsv0.UnmarshalApisDashboardsV1AstVariableDefinitionValueMultiSelect(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetDefinitionValueBarChart successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueBarChart)
			model.BarChart = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetDefinitionValueBarChart
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetDefinitionValueBarChart(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetDefinitionValueDataTable successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueDataTable)
			model.DataTable = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetDefinitionValueDataTable
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetDefinitionValueDataTable(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetDefinitionValueGauge successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueGauge)
			model.Gauge = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetDefinitionValueGauge
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetDefinitionValueGauge(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart)
			model.HorizontalBarChart = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetDefinitionValueHorizontalBarChart(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetDefinitionValueLineChart successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart)
			model.LineChart = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetDefinitionValueLineChart
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetDefinitionValueLineChart(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetDefinitionValueMarkdown successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValueMarkdown)
			model.Markdown = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetDefinitionValueMarkdown
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetDefinitionValueMarkdown(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetDefinitionValuePieChart successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetDefinitionValuePieChart)
			model.PieChart = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetDefinitionValuePieChart
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetDefinitionValuePieChart(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueDataprime successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartQueryValueDataprime)
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartQueryValueDataprime
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueDataprime(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueLogs successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartQueryValueLogs)
			model.Logs = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartQueryValueLogs
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueLogs(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueMetrics successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartQueryValueMetrics)
			model.Metrics = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartQueryValueMetrics
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartQueryValueMetrics(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisTypeTime successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartXAxisTypeTime)
			model.Time = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartXAxisTypeTime
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisTypeTime(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisTypeValue successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsBarChartXAxisTypeValue)
			model.Value = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsBarChartXAxisTypeValue
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsBarChartXAxisTypeValue(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueAggregation successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsCommonColorsByValueAggregation)
			model.Aggregation = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsCommonColorsByValueAggregation
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueAggregation(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy)
			model.GroupBy = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueGroupBy(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueStack successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsCommonColorsByValueStack)
			model.Stack = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsCommonColorsByValueStack
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsCommonColorsByValueStack(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueDataprime successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTableQueryValueDataprime)
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTableQueryValueDataprime
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueDataprime(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueLogs successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTableQueryValueLogs)
			model.Logs = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTableQueryValueLogs
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueLogs(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueMetrics successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsDataTableQueryValueMetrics)
			model.Metrics = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsDataTableQueryValueMetrics
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsDataTableQueryValueMetrics(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueDataprime successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsGaugeQueryValueDataprime)
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsGaugeQueryValueDataprime
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueDataprime(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueLogs successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsGaugeQueryValueLogs)
			model.Logs = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsGaugeQueryValueLogs
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueLogs(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueMetrics successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsGaugeQueryValueMetrics)
			model.Metrics = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsGaugeQueryValueMetrics
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsGaugeQueryValueMetrics(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime)
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueDataprime(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs)
			model.Logs = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueLogs(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics)
			model.Metrics = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartQueryValueMetrics(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory)
			model.Category = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewCategory(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue)
			model.Value = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsHorizontalBarChartYAxisViewByYAxisViewValue(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueDataprime successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueDataprime)
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueDataprime
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueDataprime(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueLogs successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueLogs)
			model.Logs = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueLogs
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueLogs(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueMetrics successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics)
			model.Metrics = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsLineChartQueryValueMetrics
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsLineChartQueryValueMetrics(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueDataprime successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsPieChartQueryValueDataprime)
			model.Dataprime = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsPieChartQueryValueDataprime
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueDataprime(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueLogs successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsPieChartQueryValueLogs)
			model.Logs = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsPieChartQueryValueLogs
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueLogs(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueMetrics successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1AstWidgetsPieChartQueryValueMetrics)
			model.Metrics = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1AstWidgetsPieChartQueryValueMetrics
			err = logsv0.UnmarshalApisDashboardsV1AstWidgetsPieChartQueryValueMetrics(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationValueAverage successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationValueAverage)
			model.Average = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationValueAverage
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationValueAverage(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationValueCount successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationValueCount)
			model.Count = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationValueCount
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationValueCount(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationValueCountDistinct successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationValueCountDistinct)
			model.CountDistinct = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationValueCountDistinct
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationValueCountDistinct(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationValueMax successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationValueMax)
			model.Max = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationValueMax
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationValueMax(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationValueMin successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationValueMin)
			model.Min = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationValueMin
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationValueMin(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationValuePercentile successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationValuePercentile)
			model.Percentile = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationValuePercentile
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationValuePercentile(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisDashboardsV1CommonLogsAggregationValueSum successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisDashboardsV1CommonLogsAggregationValueSum)
			model.Sum = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisDashboardsV1CommonLogsAggregationValueSum
			err = logsv0.UnmarshalApisDashboardsV1CommonLogsAggregationValueSum(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisEvents2metricsV2AggregationAggMetadataHistogram successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataHistogram)
			model.Enabled = core.BoolPtr(true)
			model.AggType = core.StringPtr("samples")
			model.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
			model.Histogram = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisEvents2metricsV2AggregationAggMetadataHistogram
			err = logsv0.UnmarshalApisEvents2metricsV2AggregationAggMetadataHistogram(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisEvents2metricsV2AggregationAggMetadataSamples successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples)
			model.Enabled = core.BoolPtr(true)
			model.AggType = core.StringPtr("samples")
			model.TargetMetricName = core.StringPtr("alias_field_name_agg_func")
			model.Samples = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisEvents2metricsV2AggregationAggMetadataSamples
			err = logsv0.UnmarshalApisEvents2metricsV2AggregationAggMetadataSamples(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisViewsV1TimeSelectionSelectionTypeCustomSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection)
			model.CustomSelection = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisViewsV1TimeSelectionSelectionTypeCustomSelection
			err = logsv0.UnmarshalApisViewsV1TimeSelectionSelectionTypeCustomSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalApisViewsV1TimeSelectionSelectionTypeQuickSelection successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.ApisViewsV1TimeSelectionSelectionTypeQuickSelection)
			model.QuickSelection = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.ApisViewsV1TimeSelectionSelectionTypeQuickSelection
			err = logsv0.UnmarshalApisViewsV1TimeSelectionSelectionTypeQuickSelection(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes)
			model.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.Name = core.StringPtr("My Dashboard")
			model.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
			model.Layout = nil
			model.Variables = nil
			model.Filters = nil
			model.Annotations = nil
			model.FiveMinutes = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.DashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes
			err = logsv0.UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshFiveMinutes(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshOff successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.DashboardApisDashboardsV1AstDashboardAutoRefreshOff)
			model.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.Name = core.StringPtr("My Dashboard")
			model.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
			model.Layout = nil
			model.Variables = nil
			model.Filters = nil
			model.Annotations = nil
			model.False = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.DashboardApisDashboardsV1AstDashboardAutoRefreshOff
			err = logsv0.UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshOff(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes)
			model.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.Name = core.StringPtr("My Dashboard")
			model.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
			model.Layout = nil
			model.Variables = nil
			model.Filters = nil
			model.Annotations = nil
			model.TwoMinutes = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.DashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes
			err = logsv0.UnmarshalDashboardApisDashboardsV1AstDashboardAutoRefreshTwoMinutes(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDashboardApisDashboardsV1AstDashboardFolderFolderID successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.DashboardApisDashboardsV1AstDashboardFolderFolderID)
			model.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.Name = core.StringPtr("My Dashboard")
			model.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
			model.Layout = nil
			model.Variables = nil
			model.Filters = nil
			model.Annotations = nil
			model.FolderID = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.DashboardApisDashboardsV1AstDashboardFolderFolderID
			err = logsv0.UnmarshalDashboardApisDashboardsV1AstDashboardFolderFolderID(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDashboardApisDashboardsV1AstDashboardFolderFolderPath successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.DashboardApisDashboardsV1AstDashboardFolderFolderPath)
			model.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.Name = core.StringPtr("My Dashboard")
			model.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
			model.Layout = nil
			model.Variables = nil
			model.Filters = nil
			model.Annotations = nil
			model.FolderPath = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.DashboardApisDashboardsV1AstDashboardFolderFolderPath
			err = logsv0.UnmarshalDashboardApisDashboardsV1AstDashboardFolderFolderPath(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame)
			model.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.Name = core.StringPtr("My Dashboard")
			model.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
			model.Layout = nil
			model.Variables = nil
			model.Filters = nil
			model.Annotations = nil
			model.AbsoluteTimeFrame = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame
			err = logsv0.UnmarshalDashboardApisDashboardsV1AstDashboardTimeFrameAbsoluteTimeFrame(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalDashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame)
			model.Href = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.ID = core.StringPtr("6U1Q8Hpa263Se8PkRKaiE")
			model.Name = core.StringPtr("My Dashboard")
			model.Description = core.StringPtr("This dashboard shows the performance of our production environment.")
			model.Layout = nil
			model.Variables = nil
			model.Filters = nil
			model.Annotations = nil
			model.RelativeTimeFrame = core.StringPtr("1d")

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.DashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame
			err = logsv0.UnmarshalDashboardApisDashboardsV1AstDashboardTimeFrameRelativeTimeFrame(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalEvent2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery)
			model.Name = core.StringPtr("Service catalog latency")
			model.Description = core.StringPtr("avg and max the latency of catalog service")
			model.PermutationsLimit = core.Int64Ptr(int64(30000))
			model.MetricLabels = nil
			model.MetricFields = nil
			model.Type = core.StringPtr("logs2metrics")
			model.LogsQuery = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.Event2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery
			err = logsv0.UnmarshalEvent2MetricPrototypeApisEvents2metricsV2E2mCreateParamsQueryLogsQuery(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalOutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications)
			model.Type = core.StringPtr("ibm_event_notifications")
			model.Name = core.StringPtr("Event Notifications Integration")
			model.URL = core.StringPtr("https://example.com")
			model.IbmEventNotifications = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.OutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications
			err = logsv0.UnmarshalOutgoingWebhookPrototypeOutgoingWebhooksV1OutgoingWebhookInputDataConfigIbmEventNotifications(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalPolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules)
			model.Name = core.StringPtr("My Policy")
			model.Description = core.StringPtr("My Policy Description")
			model.Priority = core.StringPtr("type_high")
			model.ApplicationRule = nil
			model.SubsystemRule = nil
			model.ArchiveRetention = nil
			model.LogRules = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.PolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules
			err = logsv0.UnmarshalPolicyPrototypeQuotaV1CreatePolicyRequestSourceTypeRulesLogRules(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleMatcherConstraintApplicationName successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleMatcherConstraintApplicationName)
			model.ApplicationName = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleMatcherConstraintApplicationName
			err = logsv0.UnmarshalRulesV1RuleMatcherConstraintApplicationName(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleMatcherConstraintSeverity successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleMatcherConstraintSeverity)
			model.Severity = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleMatcherConstraintSeverity
			err = logsv0.UnmarshalRulesV1RuleMatcherConstraintSeverity(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleMatcherConstraintSubsystemName successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleMatcherConstraintSubsystemName)
			model.SubsystemName = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleMatcherConstraintSubsystemName
			err = logsv0.UnmarshalRulesV1RuleMatcherConstraintSubsystemName(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParametersRuleParametersAllowParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParametersRuleParametersAllowParameters)
			model.AllowParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParametersRuleParametersAllowParameters
			err = logsv0.UnmarshalRulesV1RuleParametersRuleParametersAllowParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParametersRuleParametersBlockParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParametersRuleParametersBlockParameters)
			model.BlockParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParametersRuleParametersBlockParameters
			err = logsv0.UnmarshalRulesV1RuleParametersRuleParametersBlockParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParametersRuleParametersExtractParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParametersRuleParametersExtractParameters)
			model.ExtractParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParametersRuleParametersExtractParameters
			err = logsv0.UnmarshalRulesV1RuleParametersRuleParametersExtractParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParametersRuleParametersExtractTimestampParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParametersRuleParametersExtractTimestampParameters)
			model.ExtractTimestampParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParametersRuleParametersExtractTimestampParameters
			err = logsv0.UnmarshalRulesV1RuleParametersRuleParametersExtractTimestampParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParametersRuleParametersJSONExtractParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParametersRuleParametersJSONExtractParameters)
			model.JSONExtractParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParametersRuleParametersJSONExtractParameters
			err = logsv0.UnmarshalRulesV1RuleParametersRuleParametersJSONExtractParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParametersRuleParametersJSONParseParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParametersRuleParametersJSONParseParameters)
			model.JSONParseParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParametersRuleParametersJSONParseParameters
			err = logsv0.UnmarshalRulesV1RuleParametersRuleParametersJSONParseParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParametersRuleParametersJSONStringifyParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParametersRuleParametersJSONStringifyParameters)
			model.JSONStringifyParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParametersRuleParametersJSONStringifyParameters
			err = logsv0.UnmarshalRulesV1RuleParametersRuleParametersJSONStringifyParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParametersRuleParametersParseParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParametersRuleParametersParseParameters)
			model.ParseParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParametersRuleParametersParseParameters
			err = logsv0.UnmarshalRulesV1RuleParametersRuleParametersParseParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParametersRuleParametersRemoveFieldsParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParametersRuleParametersRemoveFieldsParameters)
			model.RemoveFieldsParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParametersRuleParametersRemoveFieldsParameters
			err = logsv0.UnmarshalRulesV1RuleParametersRuleParametersRemoveFieldsParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
		It(`Invoke UnmarshalRulesV1RuleParametersRuleParametersReplaceParameters successfully`, func() {
			// Construct an instance of the model.
			model := new(logsv0.RulesV1RuleParametersRuleParametersReplaceParameters)
			model.ReplaceParameters = nil

			b, err := json.Marshal(model)
			Expect(err).To(BeNil())

			var raw map[string]json.RawMessage
			err = json.Unmarshal(b, &raw)
			Expect(err).To(BeNil())

			var result *logsv0.RulesV1RuleParametersRuleParametersReplaceParameters
			err = logsv0.UnmarshalRulesV1RuleParametersRuleParametersReplaceParameters(raw, &result)
			Expect(err).To(BeNil())
			Expect(result).ToNot(BeNil())
			Expect(result).To(Equal(model))
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate("2019-01-01")
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime("2019-01-01T12:00:00.000Z")
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := []byte(mockData)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return io.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate(mockData string) *strfmt.Date {
	d, err := core.ParseDate(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func CreateMockDateTime(mockData string) *strfmt.DateTime {
	d, err := core.ParseDateTime(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
